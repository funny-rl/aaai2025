{"name":"1008_A. Romaji","description":"Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.","grammar":{"productions":["<S>->[a-z]{1,100}"],"constraints":["1<=|s|<=100"]}}
{"name":"1016_A. Death Note","description":"You received a notebook which is called Death Note. This notebook has infinite number of pages. A rule is written on the last page (huh) of this notebook. It says: \"You have to write names in this notebook during n consecutive days. During the i-th day you have to write exactly a_i names.\". You got scared (of course you got scared, who wouldn't get scared if he just receive a notebook which is named Death Note with a some strange rule written in it?).\n\nOf course, you decided to follow this rule. When you calmed down, you came up with a strategy how you will write names in the notebook. You have calculated that each page of the notebook can contain exactly m names. You will start writing names from the first page. You will write names on the current page as long as the limit on the number of names on this page is not exceeded. When the current page is over, you turn the page. Note that you always turn the page when it ends, it doesn't matter if it is the last day or not. If after some day the current page still can hold at least one name, during the next day you will continue writing the names from the current page.\n\nNow you are interested in the following question: how many times will you turn the page during each day? You are interested in the number of pages you will turn each day from 1 to n.\n\nInput\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.","grammar":{"productions":["<S>->[n] <s> m <n> <T_n>","<T_i>-><T_i-1> <s> a_i","<T_1>->a_1"],"constraints":["1<=n<2*10^5","1<=m<=10^9","1<=a_i<=10^9"]}}
{"name":"101_C. Vectors","description":"Input\n\nThe first line contains integers x1 \u0438 y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <=10^8). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).","grammar":{"productions":["<S>->x1 <s> y1 <n> x2 <s> y2 <n> x3 <s> y3"],"constraints":["-10^8<=x1,y1,x2,y2,x3,y3<=10^8"]}}
{"name":"1028_A. Find Square","description":"Consider a table of size n \u00d7 m, initially fully white. Rows are numbered 1 through n from top to bottom, columns 1 through m from left to right. Some square inside the table with odd side length was painted black. Find the center of this square.\n\nInput\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.","grammar":{"productions":["<S>->[n] <s> [m] <n> <T_n>","<T_i>-><T_i-1> <n> [WB]{m}","<T_1>->[WB]{m}"],"constraints":["1<=n,m<=115"]}}
{"name":"1036_B. Diagonal Walking v.2","description":"Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.","grammar":{"productions":["<S>->[q] <n> <T_q>","<T_i>-><T_i-1> <n> n_i <s> m_i <s> k_i","<T_1>->n_i <s> m_i <s> k_i"],"constraints":["1<=q<=10^4","1<=n_i<=10^18","1<=m_i<=10^18","1<=k_i<=10^18"]}}
{"name":"1037_A. Packets","description":"Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.","grammar":{"productions":["<S>->n"],"constraints":["1<=n<=10^9"]}}
{"name":"1038_D. Slime","description":"Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.","grammar":{"productions":["<S>->[n] <n> <T_n>","<T_i>-><T_i-1> <s> a_i","<T_1>->a_i"],"constraints":["1<=n<=500000","-10^9<=a_i<=10^9"]}}
{"name":"103_C. Russian Roulette","description":"Input\n\nThe first line contains three integers n, k and p (1 <= n <=10^18, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in \u0421++. It is preferred to use cin, cout streams or the %I64d specificator.","grammar":{"productions":["<S>->n <s> k <s> [p] <n> <T_p>","<T_i>-><T_i-1> <n> x_i","<T_1>->x_1"],"constraints":["1<=n<=10^18","0<=k<=n","1<=p<=1000","1<=x_i<=n"]}}
{"name":"1047_D. Little C Loves 3 II","description":"Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.","grammar":{"productions":["<S>->n <s> m"],"constraints":["1<=n,m<=10^9"]}}
{"name":"1054_A. Elevator or Stairs?","description":"Masha lives in a multi-storey building, where floors are numbered with positive integers. Two floors are called adjacent if their numbers differ by one. Masha decided to visit Egor. Masha lives on the floor x, Egor on the floor y (not on the same floor with Masha).\n\nThe house has a staircase and an elevator. If Masha uses the stairs, it takes t_1 seconds for her to walk between adjacent floors (in each direction). The elevator passes between adjacent floors (in each way) in t_2 seconds. The elevator moves with doors closed. The elevator spends t_3 seconds to open or close the doors. We can assume that time is not spent on any action except moving between adjacent floors and waiting for the doors to open or close. If Masha uses the elevator, it immediately goes directly to the desired floor.\n\nComing out of the apartment on her floor, Masha noticed that the elevator is now on the floor z and has closed doors. Now she has to choose whether to use the stairs or use the elevator. \n\nIf the time that Masha needs to get to the Egor's floor by the stairs is strictly less than the time it will take her using the elevator, then she will use the stairs, otherwise she will choose the elevator.\n\nHelp Mary to understand whether to use the elevator or the stairs.\n\nInput\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.","grammar":{"productions":["<S>->x <s> y <s> z <s> t1 <s> t2 <s> t3"],"constraints":["1<=x,y,z,t1,t2,t3<=1000"]}}

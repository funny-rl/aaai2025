{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "testcase": ["abcde", "fghij", "klmno", "pqrst", "uvwxyz", "zzaaa", "12345", "abc123", "za1234", "98765"]}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "testcase": ["1 2\n1", "10 1\n1 2 3 4 5 6 7 8 9 10", "10 1\n1 1 1 1 1 1 1 1 1 1", "10 1\n10 10 10 10 10 10 10 10 10 10", "10 2\n10 10 10 10 10 10 10 10 10 10", "10 2\n1 20 3 4 5 16 7 8 9 10", "10 2\n1 1 1 1 1 1 1 1 1 10", "10 5\n1 2 3 4 5 6 7 8 9 10", "10 10\n10 10 10 10 10 10 10 10 10 10", "10 10\n1 9 3 7 5 2 6 8 4 10"]}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 и y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <=10^8). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "testcase": ["-1 1\n-2 2\n-3 3", "-10000 0\n0 1000\n10000 0", "560823943 856013612\n560823943 856013612\n560823943 856013612", "1000000000 1000000000\n1000000000 1000000000\n1000000000 1000000000", "1 1\n2 5\n4 14", "3 4\n5 7\n2 5", "1000 1000\n-1000 -1000\n1000 -1000", "1000 1000\n1000 -1000\n-1000 1000", "-5 5\n15 -15\n25 -25", "10 10\n-20 20\n-30 30"]}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "testcase": ["2 2\nWW\nBB", "1 1\nB", "2 1\nWB", "2 3\nWBW\nBWB", "2 3\nWWW\nWWW", "1 1\nW", "2 1\nWW", "2 3\nBWB\nBWB", "4 4\nWWWW\nBWWW\nBBBW\nBWBB", "1 3\nWWW"]}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "testcase": ["1\n1 1 1", "1\n1 2 1", "1\n2 3 1", "1\n2 2 1", "1\n2 1 1", "1\n1 2 2", "1\n1 3 2", "1\n2 4 2", "1\n2 3 2", "1\n4 4 4"]}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "testcase": ["1\n1", "1\n-1", "2\n0 0", "2\n1 1", "2\n1 -1", "3\n1 2 3", "3\n-1 -2 -3", "4\n-1 0 1 2", "4\n1 0 -1 -2", "4\n1 2 -1 -2"]}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <=10^18, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.", "testcase": ["3 2 1\n1\n3 1 5\n2\n2\n10 3 5\n5\n3\n7\n10\n9\n1 0 1\n1", "5 4 1\n5\n10 2 100\n2\n2\n2\n1\n1 0 1\n1", "5 4 1\n5\n2 6 100\n2\n2\n2\n1\n1 0 1\n1", "5 4 1\n5\n2 2 100\n2\n2\n2\n1\n1 0 1\n1", "5 4 1\n5\n2 6 100\n2\n2\n2\n1\n1 0 1\n1", "5 3 1\n5\n2 2 100\n2\n2\n2\n1 0 1\n1", "5 4 1\n5\n2 2 100\n2\n1\n2\n1\n1 0 1\n1", "5 4 1\n5\n2 2 100\n2\n2\n2\n1\n1 0 1\n1", "5 4 1\n5\n2 2 100\n2\n2\n2\n1\n1 0 1\n1", "5 4 1\n5\n2 6 100\n2\n2\n2\n1\n1 0 1\n1"]}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "testcase": ["1 1", "10 10", "100 100", "1000 1000", "10000 10000", "100000 100000", "1000000 1000000", "10000000 10000000", "100000000 100000000", "1000000000 1000000000"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["1 10 1 5 3 4", "10 1 1 5 3 4", "1 10 3 5 3 4", "10 1 3 5 3 4", "1 10 6 5 3 4", "10 1 6 5 3 4", "1 10 10 5 3 4", "10 1 10 5 3 4", "5 3 1 2 1 3", "5 3 6 2 1 3"]}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "testcase": ["1\n9", "2\n12", "2\n98", "3\n314", "4\n1111", "1\n0", "7\n5432109", "100\n1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "10\n1234567890", "10\n9876543210"]}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "testcase": ["2", "3", "10", "10", "100000", "100000", "1000000000", "2", "100000", "1000"]}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "1000000000"]}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "testcase": ["2", "10", "1000000000", "1000000000", "5000000000", "3141592653", "9876543210", "1234567890", "1111111111", "864197532"]}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "testcase": ["abcd", "vvvvvvvvvvv", "abcdefghijklmnopqrstuvwxyz", "aaaaaaaaaaaaaa", "bbbbbbbbbbbbbbbb", "cccccccccccccccccc", "dddddddddddddddddd", "eeeeeeeeeeeeeeeeee", "1234567890", "zxcvbnmasdfghjklqwertyuiop"]}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "1000000000"]}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "testcase": ["4\naahd", "9\nffdkjflrr", "13\nskhdflgkdfhg", "18\njhsdukjfhksdmfjks", "22\nkjfhskjfhskjfhskjfhsk", "27\nlsdjfhsdfhskjfhsdkjfhskjfh", "31\njsfhskjfhskjfhskjfhskjfhskjfh", "36\nkshfjksdhfkjshfkjshfkjfhskjfhsk", "40\njskdfhkjhskjfhskjhskjfhskjfhskjfh", "45\nskjhdfkjhdfkjhdfkjhdfkjhdfkjhdfkj"]}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "testcase": [""]}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "testcase": ["1", "2", "3", "123456789", "987654321", "1000000000", "1234567890", "1111111111", "9999999999", "2147483647"]}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <=10^5) --- the length of the sought string.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "testcase": ["2 2\n0 1", "2 3\n0 1 0", "3 3\n2 1 0", "4 3\n0 0 4", "5 3\n4 0 2", "6 3\n2 2 5", "7 3\n6 4 0", "8 3\n5 7 0", "9 3\n7 8 0", "10 3\n0 9 0"]}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "testcase": ["1 2 3\n1 2 3", "100000 100000 100000\n100000 100000 100000", "1 2 3\n3 2 1", "3 2 1\n1 2 3", "99999 99999 1\n100000 100000 0", "100000 1 1\n100000 1 0", "1 1 1\n1 1 1", "100000 100000 1\n1 100000 1", "100000 1 99999\n1 99999 1", "9641 8470 32518\n8252 27801 12047"]}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <=10^6 --- the board's vertical and horizontal sizes and the number of colors respectively.", "testcase": ["1 1 1", "1 2 1", "2 1 1", "2 2 1", "1000 1 1", "1000 1000 1", "1000 1000 2", "1 1 10", "10 10 10", "1000 1000 10"]}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["2 5\n1 2\n2 1\n1 2\n2 1\n1 2", "2 3\n1 2\n2 1\n2 1", "5 7\n1 2\n2 3\n3 4\n4 5\n5 1\n3 2\n2 3", "5 1\n1 2", "5 2\n1 2\n3 4", "3 4\n1 2\n2 3\n1 3\n2 1", "3 3\n1 2\n2 3\n3 1", "3 4\n1 2\n2 3\n1 2\n2 3", "4 5\n1 2\n2 3\n3 4\n1 3\n2 4", "4 4\n1 2\n2 3\n3 4\n1 4"]}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "testcase": ["2\nabc\ndef\n5\na\nabc\nabcba\ncaba\nab\n5\ntest\ntest\ntest\ntest\ntest", "3\na\nbc\nab\n4\nabc\ncab\ncaa\naca"]}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "testcase": ["1\n1", "2\n1 2", "3\n1 2 3", "4\n1 2 3 4", "5\n1 2 3 4 5", "6\n1 2 3 4 5 6", "7\n1 2 3 4 5 6 7", "8\n1 2 3 4 5 6 7 8", "9\n1 2 3 4 5 6 7 8 9", "10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "testcase": ["1 1", "5 5", "2 2", "3 3", "1000000000 1000000000", "1000000000 1", "1 1000000000", "1000000000 500000000", "1000000000 200000000", "500000000 100000000"]}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "testcase": ["1\n0", "2\n0 0", "3\n1 2 3", "4\n0 1 2 3", "5\n0 0 0 0 0", "1\n1000000", "2\n1000000 1000000", "3\n1000000 1000000 1000000", "4\n1000000 1000000 1000000 1000000", "5\n1000000 1000000 1000000 1000000 1000000"]}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "testcase": ["abcd", "efghij", "qpwoer", "zxcvbn", "lkjhgf", "asdfgh", "qwerty", "poiuyd", "bnm,lk", "kjhgfds"]}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "testcase": ["1\n-\n", "1\n+\n", "5\n--+++\n", "5\n+++++-\n", "10\n+---+++++-\n", "10\n-+--++-++-\n", "20\n+++++++++++++----++++-\n", "20\n+-------------------+\n", "50\n++++++++++++++++++++++++++++++++++++++++++++++\n", "100\n--------------------------------------------------------------------------------------------"]}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "testcase": [""]}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "testcase": ["5\nvasya\npetya\nvasya\nmasha\npetya", "4\nvasya\npetya\npetya\nvasya", "2\nvasya\nvasya", "10\nvasya\npetya\nvasya\nmasha\npetya\nsasha\nmasha\npetya\nsasha\nvasya", "7\nvasya\npetya\npetya\nvasya\npetya\nvasya\npetya", "6\nvasya\npetya\npetya\nvasya\npetya\nvasya", "3\nvasya\npetya\nvasya", "9\nvasya\npetya\nvasya\nmasha\npetya\nsasha\nvasya\npetya\nsasha", "1\nvasya", "8\nvasya\npetya\nvasya\nmasha\npetya\nsasha\nmasha\npetya"]}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <=10^9, 1 <= mod <=10^7).", "testcase": ["0 0 1", "1 1 10", "10 10 100", "100 100 1000", "1000 1000 10000", "10000 10000 100000", "100000 100000 1000000", "1000000 1000000 10000000", "10000000 10000000 100000000", "100000000 100000000 1000000000"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "testcase": ["0 0 1", "0 0 1000000000000000000", "1000000000000000000 0 1", "1000000000000000000 1000000000000000000 1", "0 1000000000000000000 1", "1 1 1", "1 0 1", "0 1 1", "100 100 100", "1000000000000000000 1000000000000000000 1000000000"]}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "testcase": ["1 1 1 1", "1 1 2 2", "1 2 3 4", "10 20 30 40", "1000000000 1000000000 1000000000 1000000000", "1 2 1 2", "2 2 2 2", "3 4 4 4", "10 20 20 20", "1000000000 2000000000 1000000000 2000000000"]}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "testcase": [""]}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "testcase": ["2 3 1 1", "1 4 2 2", "5 5 3 3", "1 1 1 1", "3 1 1 1", "2 1 10 1", "1 2 1 10", "10 1 10 1", "1 10 1 10", "10 10 1 1"]}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "testcase": ["30", "31", "32", "33", "34", "35", "36", "37", "38", "39"]}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "testcase": ["1 1 1", "1 1 2", "1 2 3", "2 2 4", "2 3 5", "3 3 6", "3 4 7", "4 4 8", "5 5 9", "5 6 10"]}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "testcase": ["10\n1 2 3 4 5 6 7 8 9 10", "4\n1 2 5 15", "3\n1 5 10", "2\n5 15", "5\n1 5 10 15 20", "7\n3 4 5 10 15 20 25", "9\n3 4 5 10 15 20 25 30 35", "11\n3 4 5 10 15 20 25 30 35 40 45", "13\n3 4 5 10 15 20 25 30 35 40 45 50 55", "15\n3 4 5 10 15 20 25 30 35 40 45 50 55 60 65"]}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "testcase": ["0", "1", "11", "000", "001", "111", "010", "101", "100", "11111"]}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "testcase": ["1\n0 0 0", "1\n0 1 1", "1\n1 0 0", "1\n1 1 1", "1\n1 1 0", "1\n10 20 30", "1\n10 30 20", "1\n30 10 20", "1\n30 20 10", "1\n1000000000 1000000000 1000000000"]}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "testcase": ["1\n5\n1 10 3 2 4", "1\n1\n1", "1\n5\n1 2 3 4 5", "1\n5\n5 4 3 2 1", "1\n5\n1 2 4 3 5", "1\n5\n5 3 2 1 4", "1\n5\n5 4 2 1 3", "1\n5\n5 4 3 1 2", "1\n5\n3 2 1 5 4", "1\n5\n4 2 1 5 3"]}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "testcase": ["1\n111000111", "1\n010101010", "1\n10001101101101010110", "1\n10101010101010101010", "1\n00000000000000000000", "1\n01101001011011100010", "1\n11101100100110100111", "1\n01000010001000100010", "1\n11110000111110000111", "1\n01000000000000000000"]}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "2 1", "3 1", "4 1", "5 1", "1 2", "2 2", "3 2", "4 2", "5 2"]}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "testcase": ["aa", "abc", "abcabc", "abcdefghijklmnopqrstuvwxyz", "zyxwvutsrqponmlkjihgfedcba", "a", "b", "c", "d", "e"]}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "testcase": ["1\n2", "1\n10", "1\n100", "1\n1000", "1\n10000", "1\n100000", "1\n1000000", "1\n10000000", "1\n100000000", "1\n999999999"]}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "testcase": ["2\n2\n1 1\n2 2\n4\n1 100\n2 101\n3 200\n4 201", "3\n1\n2 2\n2\n1 5\n6 10\n4\n1 14\n4 10\n7 33\n16 42"]}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "testcase": ["1 2 3 4", "1 2 4 3", "1 3 2 4", "1 3 4 2", "1 4 2 3", "1 4 3 2", "2 1 3 4", "2 1 4 3", "2 3 1 4", "2 3 4 1"]}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "testcase": ["1 0\n1", "1 1\n1", "2 1\n11", "2 2\n15", "3 0\n123", "3 1\n101", "3 2\n101", "200000 0\n54343432342342343", "200000 199999\n54343432342342343", "200000 200000\n123456789012345678"]}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "testcase": ["1 1", "1 2", "2 1", "2 2", "100 1", "1 100", "10 10", "100 100", "100000 1", "1 100000"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "testcase": ["1\n4\n1 4 2 3", "2\n3\n1 3 2\n3\n2 3 1", "3\n1\n1", "1\n2\n2 1", "9\n3\n1 2 3\n2\n1 2\n3\n3 2 1\n1\n1\n1\n1\n1\n1", "1\n1\n1", "2\n5\n2 1 4 5 3\n5\n3 5 2 4 1", "1\n6\n5 6 3 4 1 2", "1\n2\n1 2", "5\n2\n2 1\n3\n1 3 2\n1\n1\n1\n1"]}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "testcase": ["abcdefghi", "abcabcabc", "zzzzzzzzzz", "aaabbbccc", "abcdedcba", "abc", "abccba", "baba", "x", "qwqweqweqs"]}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "testcase": ["3\n2\n11\n12345", "5\n10\n123456\n9876543210\n1234567890\n1111111111", "7\n5\n54321\n123456789\n98765431\n123456789012\n234567890123"]}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "testcase": ["1\n1 2\n1 1000000000", "1\n2 3\n1000000000 1", "1\n1 1\n1 100", "1\n999999999 1000000000\n100000000 10", "1\n10 1\n999999999 1000000000", "1\n1 1\n1 1", "1\n1000000000 1000000000\n1000000000 1000000000", "1\n100000000 999999999\n1000000000 1000000000", "1\n10 9\n1000000000 1000000000", "1\n1 10\n1000000000 1000000000"]}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "testcase": ["1", "3", "23", "42", "53", "12", "5", "999", "21", "10000"]}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "testcase": ["AABBCC", "AAABBBCCC", "R", "GGGGGGGBBBBRRRRRGGGGGGGGG", "AAAAAAAAAAABBBBBBBBBBB", "ABCABCABCABCABCABCABC", "AABBBCDDDDEEEBFFGGGG", "TUZXUZXUZXUZXUZXUZX", "ABCDEFABCDEFABCDEFABCDEF", "ZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ"]}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "testcase": ["1\n1", "3\n101\n010\n101", "4\n0001\n1001\n1101\n1111", "5\n10000\n01000\n00100\n00010\n00001", "6\n111111\n111111\n111111\n111111\n111111\n111111", "7\n0000000\n0000000\n0000000\n0000000\n0000000\n0000000\n0000000", "8\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111\n11111111", "9\n100000000\n010000000\n001000000\n000100000\n000010000\n000001000\n000000100\n000000010\n000000001", "10\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111\n1111111111"]}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "testcase": ["1\n5 4", "1\n4 1", "1\n3 6", "1\n2 4", "1\n1 2", "1\n1 1", "1\n2 3", "1\n4 4", "1\n5 2", "1\n6 3"]}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "testcase": ["1\n4\n20 10\n15 30\n18 12\n10 35", "1\n6\n0 800\n400 0\n800 0\n0 400\n400 800\n800 400", "1\n1\n0 0", "1\n2\n1 2\n3 4", "1\n3\n0 3\n4 0\n5 6", "1\n4\n0 0\n1 0\n0 1\n1 1", "1\n5\n1 1\n2 2\n3 3\n4 4\n5 5", "1\n6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "1\n7\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700", "1\n8\n132 724\n346 200\n713 230\n91 309\n215 754\n355 707\n728 823\n385 607"]}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <=10^9) without leading zeroes. The second lines contains one integer m (0 <= m <=10^9) --- Bob's answer, possibly with leading zeroes.", "testcase": ["0\n9", "1\n0", "2\n1", "3\n2", "4\n3", "5\n4", "6\n5", "7\n6", "8\n7", "9\n8"]}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "testcase": ["()", "(())", "(()())", "(()())()", "()()()", "()(())", "((()))", "()((()))", "(()()())", "(((())))"]}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "testcase": ["2\n3 3\nabc\n2 1 1\n2 2\ncat\n1\n3 2\nfog\n1 1"]}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "testcase": ["2\n3 4\n2 5", "5\n1 2 3 4 5\n1 2 3 4 5", "1\n1\n1", "2\n1000000000 1000000000\n1 1", "10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1", "10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\n1 1 1 1 1 1 1 1 1 1", "2\n100 200\n99 199", "3\n100000000 200000000 300000000\n99999999 199999999 299999999", "2\n42 100\n19 10", "10\n100 100 100 100 100 100 100 100 100 100\n100 100 100 100 100 100 100 100 100 100"]}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "testcase": ["10\n12 2\n3 2\n11 4\n5 1\n6 9\n7 3\n10 6\n9 8\n15 7\n8 5"]}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "testcase": ["SNNNEE", "NWNEEN", "WWEEEEN", "NESWWNE", "NNNEEEW", "EENENNEEEEEN", "SWENE", "ENNESNNEEN", "ENENNENSNSNWEEEN", "SESENNWEE"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["2 1", "3 2", "4 3", "5 4", "6 5", "7 6", "8 7", "9 8", "10 9", "1 1"]}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "testcase": ["1\n5 0\n1 2 3 4 5\n4 2 1 3 5", "1\n5 2\n1 2 3 4 5\n5 4 3 2 1", "1\n10 0\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "1\n10 3\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "1\n5 0\n1 1 1 1 1\n5 4 3 2 1", "1\n5 1\n3 2 1 3 2\n4 5 1 2 3", "1\n10 0\n1 1 1 1 1 1 1 1 1 1\n3 4 5 6 7 8 9 7 8 9", "1\n10 1\n1 1 1 1 1 1 1 1 1 1\n10 9 8 7 6 5 4 3 2 1", "1\n5 0\n1 1 2 3 4\n1 2 3 4 5", "1\n5 1\n1 1 2 3 4\n4 5 3 2 1"]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["10", "1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "testcase": ["1\n5 5", "1\n4 5", "1\n1 1", "1\n10 10", "1\n5 10", "1\n2 2", "1\n1 2", "1\n2 1", "1\n10 5", "1\n5 1"]}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "testcase": ["1\n1 2", "10\n2 15", "1\n3 1", "20\n3 10", "100\n4 5", "1000\n22 55", "3\n1 11", "5\n2 10", "7\n12 18", "4\n12 15"]}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "testcase": ["1\n3 5", "1\n7 0", "1\n0 11", "1\n8 6", "1\n0 12", "1\n1 1", "1\n2 7", "1\n7 0", "1\n9 1", "1\n0 10"]}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <=10^9). Both numbers are written in decimal notation.", "testcase": ["0 0", "1000000000 0", "0 1000000000", "1 1", "123456789 123456789", "0 1", "1000000000 1000000000", "1234567890 1234567890", "987654321 987654321", "1234567891 1234567891"]}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "testcase": ["10", "1 0", "1 1", "2 0", "2 1", "2 2", "3 0", "3 1", "3 2", "3 3", "4 0"]}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "testcase": ["4", "1001", "111000", "0", "1111111111"]}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["4\n1\n2\n1\n3\n1\n2\n1\n2", "2\n1\n1\n2\n1 2\n2\n2 1\n3\n1 2 3\n3\n1 3 2\n4\n1 2 3 4\n4\n1 2 4 3"]}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "testcase": ["3", "4", "5", "6", "7", "8", "9", "10", "100000", "1000000"]}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "testcase": ["1\n1", "1\n2", "1\n3", "1\n4", "1\n5", "1\n6", "1\n7", "1\n8", "1\n9", "1\n10"]}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "testcase": ["1", "12", "123", "1234", "12345", "123456", "1234567", "12345678", "123456789", "1234567890"]}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "testcase": ["1\n1 1", "2\n3 2", "1\n100 42", "1\n1000000 42", "2\n123456 2", "1\n987654 1", "1\n1 0", "2\n123456 134560", "1\n1000000000 1", "1\n0 0"]}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "testcase": ["10\n1 1 1 1 1\n1 1 1 2 1\n1 1 1 3 1\n2 1 2 3 1\n2 1 2 2 1\n3 1 3 2 1\n1 1 1 1 10\n2 2 2 2 2\n1 1 1 1 100\n5 5 5 5 5"]}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "testcase": ["1\n3\n101", "5\n2\n10\n3\n65\n5\n11111\n1\n10", "2\n5\n12345\n3\n999", "3\n10\n0123456789\n3\n123\n4\n1234", "1\n5\n54321", "2\n4\n3333\n3\n555", "5\n10\n1234567890\n3\n123\n2\n10\n4\n1234", "10\n3\n333\n9\n999999999\n1\n9\n10\n1234567890\n3\n123\n1\n2\n7\n1234567", "2\n1\n9\n10\n0987654321", "1\n4\n0000"]}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["2\n3\n10 10 10\n5\n1 2 3 4 5", "1\n10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <=10^9).", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "testcase": ["1\n4 2\n5 10 15 20", "1\n3 3\n1 1 1", "1\n5 4\n1 2 3 4 5", "1\n6 5\n1 2 3 4 5 6", "1\n7 6\n1 2 3 4 5 6 7", "1\n8 7\n1 2 3 4 5 6 7 8", "1\n9 8\n1 2 3 4 5 6 7 8 9", "1\n10 9\n1 2 3 4 5 6 7 8 9 10", "1\n11 10\n1 2 3 4 5 6 7 8 9 10 11", "1\n200000 100000\n}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "testcase": [""]}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "testcase": ["1\n3 2", "1\n3 3", "1\n6 2", "1\n6 3", "1\n2 3", "1\n6 5", "1\n2 2", "1\n4 4", "1\n8 2", "1\n100000 1"]}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "testcase": ["1", "abcdefghijklmnopqrstuvwxyz", "tests", "orpheusisagoodpoet", "whynotprogramming", "goodluckwithproblemsolving", "whatislove", "hunter", "codingshouldbefun", "impossibleisnothing"]}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <=10^6.", "testcase": ["1 1 1 1", "1 1 2 2", "1 2 1 2", "1 2 2 1", "1 2 3 4", "2 2 3 3", "3 3 3 3", "4 4 4 4", "1 10000 10000 10000", "10000 10000 10000 10000"]}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "testcase": ["10", "5 3", "4 2 1 6 3", "7 1", "5 2 7 8 1 1 2", "1 1000000000", "9 8", "2 2 2 2 2 2 2 2 2", "2 2", "1 2", "4 3", "3 2 2 6", "5 1000000000", "5 2 4 6 4 8", "10 9", "4 7 8 8 8 9 8 9 8 9"]}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "testcase": ["5\nabcdef\ngood\nlollipop\nbanana\nccccc"]}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "testcase": ["1\n1 2", "1\n2 3", "1\n3 4", "1\n4 5", "1\n5 6", "1\n6 7", "1\n7 8", "1\n8 9", "1\n9 10", "1\n10 11"]}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "testcase": ["1\n1\n1\n1\n1", "2\n2\n2\n2\n10", "3\n3\n3\n3\n100", "4\n4\n4\n4\n1000", "5\n5\n5\n5\n10000", "6\n6\n6\n6\n100000", "7\n7\n7\n7\n1000000", "8\n8\n8\n8\n10000000", "9\n9\n9\n9\n100000000", "10\n10\n10\n10\n1000000000"]}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "testcase": ["1\n10", "1\n100", "1\n10999", "1\n250000000000", "1\n7894567890", "1\n1234567890123456789", "1\n999999999999999999", "1\n18446744073709551615", "10\n987654321123456789", "1\n5646541548631312312"]}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "testcase": ["1\n10", "1\n12345678910111213", "1\n987654321987654321", "1\n1111111111111111111", "1\n9999999999999999999", "1\n5432109876543210987", "1\n1000000000000000000", "1\n1357924680135792468", "1\n1212121212121212121", "1\n1993572811098349520"]}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "testcase": ["4\nabba\nbabaa\nabab\nabaaaaba\n2\na\nb\n3\naabb\naabb\naabb\n5\naba\naab\nbaa\nbab\nbbb\n1\ncaba\n10\naba\naba\nabb\nabb\nbaa\nbaa\nbab\nbab\nbbb\nbbb"]}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <=10^13).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "testcase": ["10\nANOT\nNOTNA\nOTANO\nTONAN\nNNNNN\nAAAAA\nOTNTT\nNNTON\nTATNN\nNOAAT"]}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "testcase": ["1\n01?10", "2\n??\n1??", "3\n000?0?\n1?1?1\n???0???", "4\n???????????\n000000000\n?10?1?10?\n1????1???", "5\n0?011?10?1101\n1?????101010\n????????1?0??1\n???0000000??\n???0?10????????", "6\n?011????0???1?1?0\n?11?0111??00?110?\n??0?101?000?1???1\n11111???????????10\n?10?1?10?1101\n????00?000?00???1", "7\n?????????????00?1\n?0???1?0??1????1?\n1?0?1???01?10??01\n1?0??0?0101????1?\n?????10??0?1011?0\n110???101?101?0?1\n?1????10?1?0101?0", "8\n????01?0?1????1??\n1?1?1?1?01?1110?1\n?????????????00?1\n1?0?1???01?10??01\n????????????0????1\n1??0?11?0?10001?0\n?1????10?1?0101?0\n1?0?10001?101001", "9\n010?10110?0110??\n0?1??1010?10?01?\n?01?11?1011?00??1\n?111??????10100?\n??1?1?01?0?0??01\n1?0?10001?101001\n0?0?01?101?110??\n01?0?1?1?1??0?01\n??????????????00", "10\n????????????0????1\n?1????10?1?0101?0\n010?10110?0110??\n?????????????????\n000?00?1?0?1?101?\n1?0?10001?101001\n0?1??1010?10?01?\n110???101?101?0?1\n1?1?1?1?01?1110?1\n?0?0110?0?0?111??"]}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <=10^9, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "testcase": ["1 8 2 8", "1 10 1 10", "2 7 4 9", "2 8 4 8", "4 7 4 7", "1 1 10 10", "7 8 7 8", "1 10 3 9", "1 1000000000 1 1000000000", "500000000 1000000000 500000000 1000000000"]}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "testcase": ["1 1\n1 1", "2 1\n1 1\n2 2", "2 2\n1 2\n2 1", "2 2\n2 1\n1 2", "3 2\n1 2\n2 2\n3 1", "3 3\n1 2\n2 2\n3 3", "4 2\n1 2\n2 2\n3 2\n4 1", "4 4\n1 2\n2 2\n3 2\n4 4", "5 3\n1 2\n2 2\n3 2\n4 2\n5 1", "5 5\n1 2\n2 2\n3 2\n4 2\n5 5"]}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <=10^4, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "testcase": ["10000 1 100", "100000 1 100", "1000000 1 100", "100 100 100", "10000 1000 100", "100000 10000 100", "1000000 100000 100", "100 100 100", "1 1 100", "1 1 100"]}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "testcase": ["4", "1", "5", "2", "1", "3", "5", "1", "3", "2"]}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "testcase": ["1 1 1", "2 1 2", "3 1 3", "4 1 4", "5 1 5", "10 5 2", "20 5 4", "50 10 5", "100 10 10", "1000 100 10"]}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <=10^6 --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "testcase": ["1 2 3 4", "3 4 5 6", "2 3 4 5", "4 5 6 7", "5 6 7 8", "6 7 8 9", "7 8 9 10", "8 9 10 1", "9 10 1 2", "10 1 2 3"]}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <=10^18) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "testcase": ["1 1", "1 1000", "1 1000000000000000000", "1000000000000000000 1000000000000000000", "999999999999999999 1000000000000000000", "1 18446744073709551615", "1000000000000000000 1000000000000000000", "999999999999999999 1000000000000000000", "9223372036854775807 9223372036854775807", "4611686018427387904 4611686018427387904"]}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "testcase": ["0 0 0", "0 0 1", "0 1 0", "1 0 0", "1 1 0", "0 1 1", "1 0 1", "1 1 1", "123456789 87654321 987654321", "1000000000 1000000000 1000000000"]}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <=10^5) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "testcase": ["2\n1 1\n2\n1 2\n3\n1 2 3\n4\n1 2 3 4\n5\n1 2 3 4 5\n6\n1 2 3 4 5 6\n7\n1 2 3 4 5 6 7\n8\n1 2 3 4 5 6 7 8\n9\n1 2 3 4 5 6 7 8 9\n10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <=10^9). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <=10^9).", "testcase": ["2 2\n1 1", "5 1\n1 2 3 4 5", "1 999999999\n1000000000", "2000 5\n0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "2000 0\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "1 0\n1", "1 1000000000\n0", "2 0\n4 7", "2 1000000000\n4 7", "2000 1000000000\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20\n2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20"]}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "testcase": ["1 2\n5 7\n3 2", "10 3\n1 2\n3 4\n5 6", "2 3\n1 5\n2 10\n1 20", "1 1\n1 0", "3 3\n1 100\n100 1\n1 1", "7 2\n8 3\n9 1", "2 10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "3 2\n1 1\n2 1\n3 1", "9 8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8", "4 7\n2 3\n4 3\n4 1\n1 3\n2 1\n2 2\n4 4"]}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <=10^9; <image> <=10^5).", "testcase": ["3 4 4", "8 5 5", "2 2 7", "9 1 3", "1 9 7", "3 3 6", "5 5 9", "1 7 8", "2 8 9", "7 9 2"]}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "testcase": ["x", "xy", "xxxyyyy", "xxxxxxxxxx", "yyxxxyy", "xxxyyyxxx", "xxyxxyxxy", "yyyyyyyyy", "xxyxxxxyyxxxxx", "xxxyyyyxxxyxx"]}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "testcase": ["0 10 0\n0 1 0\n0 1 0", "1 0 1\n0 1 0\n0 0 1", "0 0 1\n0 0 1\n0 0 1", "0 0 0\n0 0 0\n0 0 0", "0 1 0\n1 1 1\n0 1 0", "0 1 0\n0 1 0\n1 1 0", "0 0 1\n0 0 0\n1 0 0", "0 1 0\n0 0 0\n0 1 0", "0 0 1\n0 1 0\n0 0 1", "1 0 1\n0 1 1\n0 1 0"]}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "16"]}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <=10^18, 2 <= k <=10^9).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "testcase": ["1 2", "1000000000000000000 999999999", "10 5", "1000000000000000000 999999999", "998244353 747362021", "998244353 747362020", "998244353 1", "998244353 10", "998244353 2", "998244353 1000000000"]}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "testcase": ["3 2 1", "3 1 2", "4 2 2", "4 3 1", "5 2 3", "5 3 2", "6 3 3", "6 4 2", "7 3 4", "7 4 3"]}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3.10^7) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.", "testcase": ["3 4 1\n*...\n....\n.*..", "3 4 2\n*...\n....\n.*..", "3 4 3\n*...\n....\n.*..", "4 4 1\n*...\n.*..\n....\n.*..", "4 4 2\n*...\n.*..\n....\n.*..", "4 4 3\n*...\n.*..\n....\n.*..", "5 5 1\n*...\n.*..\n....\n.*..\n.*..", "5 5 2\n*...\n.*..\n....\n.*..\n.*..", "5 5 3\n*...\n.*..\n....\n.*..\n.*..", "6 6 1\n*...\n.*..\n....\n.*..\n.*..\n.*.."]}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <=10^7).", "testcase": ["1 5", "2 3", "4 7", "5 6", "7 8", "3 4", "9 1", "10 2", "6 5", "8 9"]}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "testcase": ["+++++", "-----", "+-+-+-", "+-----", "+--+--", "+-+-+-", "++--+-", "++++--", "-+++--", "+-+--+"]}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <=10^9).", "testcase": ["2 0\n1\n2", "1 9\n123456789", "10 0\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "10 9\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789\n123456789", "5 0\n1\n2\n3\n4\n5", "5 9\n123456789\n123456789\n123456789\n123456789\n123456789", "3 4\n1234\n5678\n9012", "3 0\n1234\n5678\n9012", "6 6\n123456\n789101\n123456\n789101\n123456\n789101", "7 0\n1234567\n2345678\n3456789\n4567891\n5678912\n6789123\n7891234"]}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "testcase": ["2\n12..\n12..\n12..\n12..", "2\n1122\n1122\n1122\n1122", "3\n123\n123\n123\n123", "2\n12..\n12..\n12..\n12..", "4\n1234\n1234\n1234\n1234", "4\n1122\n1122\n1122\n1122", "4\n1111\n2222\n3333\n4444", "4\n111.\n111.\n111.\n111.", "5\n12345\n12345\n12345\n12345", "5\n11111\n22222\n33333\n44444\n55555"]}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <=10^6.\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "testcase": ["1 1 1 1 1 1", "10 10 10 10 9 10", "5 10 4 1 2 5", "100000 1 1 100000 100000 1", "1 100000 1 1 1 1", "1000000 1 1 1000000 1 100000", "1 1 1 1 9 9", "100 100 50 50 49 51", "4 20 1 4 1 3", "2 2 2 1 3 3"]}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "testcase": ["1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "10 11"]}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4.10^7).", "testcase": ["0", "1", "2", "3", "10", "100", "1000", "10000", "100000", "40000000"]}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "testcase": ["2", "10", "4", "5", "8", "3", "6", "7", "9"]}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <=10^6, containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "testcase": ["?02?00**?**?1**?**?**?**?*??***?***?*0**??*??????????**1*0**??*????????*??**????*****1***???0**0???1*0**1?1**?**???***?**?**?**0*0?????*0*0*1?0*0*0*?*1?**?***11**???", "?02?00**?**?1**?**?**?**?*??***?***?*0**??*??????????**1*0**??*????????*??**????*****1***???0**0???1*0**1?1**?**???***?**?**?**0*0?????*0*0*1?0*0*0*?*1?**?***11**???", "20200**0**011000**0**0**0*00**0*0*00*00*0*1?0*0*0*0*?*1?**?***11**???", "?2?200**2**211000**2**2**2*22**2*2*22*22*2*1?2*2*2*2*?*1?**?***11**???", "1111111111111111111111111111111111111111111111111111111111111111111111111111", "0000000000000000000000000000000000000000000000000000000000000000000000000000", "**0*0***?**?**?**???**?**????**?**?**?**0*0?????*0*0*0*?*1?**?***11**???", "221110001022100021221212202021022120121021212000100000210121212110202102", "?22110001022100021221212202021022120121021212000100000210121212110202102", "?22110001022100021221212202021022120121021212000100000210121212110202102"]}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "testcase": ["10\n2 4 6 8 10 12 14 16 18 20", "1\n4", "10\n1 1 1 1 1 1 1 1 1 1", "10\n10 20 30 40 50 60 70 80 90 100", "10\n5 10 15 20 25 30 35 40 45 50", "10\n99 98 97 96 95 94 93 92 91 90", "10\n100 99 98 97 96 95 94 93 92 91", "10\n1 2 3 4 5 6 7 8 9 10", "2\n10 20", "10\n1 2 3 4 5 6 7 8 91 100"]}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "testcase": ["1 2 10 3", "2 5 1 10", "100000 0 99999 100000", "50000 0 50000 0", "100000 -100000 100000 100000", "50000 -100000 50000 100000", "1 1 1 2", "2 2 1 2", "100000 100000 99999 100000", "50000 50000 49999 50000"]}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "testcase": ["MANISH", "HIREN", "ANILDESAI", "SAHIL", "NIKHIL", "VIVEK", "SHIVAM", "VISHALSINGH", "HARSHVARDHAN", "KARAN"]}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "testcase": ["1 1\n1", "1 1\n0", "1 1\n-1", "10 1\n1", "10 1\n-1000", "10 1\n1000", "10 5\n1 2 3 4 5 6 7 8 9 10", "10 5\n10 9 8 7 6 5 4 3 2 1", "10 5\n1000 1000 1000 1000 1000 1000 1000 1000 1000 1000", "10 5\n10 10 10 10 10 10 10 10 10 10"]}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "testcase": ["10 10\n1 2 3 4 5 6 7 8 9 10", "10 15\n1 2 3 4 5 6 7 8 9 10", "10 20\n1 2 3 4 5 6 7 8 9 10", "10 25\n1 2 3 4 5 6 7 8 9 10", "10 30\n1 2 3 4 5 6 7 8 9 10", "10 35\n1 2 3 4 5 6 7 8 9 10", "10 40\n1 2 3 4 5 6 7 8 9 10", "10 45\n1 2 3 4 5 6 7 8 9 10", "10 50\n1 2 3 4 5 6 7 8 9 10", "10 55\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <=10^5). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <=10^5).", "testcase": ["2 10\n2 3", "5 10\n2 5 3 1 9", "3 10\n5 6 10", "4 10\n7 2 8 3", "1 3\n8", "10 1\n8 9 1 8 7 7 1 8 6 3", "6 3\n7 10 6 3 10 9", "8 10\n1 5 4 1 6 3 10 3", "9 4\n3 1 1 3 8 8 9 8 9", "7 2\n10 3 5 10 6 1 8"]}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5.10^5) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <=10^6 --- the values of the array elements.", "testcase": ["1\n2", "2\n1 2", "3\n1 2 3", "4\n1 2 3 4", "5\n1 2 3 4 5", "6\n1 2 3 4 5 6", "7\n1 2 3 4 5 6 7", "8\n1 2 3 4 5 6 7 8", "9\n1 2 3 4 5 6 7 8 9", "10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "testcase": ["{a, b, c}", "{a}", "{a, b}", "{a, b, c, d, e}", "{a, b, c, d}", "{a, b, c, d, e, f}", "{a, b, c, d, e, f, g}", "{a, b, c, d, e, f, g, h}", "{a, b, c, d, e, f, g, h, i}", "{a, b, c, d, e, f, g, h, i, j}"]}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "testcase": ["1 0 0 0", "1 1 0 0", "1 2 2 2", "2 0 0 0", "2 1 2 2", "3 1 0 0", "3 1 1 1", "4 0 0 0", "4 1 2 2", "5 2 2 2"]}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "453_E. Little Pony and Lord Tirek", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 105) --- the number of ponies. Each of the next n lines contains three integers si, mi, ri (0 <= si <= mi <= 105; 0 <= ri <= 105), describing a pony. \n\nThe next line contains an integer m (1 <= m <= 105) --- the number of instructions. Each of the next m lines contains three integers ti, li, ri (0 <= ti <= 109; 1 <= li <= ri <= n), describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti (all ti are distinct).", "testcase": "{\"testcase\": [\n    \"1\\n0 0 0\\n1\\n0 1 1\",\n    \"2\\n0 0 0\\n1 0 0\\n1\\n0 1 2\",\n    \"3\\n0 0 0\\n1 0 0\\n2 0 0\\n1\\n0 1 3\",\n    \"1\\n100 100 100\\n1\\n0 1 1\",\n    \"2\\n100 100 100\\n1 100 100\\n1\\n0 1 2\",\n    \"3\\n100 100 100\\n1 100 100\\n2 100 100\\n1\\n0 1 3\",\n    \"1\\n100 0 100\\n1\\n0 1 1\",\n    \"2\\n100 0 100\\n1 1 100\\n1\\n0 1 2\",\n    \"3\\n100 0 100\\n1 1 100\\n2 1 100\\n1\\n0 1 3\",\n    \"1\\n0 100 100\\n1\\n0 1 1\",\n    \"2\\n0 100 100\\n1 0 1\\n1\\n0 1 2\",\n    \"3\\n0 100 100\\n1 0 1\\n2 0 1\\n1\\n0 1 3\",\n    \"1\\n10 10 10\\n1\\n1 10 10\",\n    \"2\\n10 10 10\\n1 10 10\\n1\\n1 10 10\",\n    \"3\\n10 10 10\\n1 10 10\\n2 10 10\\n1\\n1 10 10\",\n    \"1\\n0 10 100\\n1\\n0 0 1\",\n    \"2\\n0 10 100\\n1 0 1\\n1\\n0 0 2\",\n    \"3\\n0 10 100\\n1 0 1\\n2 0 1\\n1\\n0 0 3\",\n    \"1\\n100 0 10\\n1\\n100 100 100\",\n    \"2\\n100 0 10\\n1 100 100\\n1\\n100 100 100\",\n    \"3\\n100 0 10\\n1 100 100\\n2 100 100\\n1\\n100 100 100\",\n    \"1\\n0 100 0\\n1\\n0 0 1\",\n    \"2\\n0 100 0\\n1 0 1\\n1\\n0 0 2\",\n    \"3\\n0 100 0\\n1 0 1\\n2 0 1\\n1\\n0 0 3\",\n    \"1\\n100 100 0\\n1\\n100 100 100\",\n    \"2\\n100 100 0\\n1 100 100\\n1\\n100 100 100\",\n    \"3\\n100 100 0\\n1 100 100\\n2 100 100\\n1\\n100 100 100\",\n    \"10\\n0 0 0\\n1 0 0\\n2 0 0\\n3 0 0\\n4 0 0\\n5 0 0\\n6 0 0\\n7 0 0\\n8 0 0\\n9 0 0\\n1\\n0 1 10\",\n    \"10\\n100 100 100\\n1 100 100\\n2 100 100\\n3 100 100\\n4 100 100\\n5 100 100\\n6 100 100\\n7 100 100\\n8 100 100\\n9 100 100\\n1\\n0 1 10\",\n    \"10\\n100 0 0\\n1 100 100\\n2 100 100\\n3 100 100\\n4 100 100\\n5 100 100\\n6 100 100\\n7 100 100\\n8 100 100\\n9 100 100\\n1\\n0 1 10\",\n    \"10\\n0 100 100\\n1 0 0\\n2 0 0\\n3 0 0\\n4 0 0\\n5 0 0\\n6 0 0\\n7 0 0\\n8 0 0\\n9 0 0\\n1\\n0 1 10\"\n]}"}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "testcase": ["1\n0\n1", "2\n0\n1 2", "3\n0\n1 2 3", "3\n1\n2\n2", "3\n1\n2\n3", "3\n2\n2 3\n1 2", "4\n2\n2 3\n1 4", "4\n3\n2 3 4\n1 2 3", "5\n3\n2 3 4\n1 2 5", "5\n4\n2 3 4 5\n1 2 3 4"]}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "testcase": ["1 2", "10000 2", "5 10", "1 10", "10000 1", "2 10", "1 4", "1 5", "5 5", "1000 10"]}
{"name": "476_C. Dreamoon and Sums", "description": "Input\n\nThe single line of the input contains two integers a, b (1 <= a, b <= 107).", "testcase": "{\"testcase\": [\"[1, 1]\", \"[1000000, 1000000]\", \"[5, 10]\", \"[10, 5]\", \"[6, 9]\", \"[9, 6]\", \"[2, 7]\", \"[7, 2]\", \"[3, 8]\", \"[8, 3]\", \"[4, 9]\", \"[9, 4]\", \"[6, 7]\", \"[7, 6]\", \"[5, 8]\", \"[8, 5]\", \"[4, 7]\", \"[7, 4]\", \"[3, 6]\", \"[6, 3]\", \"[2, 5]\", \"[5, 2]\", \"[1, 4]\", \"[4, 1]\", \"[1, 10]\", \"[10, 1]\", \"[1000000, 1]\", \"[1, 1000000]\"]}"}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "testcase": ["1 2 3 4 5", "0 1 2 3 4", "100 0 0 0 0", "0 0 0 0 100", "100 100 100 100 100", "1 1 1 1 100", "1 1 1 100 1", "90 9 0 0 0", "0 60 40 0 0", "99 1 1 1 1"]}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2.10^9) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "testcase": ["0 0 0", "1 2 3", "1000000000 1000000000 1000000000", "100 1000000000 100", "1000000000 1000000000 0", "3 4 5", "7 1 2", "9 30 1", "1000000000 0 1000000000", "1 1 1"]}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <=10^9; 2 <= x < y <= 3.10^4) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "testcase": ["100000000 100000000 2 3", "100000000 100000000 2 29", "824635791 175364209 2 3", "100000000 300000000 19 41", "200000000 400000000 19 29", "500000000 200000000 31 2161", "100000000 600000000 47 4357", "300000000 200000000 29 3797", "287584571 574154289 17 61", "610088668 138911332 13 59"]}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <=10^9).", "testcase": ["1", "0", "-109", "109", "1234567890", "-9876543210", "-1234567890123456789", "9876543210123456789", "-18446744073709551616", "18446744073709551615"]}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "testcase": ["2 10\n5 7\n", "3 10\n2 5 8\n", "4 10\n2 5 7 9\n", "5 10\n1 3 6 8 10\n", "6 10\n0 1 3 6 8 10\n", "1 1000000000\n999999999\n", "2 1000000000\n499999999 999999999\n", "3 1000000000\n1 499999999 999999999\n", "4 1000000000\n1 250000000 750000000 999999999\n", "5 1000000000\n0 200000000 400000000 600000000 800000000\n"]}
{"name": "49_D. Game", "description": "Input\n\nThe first line contains number n (1 <= n <= 1000) which represents the stripe's length. The second line contains exactly n symbols --- the line's initial coloring. 0 corresponds to a white square, 1 corresponds to a black one.", "testcase": "{\"testcase}"}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 5", "3 7", "3 9", "5 5", "5 7", "5 9", "7 5", "7 7", "7 9", "9 9"]}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "testcase": ["2 3\nAAA\nBBB", "2 2\nAA\nBB", "2 4\nABCD\nEFGH", "3 3\nABC\nDEF\nGHI", "3 4\nABCD\nEFGH\nIJKL", "4 4\nABCD\nEFGH\nIJKL\nMNO", "4 5\nABCDE\nFGHIJ\nKLMNO\nPQRS", "5 5\nABCDE\nFGHIJ\nKLMNO\nPQRS\nUVWXY", "6 6\nABCDEF\nGHIJKLM\nNOPQRST\nUVWXYZ\nABCDEF\nGHIJKLM", "10 10\nABCDEFGHIJ\nKLMNOPQRST\nUVWXYZ1234\n567890\nABCDEFGHIJ\nKLMNOPQRST\nUVWXYZ1234\n567890\nABCDEFGHIJ\nKLMNOPQRST"]}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "testcase": ["1 1 1 1", "4 2 2 3", "10 10 10 10", "3 3 3 3", "4 3 2 1", "2 3 3 2", "20 15 7 12", "30 10 20 15", "22 15 12 8", "11 9 9 9"]}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "testcase": ["3\n*.*", "5\n..*..", "1\n*", "2\n..", "10\n.........*", "5\n*****", "6\n*...*.", "100\n*............*..*.............*..*......*..*..*.............*...*...*..*.*...*...**.*.", "1\n.", "7\n*******"]}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <=10^5).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <=10^6 for i-th query.", "testcase": ["1 1 1\n1 1 1", "100000 100000 1\n1 1 1", "1 100000 1\n1 1 1", "1000000000 1000000000 1\n1 1 1", "100000 100000 100000\n1 1 1", "10000 10000 10000\n1 1 1", "1000 1000 1000\n1 1 1", "100 100 100\n1 1 1", "10 10 10\n1 1 1", "1 1 1\n1 1 1"]}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^6.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "100000"]}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <=10^9) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "testcase": ["1\n0 1", "2\n0 1\n1 7", "3\n0 1\n1 7\n3 11", "4\n0 1\n1 7\n3 11\n2 3", "5\n0 1\n1 7\n3 11\n2 3\n4 3", "6\n0 1\n1 7\n3 11\n2 3\n4 3\n6 5", "7\n0 1\n1 7\n3 11\n2 3\n4 3\n6 5\n5 9", "8\n0 1\n1 7\n3 11\n2 3\n4 3\n6 5\n5 9\n2 13", "9\n0 1\n1 7\n3 11\n2 3\n4 3\n6 5\n5 9\n2 13\n7 17", "10\n0 1\n1 7\n3 11\n2 3\n4 3\n6 5\n5 9\n2 13\n7 17\n6 17"]}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "testcase": ["HELLO", "ABC", "TOPSECRET", "ZYXWVUTSRQPONMLKJIHGFEDCBA", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "X", "Z", "A", "B", "C"]}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "testcase": ["1\n2", "1\n1", "2\n1 1", "2\n2 2", "2\n1 2", "3\n1 1 1", "3\n1 1 2", "3\n1 2 2", "3\n2 2 2", "2000\n2000 2000"]}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "testcase": ["abcde", "fghij", "klmno", "pqrst", "uvwxy", "zacef", "qabcd", "cdgfh", "zkoi", "ugryv"]}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "testcase": [""]}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "testcase": ["1 1\n1 1\n1 1", "1 1\n1 1\n2 2", "1 1\n1 1\n3 3", "1 1\n1 1\n4 4", "1 1\n1 1\n5 5", "1 1\n1 2\n1 1", "1 1\n1 2\n2 2", "1 1\n1 2\n3 3", "1 1\n1 2\n4 4", "1 1\n1 2\n5 5"]}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <=10^8, 2 <= hi <=10^8) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "testcase": ["1\n2 2", "2\n0 2\n1 3", "2\n1 2\n2 3", "2\n2 2\n3 2", "3\n-2 2\n1 3\n5 2", "4\n-2 2\n1 3\n5 2\n6 2", "7\n-5 3\n-3 2\n-1 2\n1 2\n2 3\n4 2\n6 3", "1\n0 999999999", "3\n1 2\n1 2\n1 3", "3\n-4 6\n-1 7\n0 7"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["1 1", "1 2", "2 1", "2 2", "999999999 999999999", "1000000000 999999999", "1000000000 1000000000", "4 4", "10 6", "10 10"]}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3.10^5, 0 <= l <= 3.10^5).", "testcase": ["1 1 1 0", "1 1 2 1", "1 1 3 2", "1 2 1 1", "1 2 2 2", "1 2 3 3", "2 1 1 0", "2 1 2 1", "2 1 3 2", "2 2 2 3"]}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "testcase": ["1\n5\n1\n1000000000\n314159265\n123456789\n987654321"]}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <=10^8) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "testcase": ["1 2 3", "2 3 4", "5 9 7", "10 6 8", "8 1 6", "1 1 1", "1 2 15", "100 100 100", "1000000000 1000000000 1000000000", "123456789 321654987 876543210"]}
{"name": "599_C. Day at the Beach", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains n integers hi (1 <= hi <= 109). The i-th of these integers corresponds to the height of the i-th castle.", "testcase": "{\"testcase\": [\n  \"7\\n1 2 3 4 5 6 7\",\n  \"16\\n3 2 4 4 1 3 2 5 2 3 5 3 2 5 4 2\",\n  \"24\\n1 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6\",\n  \"32\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8\",\n  \"40\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4\",\n  \"48\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4\",\n  \"56\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4 6 3 7 2 1 5\",\n  \"64\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4 6 3 7 2 1 5 7 8 6\",\n  \"72\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4 6 3 7 2 1 5 7 8 6 3 4 5\",\n  \"80\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4 6 3 7 2 1 5 7 8 6 3 4 5 8 6 3\",\n  \"88\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4 6 3 7 2 1 5 7 8 6 3 4 5 8 6 3 7 5 4\",\n  \"96\\n2 4 6 8 1 9 6 4 1 4 4 8 1 4 2 7 4 8 6 5 1 5 9 6 5 4 9 1 7 2 3 8 7 5 6 2 1 4 2 3 1 4 6 3 7 2 1 5 7 8 6 3 4 5 8 6 3 7 5 4 8 4 7\",\n  \"1\\n1000000000\",\n  \"3\\n1000000000 1000000000 1000000000\",\n  \"5\\n1 2 3 4 5\",\n  \"7\\n5 4 3 2 1 6 7\",\n  \"9\\n5 3 2 7 1 9 6 4 8\",\n  \"11\\n9 6 1 8 5 2 7 4 8 1 10\",\n  \"13\\n1 1 1 1 1 1 1 1 1 1 1 1 1\",\n  \"15\\n10 9 8 7 6 5 4 3 2 1 100 50 25 12 6\",\n  \"17\\n1 4 7 10 13 16 19 11 8 5 2 100 50 25 12 6 1\",\n  \"19\\n100 50 25 12 6 1 1 2 3 4 5 6 7 8 9 10 100 50 25\",\n  \"21\\n1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1\",\n  \"23\\n100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100\",\n  \"25\\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\",\n  \"27\\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000\",\n  \"29\\n1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 1000000000 1 100"}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.", "testcase": ["(((", ")))))", "(())()()", "(()(()))", "))(())()))))", "()()()()()()()", "(()()(()))", "))(()()))))(()())", "))(()()()()))(())", "(()()(()()(()()))())"]}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "testcase": [""]}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <=10^9) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "testcase": ["2\n10 20", "3\n100 200 300", "4\n1000 2000 3000 4000", "5\n10000 20000 30000 40000 50000", "6\n100000 200000 300000 400000 500000 600000", "7\n1000000 2000000 3000000 4000000 5000000 6000000 7000000", "8\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000", "9\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000", "10\n1000000000 2000000000 3000000000 4000000000 5000000000 6000000000 7000000000 8000000000 9000000000 1000000000", "26\n10000000000 20000000000 30000000000 40000000000 50000000000 60000000000 70000000000 80000000000 90000000000 10000000000 11000000000 12000000000 13000000000 14000000000 15000000000 16000000000 17000000000 18000000000 19000000000 20000000000 21000000000 22000000000 23000000000 24000000000 25000000000 26000000000"]}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <=10^18) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <=10^18, 1 <= c < b <=10^18) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "testcase": ["1000000000000000000 500 500 500", "1000000000000000000 1 2 1", "1000000000000000000 1 1000000000000000000 1", "1000000000000000000 1000000000000000000 1 1", "1000000000000000000 500 1000000000000000000 500", "1000000000000000000 1000000000000000000 1000000000000000000 1", "1000000000000000000 1000000000000000000 500 1", "1000000000000000000 1 500 500", "1000000000000000000 500 1 500", "1000000000000000000 1000000000000000000 500 500"]}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "testcase": ["0 0", "1 0", "0 1", "1 1", "2 1", "1 2", "2 2", "1 100", "100 1", "100000 100000"]}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "testcase": ["1 1 1", "1 2 2", "1 3 3", "1 4 4", "1 5 5", "2 1 1", "2 2 2", "2 3 3", "2 4 4", "2 5 5"]}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2.10^18) --- the power in which you need to raise number 5.", "testcase": ["2", "6", "10", "11", "15", "19", "25", "29", "50", "100"]}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "testcase": ["1 1 1", "1 1 2", "1 1 3", "1 1 4", "1 1 5", "1 1 6", "1 1 7", "1 1 8", "1 1 9", "1 1 10"]}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["2 0", "2 1", "3 1", "3 2", "4 2", "4 3", "5 3", "5 4", "6 4", "6 5"]}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "testcase": ["abc:def", "abcdefghijklmnopqrstuvwxyz", "a.bc.d", "87925", "xyz.", "A:BC", "0123", "123.", "sampletext.", "notepad"]}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "testcase": ["0 0 0 0 0 0", "1 1 1 1 1 1", "1000 1000 1000 1000 1000 1000", "0 1 2 3 4 5", "5 4 3 2 1 0", "100 200 300 400 500 600", "600 500 400 300 200 100", "333 333 333 333 333 333", "50 100 150 200 250 300", "300 250 200 150 100 50"]}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <=10^9) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "testcase": ["1 -3 5", "0 10 1", "-4 2 3", "1000000000 -1000000000 1000000000", "1 1 2", "0 -1000000000 1000000000", "1000000000 1000000000 2000000000", "1 0 0", "-1000000000 -2000000000 -3000000000", "1 -1000000000000000000 1000000000"]}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "testcase": ["1 2 3 4 5", "100 100 100 100 100", "1 1 1 1 1", "99 99 99 99 99", "1 2 3 99 100", "10 20 30 40 50", "75 25 50 25 75", "1 99 1 99 1", "50 50 50 50 50", "25 75 25 75 25"]}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <=10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.", "testcase": ["1", "2", "3", "4", "100", "1000", "10000", "1000000", "1000000000", "1000000000000000"]}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "testcase": ["1", "2", "10", "123456789", "987654321", "1000000000", "1234567890", "9876543210", "10000000000", "1111111111"]}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "testcase": ["2", "3\n1 2", "4\n1 2\n2 3\n3 4", "7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "4\n1 2\n2 3\n3 4", "5\n1 2\n2 3\n3 4\n4 5", "3\n1 2\n2 3", "2", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "4\n1 2\n2 3\n3 4", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10"]}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "testcase": ["1\n0", "1\n1", "1\n2", "1\n3", "2\n00", "2\n01", "2\n10", "2\n11", "2\n20", "2\n21"]}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "testcase": ["0 0 0 0", "1 1 1 1", "100000 0 0 100000", "1000000000 1000000000 1000000000 1000000000", "123456789 0 0 123456789", "1 2 3 4", "100 101 102 103", "1000 1001 1002 1003", "10000 10001 10002 10003", "100000 100001 100002 100003"]}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <=10^7, 1 <= x, y <=10^9) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "testcase": ["1 1 1", "2 1 1", "10 1 1", "1 999999999 1", "1 1 999999999", "1000000 1 1", "1000000 999999999 1", "1 1 999999999", "1000000 1 999999999", "1000000 999999999 999999999"]}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <=10^9, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <=10^9). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "testcase": ["2 3 1000000000 0 1\n0 1 0\n1 0 0\n0 1 1000000000", "3 3 1 2 0\n2 1 1\n1 0 1\n0 2 1\n", "3 3 1000000000 0 2\n0 1 0\n1 2 0\n2 0 1000000000\n", "1 0 1000000000 0 0\n", "5 5 45 0 1\n1 4 5\n0 3 5\n0 2 10\n2 1 5\n3 1 15\n", "5 5 45 0 1\n1 4 5\n0 3 5\n0 2 10\n2 1 5\n3 1 15\n", "5 5 45 0 1\n1 4 5\n0 3 5\n0 2 10\n2 1 5\n3 1 15\n", "6 6 10 0 5\n5 4 5\n0 4 3\n0 2 2\n4 2 1\n5 2 5\n5 1 1\n", "5 5 20 0 3\n0 2 10\n1 3 5\n1 2 15\n3 4 5\n3 2 20\n", "5 5 20 0 3\n0 2 10\n1 3 5\n1 2 15\n3 4 5\n3 2 20\n"]}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <=10^9) --- the number which Vasily has and the number he wants to have.", "testcase": ["1 2", "1 3", "1 4", "1 5", "1 6", "1 7", "1 8", "1 9", "1 10", "2 3"]}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <=10^9, 1 <= di <= 5.10^6), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "testcase": ["1\n20 200\n2\n100 150\n3\n200 300\n1\n2 2\n2\n3 5\n2\n4 8\n2\n1 1\n4\n2 3\n1\n2 3\n1\n2 2\n3\n2 10\n4\n2 5\n2\n1 2\n3\n25 100", "2\n10 5\n20 10\n1\n1 5\n2\n2 3", "1\n2 2", "3\n1 1\n2 3\n3 2\n2\n2 1\n1 1", "4\n1 1\n1 1\n1 1\n1 1\n2\n1 1\n1 1", "1\n100 100\n1\n100 1\n1\n100 100", "1\n1 2\n1\n1 1", "2\n1 1\n1 1\n2\n1 1\n2 1", "5\n1 1\n1 1\n1 1\n1 1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1\n1\n1 1", "1\n5 5\n2\n1 3\n2 1"]}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "testcase": ["ALGORITHM", "TRUFFLE", "LAMBDA", "FUCHSIA", "METRIC", "HYBRID", "POLYNOMIAL", "AROMA", "GERMINAL", "RHAPSODY"]}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "testcase": ["2", "4", "8", "16", "32", "64", "128", "256", "512", "1024"]}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <=10^9).", "testcase": ["0", "1", "10", "123", "1000000000", "987654321", "1234567890", "5432198765", "6543210987", "9876543210"]}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "testcase": ["1 1 1", "5 5 5", "1000 1000 1000", "1 2 3", "2 3 1", "5 3 2", "10 10 1", "100 10 1", "999 999 998", "998 997 996"]}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <=10^6.", "testcase": ["2 2", "100 1", "1000000 1000000", "100 10", "10 100", "2 1000000", "1000000 2", "5 5", "1 1", "10 1000000"]}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "testcase": ["1\n999999", "1\n1", "5\n1 2 3 4 5", "3\n3 1 2", "1\n0", "1\n1000000", "2\n1000000 999999", "10\n0 0 0 0 0 0 0 0 0 0", "10\n1 1 1 1 1 1 1 1 1 1", "10\n1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000 1000000"]}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <=10^9, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "testcase": ["1 1 1", "10 10 1", "1000000000 1000000000 1", "1000000000 1000000000 1000000000", "1 2 1", "10 10 5", "1000000000 1000000000 500000000", "1000000000 1000000000 999999999", "1 10 1", "10 100 10"]}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "testcase": ["3\n1 2 3", "4\n4 5 6 7", "5\n8 9 10 11 12", "6\n13 14 15 16 17 18", "7\n19 20 21 22 23 24 25", "8\n26 27 28 29 30 31 32 33", "9\n34 35 36 37 38 39 40 41 42", "10\n43 44 45 46 47 48 49 50 51 52", "5\n1 1 1 1 1", "10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000"]}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "testcase": ["4", "9999999999", "3141592653", "7654321", "9876543210", "1111111111", "2222222222", "3333333333", "4444444444", "5555555555"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 2", "1 3", "1 4", "1 5", "1 6", "1 7", "1 8", "1 9", "1 10", "3 7"]}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "testcase": ["2 1", "100000 20", "5 1", "2 2", "3 1", "10 6", "1000 1", "77777 5", "50000 10", "133 9"]}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "testcase": ["qweasdzxcvbn", "lkjhgfdsaqwe", "abcdefghijk", "xyz12345", "987654321", "1234567890", "qwertyuiop", "asdfghjkl", "zxcvbnm", "!!!!!!!wcx"]}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "10", "100", "1000", "10000", "5", "25", "50", "100000", "77777"]}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <=10^9).", "testcase": ["2 3", "2 4", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10", "5 5"]}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <=10^9, min(A, B) <= 12).", "testcase": ["1 1", "1 2", "1 3", "1 4", "1 5", "1 6", "1 7", "1 8", "1 9", "1 10"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["12 1 1 1 1", "6 1 1 1 1", "12 1 1 2 2", "6 1 1 2 2", "12 6 6 1 1", "6 6 6 1 1", "12 6 6 2 2", "6 6 6 2 2", "12 10 10 10 10", "6 10 10 10 10"]}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <=10^6 --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <=10^9).", "testcase": ["1\n0", "2\n0 0", "3\n0 0 0", "4\n0 0 0 0", "5\n0 0 0 0 0", "6\n0 0 0 0 0 0", "7\n0 0 0 0 0 0 0", "8\n0 0 0 0 0 0 0 0", "9\n0 0 0 0 0 0 0 0 0", "10\n0 0 0 0 0 0 0 0 0 0"]}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <=10^9, 0 <= k <= n).", "testcase": ["1 1", "3 0", "2 2", "3 1", "10 3", "5 4", "1000000000 1000000000", "3 3", "1234567890 123456", "1 0"]}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <=10^9, 1 <= k <=10^4) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "testcase": ["0 0 0 0", "100000 100000 50000 1", "100000 100000 100000 1", "100000 100000 99999 1", "100000 100000 50001 1", "100000 100000 99999 2", "100000 100000 100000 2", "100000 100000 50000 3", "100000 100000 99999 3", "100000 100000 100000 3"]}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <=10^5, 1 <= S <=10^5), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <=10^5, 1 <= ai <=10^5, 1 <= bi <=10^5), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "testcase": ["1 1\n2\n1 20 30", "2 2\n3\n1 20 30\n2 10 40", "3 2\n2\n1 20 30\n2 10 40\n3 20 10", "1 1\n1\n100000 1 1", "2 2\n2\n100000 1 1\n100000 1 1", "10 1\n1\n100000 1 1", "100 1\n1\n100000 1 1", "1000 1\n1\n100000 1 1", "2 5\n1 1 1\n2 2 3", "5 5\n1 1 1\n2 2 3\n3 3 5\n4 4 2\n5 5 1"]}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <=10^6.", "testcase": ["1 2", "3 4", "5 6", "7 8", "9 10", "11 12", "13 14", "15 16", "17 18", "19 20"]}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <=10^5).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2.10^5) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2.10^5) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "testcase": ["1\n1", "2\n2 1", "2\n1 1", "3\n3 2 1", "3\n1 2 3", "3\n1 1 2", "3\n2 1 2", "10\n1 2 3 4 5 6 7 8 9 10", "10\n3 1 2 3 4 5 6 7 2 7", "10\n10 1 2 3 4 5 6 2 7 8"]}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "testcase": ["1\n1", "1\n2", "1\n3", "5\n1\n2\n3\n1\n3", "6\n1\n1\n2\n2\n3\n3", "100\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1\n...", "2\n1\n1", "1\n3\n3\n2", "9\n1\n2\n3\n1\n2\n3\n1\n2\n3", "2\n1\n2"]}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "testcase": ["10", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "2 2", "3 2", "4 2", "5 2", "6 2", "7 2", "8 2", "9 2", "10 2"]}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "testcase": ["1\n0 0 1", "1\n1 2 3", "2\n0 0 1\n0 1 1", "2\n0 0 1\n1 0 1", "2\n0 0 1\n0 3 1", "2\n0 0 1\n2 5 1", "2\n0 0 2\n0 0 3", "2\n0 0 2\n0 0 5", "3\n0 0 1\n1 0 1\n0 1 1", "3\n0 0 1\n-1 2 3\n-1 0 3"]}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "10 34", "1000000000000000000 10", "1000000000000000000 100", "1000000000000000000 1000", "1000000000000000000 2000", "999999999999999999 2000", "1 2000", "10 1999", "1000000000000000001 1000"]}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "testcase": ["1\n0", "2\n0 0", "2\n0 1", "3\n0 1 0", "3\n0 1 1", "3\n1 0 0", "3\n1 1 0", "3\n1 1 1", "10\n0 0 0 0 0 0 0 0 0 0", "10\n0 1 2 3 4 5 6 7 8 9"]}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "testcase": ["0 0 0", "0 0 1", "0 1 0", "0 1 1", "1 0 0", "1 0 1", "1 1 0", "1 1 1", "100 100 100", "10 20 30"]}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <=10^12), the number of vertices in the graph.", "testcase": ["2", "3", "128", "1023", "123456789", "9876543210", "9223372036854775807", "1000000000000", "123456789123456789", "1000000000000000000"]}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "testcase": ["2 2", "1 1000000000", "999999999 1", "9987 12345", "2 8", "7 69", "666 444", "8 6", "9 1000000000", "847629 634816"]}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "testcase": ["1", "5", "10", "50", "100", "500", "1000", "4", "9", "49"]}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "testcase": ["1 1\n5", "2 2\n3 3", "2 1\n3 2", "3 2\n1 3 2", "3 1\n3 2 1", "4 3\n1 2 3 4", "4 2\n3 2 1 4", "5 1\n5 4 3 2 1", "5 2\n4 3 2 5 1", "5 3\n1 1 1 1 1"]}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "testcase": ["ROYG", "BVORG", "RGBYV", "RGYOV", "ROYVB", "GOYBR", "VYORB", "GVBOR", "BYOVG", "RYOGB"]}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "1 2", "2 1", "3 1", "1 3"]}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <=10^6.", "testcase": ["2\n5\n5", "3\n1\n10\n10", "4\n1\n10\n1\n10", "5\n1\n2\n3\n4\n5", "6\n1\n2\n3\n4\n5\n6", "7\n1\n2\n3\n4\n5\n6\n7", "8\n1\n2\n3\n4\n5\n6\n7\n8", "9\n1\n2\n3\n4\n5\n6\n7\n8\n9", "10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10"]}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "testcase": ["ba\naba", "aba\nba", "aaa\naaa", "atcoder\natcoder", "kjhgfds\nwertasdf", "zzzz\nzzzz", "abcd\nabcd", "dcba\nabdc", "aaaaaaaaaaa\naaaaaaaaaa", "hello\nhello"]}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "testcase": ["1\n1", "2\n1 2", "3\n1 2 3", "4\n1 2 3 4", "5\n1 2 3 4 5", "6\n1 2 3 4 5 6", "7\n1 2 3 4 5 6 7", "8\n1 2 3 4 5 6 7 8", "9\n1 2 3 4 5 6 7 8 9", "10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "testcase": ["5\n1 2 3 4 5", "4\n1 2 3 4", "6\n1 2 3 4 5 6", "7\n1 2 3 4 5 6 7", "8\n1 2 3 4 5 6 7 8", "9\n1 2 3 4 5 6 7 8 9", "10\n1 2 3 4 5 6 7 8 9 10", "1\n1", "2\n1 2", "3\n1 2 3"]}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n <= 20\n* q <= 200\n* 1 <= elements in A <= 2000\n* 1 <= Mi <= 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "testcase": ["1\n1\n1\n1", "2\n1 2\n1\n1", "2\n1 2\n2\n1 2", "3\n1 2 3\n1\n1", "3\n4 0 3\n1\n1", "5\n1 2 3 4 5\n1\n2", "5\n1 2 3 4 5\n2\n2 3", "5\n1 2 3 4 5\n2\n2 5", "5\n1 2 3 4 5\n2\n1 5", "10\n1 2 3 4 5 1 2 3 4 5\n2\n1 10"]}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "testcase": ["1 1\n1 1 1", "2 4\n6 2 1\n3 1 2", "3 6\n3 1 2\n1 3 2\n2 2 1", "1 5\n5 1 5", "2 10\n10 1 1\n2 9 2", "3 10\n5 2 1\n3 5 2\n2 3 1", "4 10\n5 2 1\n7 1 4\n9 3 2\n1 5 3", "5 15\n3 5 1\n7 2 5\n2 9 4\n6 6 2\n1 7 3", "3 1\n1 1 100", "2 100\n1 99 1\n1 1 1"]}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 <= S <= 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "testcase": ["0", "1", "10", "100", "1000", "10000", "43200", "86399", "86400", "-1"]}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "testcase": ["I will give you the specification of a problem.", "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "I will give you the specification of a problem.\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines."]}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 <= X <= 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["-40", "0", "25", "-2", "40", "34", "1", "15", "-30", "-34"]}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 <= X <= 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["400", "500", "600", "700", "800", "900", "1000", "1500", "1999", "750"]}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 <= N <= 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10", "100", "1000", "10000", "2", "5", "1001", "4999", "7777"]}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 <= K <= N <= 1000\n* 1 <= p_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "testcase": ["5 2\n1 2 3 4 5", "5 2\n10 10 10 10 10", "5 3\n900 100 100 100 100", "5 2\n1 1000 3 4 5", "5 3\n900 100 900 100 100", "5 1\n1 1000 3 4 5", "5 5\n30 30 30 30 30", "5 4\n100 100 100 100 900", "5 3\n900 100 900 900 900", "5 1\n1000 1 1 1 1"]}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10", "100", "11", "123", "145", "199", "200", "255", "999"]}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 <= N, M <= 1000\n* A_i < B_i\\ (1 <= i <= N)\n* E_j < F_j\\ (1 <= j <= M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "testcase": ["1 1\n0 10 1\n0 0 10", "2 2\n0 10 1\n0 10 1\n0 0 10\n0 0 10", "1 1\n0 10 1\n0 10 10", "2 1\n0 10 1\n0 0 10", "2 2\n-5 0 1\n0 5 1\n-5 5 5\n-5 5 5", "3 1\n1 10 1\n1 0 1\n0 10 1", "1 1\n1 2 1\n1 0 2", "1 1\n-2 2 1\n-2 0 2", "2 2\n-2 2 1\n-2 0 2\n0 0 1\n0 0 2", "2 1\n1 3 2\n0 0 1"]}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 1000\n* 1 <= K <= 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "testcase": ["3\n1 2", "5\n1 5", "1\n999 1000", "1\n1000 1", "1000\n1 1000", "1\n1 666", "1000\n1 100", "1000\n2 1000", "1\n5 5", "1000\n2 999"]}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 <= A <= 10^{6}\n* 1 <= B <= 10^{12}\n* 1 <= N <= 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "testcase": ["1 1 1", "1000000 1 1", "1 1000000000000 1", "1000000 1000000000000 1", "1000000000000 1 1", "1 1000000000000 1000000000000", "1000000000000 1000000000000 1", "1000000 1000000000000 1000000000000", "1000000000000 1000000000000 1000000000000", "1000000 1000000000000 1000000000000"]}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* 1 <= K <= N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "testcase": ["1 1", "1 2", "2 1", "2 2", "2 3", "100000 1", "100000 100000", "100000 100001", "200000 100000", "200000 200001"]}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 <= M <= N <= 100\n* 1 <= A_i <= 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "testcase": ["5 3\n1 2 3 4 5", "10 4\n1 2 3 4 5 6 7 8 9 10", "15 5\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "20 6\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20", "25 7\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25", "30 8\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30", "35 9\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35", "40 10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40", "45 11\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45", "50 12\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50"]}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 <= X <= 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "1", "1000000000", "999999999", "555555555", "123456789", "987654321", "100000000", "200000000", "300000000"]}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "testcase": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 <= K <= 100\n* 1 <= X <= 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "testcase": ["1 50000", "10 10", "73 54345", "3 3000", "7 50000", "1 10000", "100 100", "99 99999", "1 100000", "90 45678"]}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 <= X <= 10^6\n* 1 <= Y <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 1", "1000000 1", "1 1000000", "500000 500000", "200000 400000", "600000 800000", "900000 100000", "100000 900000", "800000 600000", "400000 200000"]}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 <= |S| <= 100\n* S consists of lowercase English letters.\n* 1 <= K <= 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "testcase": ["abcd\n2", "abc\n3", "ghi\n5", "nopqr\n1", "abcdefg\n6", "f\n1", "abc\n2", "defg\n7", "abcdefghij\n3", "a\n10"]}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= K <= 500\n* 1 <= h_i <= 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "testcase": ["6 3\n1 2 3 4 5 6", "5 2\n1 2 3 4 5", "1 1\n1", "10 3\n1 1 1 1 1 1 1 1 1 1", "3 1\n1 1 1", "2 5\n1 2", "10 1\n1 1 1 1 1 1 1 1 1 1", "10 2\n1 2 3 4 5 6 7 8 9 10", "1 3\n1", "7 3\n10 20 30 40 50 60 70"]}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 <= N <= 100\n* -1 \\ 000 \\ 000 <= x_i <= 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 <= y_i <= 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "testcase": ["5\n0 0\n1 1\n-1 -1\n100 100\n-100 -100", "3\n1 1\n1 1\n1 1", "10\n1000000 1000000\n-1000000 -1000000\n0 0\n500 700\n-500 -700\n700 500\n-700 -500\n700 -500\n-700 500\n0 0", "2\n-1000000 1000000\n1000000 -1000000", "1\n0 0", "100\n500000 500000\n-500000 -500000\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "50\n1 1\n-1 -1\n0 0\n10 10\n-10 -10\n100 100\n-100 -100\n1000 1000\n-1000 -1000\n10000 10000\n-10000 -10000\n100000 100000\n-100000 -100000\n1000000 1000000\n-1000000 -1000000", "100\n0 100000\n100000 200000\n200000 300000\n300000 400000\n400000 500000\n500000 600000\n600000 700000\n700000 800000\n800000 900000\n900000 1000000", "2\n1 1\n1 1", "10\n0 0\n-1 -1\n100 100\n-100 -100\n1 1\n-1 -1\n1 1\n-1 -1\n1 1"]}
{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 <= N <= 2 * 10^5\n* 1 <= Q <= 2 * 10^5\n* 1 <= a_i < b_i <= N\n* 1 <= p_j <= N\n* 1 <= x_j <= 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "testcase": ["2 2\n1 2\n1 1\n1 1", "5 3\n1 3\n2 4\n4 5\n3 2\n2 1\n5 2", "8 10\n1 3\n4 5\n6 7\n3 8\n4 5\n6 7\n8 5\n1 5\n6 2\n6 1\n3 2\n1 1\n7 9\n8 5\n2 1", "3 3\n1 2\n2 3\n1 1\n3 2\n2 3\n1 1", "10 10\n1 3\n4 5\n6 7\n3 8\n9 10\n4 5\n6 7\n8 5\n1 5\n10 2\n10 3\n2 1\n1 1\n1 9\n7 6\n8 3\n6 1\n6 3", "4 4\n1 2\n2 3\n3 4\n2 1\n4 2\n1 3\n2 2\n2 1", "9 9\n1 3\n4 6\n2 7\n5 9\n3 8\n4 6\n2 7\n5 9\n4 6\n2 3\n3 7\n1 5\n7 8\n4 6\n6 9\n1 4\n2 7\n3 9", "10 10\n1 6\n3 4\n5 9\n6 9\n7 8\n6 9\n3 4\n3 5\n1 6\n2 8\n8 9\n7 3\n5 2\n7 1\n9 8\n6 3\n2 1\n1 10", "4 4\n1 2\n2 3\n3 4\n2 1\n4 2\n1 3\n2 2\n2 1", "5 5\n1 2\n2 3\n3 4\n4 5\n2 1\n4 2\n1 3\n2 2\n2 1"]}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= H_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "testcase": ["10\n1 2 3 4 5 6 7 8 9 10", "10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "10\n1 1 1 1 1 1 1 1 1 1", "10\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000", "1\n1", "1\n1000000000", "1\n1000", "100000\n1 2 3 4 5 ... 100000", "10000\n1 2 3 4 5 6 ... 10000", "100000\n1000000000 1000000000 1000000000 ... 1000000000"]}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "testcase": ["3\n1\n2\n3", "4\n0\n1\n2\n3", "5\n1000000000\n1000000000\n1000000000\n1000000000\n1000000000", "6\n1000000000\n0\n1000000000\n0\n1000000000\n0", "7\n1\n0\n1\n0\n1\n0\n1", "8\n1000000000\n0\n1\n0\n1000000000\n0\n1\n0", "9\n1\n2\n3\n4\n5\n6\n7\n8\n9", "10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9"]}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= A_i,B_i <= N (1<= i<= M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "testcase": ["6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "3 2\n1 2\n2 3", "10 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1", "5 4\n1 2\n2 3\n3 4\n4 5", "2 1\n1 2", "10 9\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "4 3\n1 2\n2 3\n3 4", "1 0", "6 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7"]}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 <= N, M <= 2 * 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 <= S_i, T_i <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "testcase": ["5 5\n1 2 3 4 5\n1 2 3 4 5", "10 5\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5", "4 2\n1 2 3 4\n1 2", "4 5\n1 2 3 4\n1 2 3 4 5", "10 10\n1 2 3 4 5 6 7 8 9 10\n1 2 3 4 5 6 7 8 9 10", "1 1\n1\n1", "2 1\n1 2\n1", "3 2\n1 2 3\n2 3", "4 3\n1 2 3 4\n2 3 4", "5 4\n1 2 3 4 5\n2 3 4 5"]}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= M <= N-1\n* 1 <= a_1 < a_2 < ... < a_M <= N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "testcase": ["3 2\n1\n2", "5 3\n1\n2\n3", "10 4\n1\n3\n5\n8", "1 0\n", "100000 99999\n1\n2\n3\n4\n5\n6\n7\n8\n9", "5 2\n1\n4", "8 7\n1\n2\n3\n4\n5\n6\n7", "11 7\n1\n3\n5\n6\n8\n9\n10", "10000 5\n1\n1\n1\n1\n1", "20 10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10"]}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 50\n* 1 <= K <= 100\n* -10^7 <= V_i <= 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "testcase": ["3 5\n-10000000 -9999999 5000000", "1 1\n0", "10 15\n10000000 9999999 8888888 7777777 6666666 5555555 4444444 3333333 2222222 1111111", "50 100\n-5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000", "5 50\n-1 -2 -3 -4 -5", "4 4\n10000000 10000000 10000000 10000000", "7 10\n-10000000 0 10000000 -9999999 9999999 -8888888 8888888", "20 50\n1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 7 -7 8 -8 9 -9 10 -10", "30 80\n500 1000 1500 -2000 -2500 3000 3500 4000 -4500 5000 -5500 6000 -6500 7000 -7500 8000 -8500 9000 -9500 10000 -10500 11000 -11500 12000 -12500 13000 -13500 14000 -14500 15000", "15 20\n-7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000"]}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "testcase": ["1 1 1 1 1", "123 123 123 123 123", "67 89 11 33 55", "42 12 32 43 13", "99 59 27 13 84", "61 22 84 84 63", "4 14 14 4 14", "73 25 23 34 1", "5 25 72 2 31", "21 75 92 7 81"]}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A, B, C <= 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "testcase": ["5 5 5", "11 29 61", "100 100 100", "1 2 3", "1 99 1", "99 1 1", "50 50 50", "77 87 97", "29 89 63", "42 76 58"]}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 1", "2 2", "3 3", "4 4", "5 5", "6 6", "7 7", "8 8", "9 9", "10 10"]}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* -10^5 <= X_i <= 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "testcase": ["2 1\n1", "4 2\n1 3", "6 3\n-1 0 1", "8 4\n-2 -1 0 1", "10 5\n-3 -2 -1 0 1", "2 2\n-5 -5", "4 3\n-5 -5 -5", "6 4\n-5 -5 -5 -5", "8 5\n-5 -5 -5 -5 -5", "10 6\n-5 -5 -5 -5 -5 -5"]}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 <= N <= 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "testcase": ["1\n0.34", "3\n0.25 0.33 0.50", "5\n0.33 0.25 0.66 0.33 0.50", "7\n0.26 0.44 0.22 0.37 0.47 0.33 0.25", "9\n0.19 0.32 0.43 0.87 0.11 0.22 0.39 0.47 0.21", "11\n0.50 0.28 0.71 0.16 0.53 0.40 0.27 0.66 0.84 0.74 0.33", "13\n0.96 0.38 0.68 0.85 0.79 0.31 0.73 0.64 0.49 0.11 0.23 0.76 0.99", "15\n0.99 0.33 0.08 0.46 0.47 0.93 0.20 0.34 0.76 0.63 0.39 0.48 0.98 0.12 0.14", "17\n0.25 0.33 0.25 0.68 0.31 0.69 0.47 0.41 0.14 0.94 0.67 0.54 0.97 0.76 0.96 0.09 0.42", "19\n0.83 0.98 0.46 0.90 0.08 0.24 0.95 0.43 0.90 0.03 0.14 0.33 0.48 0.50 0.70 0.38 0.79 0.06 0.44"]}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 <= X,Y <= 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "1 4", "1 6", "1 8", "1 10", "2 4", "2 6", "2 8", "2 10", "4 8"]}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= P_i <= N\n* 1 <= Y_i <= 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "testcase": [""]}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 <= R <= 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "testcase": ["0", "1", "100", "200", "4208", "1234", "42", "4444", "10000", "234234"]}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 <= |S| <= 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "testcase": [""]}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 <= N <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10", "100000", "123456789", "1000000000", "500000000", "999999999", "1234567890", "987654321", "1098765432"]}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["1\n1", "2\n2 1", "3\n2 2 2", "4\n2 2 3 3", "5\n2 2 3 3 4", "6\n2 2 3 3 4 4", "7\n2 2 3 3 4 4 5", "8\n2 2 3 3 4 4 5 5", "9\n2 2 3 3 4 4 5 5 6", "10\n2 2 3 3 4 4 5 5 6 6"]}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "testcase": ["0 1", "0 100", "0 50", "1 1", "1 100", "1 50", "2 1", "2 100", "2 50", "2 1"]}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 <= N <= 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "3", "4", "5", "10", "1998", "765", "151", "987"]}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 <= A,B <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 1", "-1 -1", "1000 -1000", "0 0", "1000 1000", "-1000 1000", "0 -1000", "0 1000", "1000 0", "-1000 0"]}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 <= N <= 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "testcase": ["2\nab", "5\nhello", "10\nabcdefghij", "8\nrainbowx", "6\nplanet", "4\nmood", "7\nfriends", "3\nsky", "9\nchocolate", "100\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx"]}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "testcase": ["1\n1", "2\n1\n2", "3\n1\n2\n3", "10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "100000\n1\n2\n3\n4\n5\n6\n7\n8\n9\n100000", "100000\n100000\n99999\n99998\n99997\n99996\n99995\n99994\n99993\n99992", "100000\n99999\n1\n2\n3\n4\n5\n6\n7\n8", "100000\n99999\n1\n2\n3\n4\n5\n6\n7\n99998", "100000\n1\n2\n3\n4\n5\n6\n7\n8\n9\n100000", "100000\n1\n2\n3\n4\n5\n6\n7\n8\n99999\n100000"]}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "testcase": ["ooo", "oxx", "xoo", "xoo", "oxx", "ooo", "oxx", "xoo", "oxo", "ooo"]}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 <= N <= 100\n* 1 <= m_i <= 1000\n* m_1 + m_2 + ... + m_N <= X <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "testcase": ["2 100\n10\n10", "4 200\n50\n40\n50\n60", "10 500\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100", "3 300\n200\n50\n50", "6 500\n50\n20\n20\n20\n20\n20", "5 400\n10\n20\n30\n40\n50", "8 600\n10\n20\n30\n40\n50\n60\n70\n80", "7 500\n10\n20\n30\n40\n50\n60\n70", "9 700\n10\n20\n30\n40\n50\n60\n70\n80\n90", "10 800\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"]}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 <= i <= N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "testcase": ["4\n2 3 1 4", "4\n3 4 1 2", "4\n4 3 1 2", "4\n3 4 2 1", "4\n4 3 2 1", "4\n3 4 4 2", "4\n4 3 2 3", "4\n3 4 2 4", "4\n4 3 4 2", "4\n3 4 4 3"]}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= d_i <= 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "testcase": ["1\n1", "2\n1\n1", "3\n1\n1\n1", "4\n1\n1\n1\n1", "5\n2\n2\n2\n2\n2", "6\n5\n5\n5\n5\n5\n5", "7\n100\n100\n100\n100\n100\n100\n100", "8\n1\n2\n3\n4\n5\n6\n7\n8", "9\n11\n22\n33\n44\n55\n66\n77\n88\n99", "10\n1\n20\n30\n40\n50\n60\n70\n80\n90\n100"]}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= H <= 10^9\n* 1 <= a_i <= b_i <= 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "testcase": ["5 10\n1 4\n2 7\n3 1\n4 8\n5 3", "1 1\n1 1", "10 1000000000\n1 2\n3 4\n5 6\n7 8\n9 10", "100000 1000000000\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "100000 1000000000\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60\n7 70\n8 80\n9 90\n10 100", "100000 1000000000\n1 10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100", "100000 1000000000\n1 100000000\n100000001 200000000\n200000001 300000000\n300000001 400000000\n400000001 500000000\n500000001 600000000\n600000001 700000000\n700000001 800000000\n800000001 900000000\n900000001 1000000000", "1 1000000000\n1000000000 1000000000", "10 1\n1000000000 1000000000", "10 1000000000\n1 1000000000"]}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "testcase": [""]}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 <= N,M <= 1000\n* 0 <= K <= NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "testcase": ["10 10 0", "1 1 100", "1000 1000 0", "999 999 1000", "1 1 1", "1 1000 1000", "1000 1 1000", "999 1000 1000", "1000 999 1000", "42 42 42"]}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 <= n <= 50\n* 1 <= |S_i| <= 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "testcase": ["1\na", "2\nabc\nxyz", "3\nsannnnnyya\nsannnnnnn\nsannnnynn", "4\naaaaaa\nbbbb\nwwc\nzde", "5\nzz\nzzz\nzzzz\nzzzzz", "6\nabcde\nbcd\ncde\ndef\nef", "7\nzyx\nzyxw\nzyxwv\nzyxuv\nzyxvt", "8\nzyxwvutsr\nzyxwvutsr\nzyxwvutsrq\nzyxwvutsrp\nzyxwvutsro", "9\naaaaa\naaaac\naaaad\naaaae\naaaaf\naaaag\naaaah\naaaai\naaaaj\naaaak", "10\naaaaaaaaaaaaa\naaaaaaaaaaaab\naaaaaaaaaaaac\naaaaaaaaaaaad\naaaaaaaaaaaa\naaaaaaaaaaaaf\naaaaaaaaaaaag\naaaaaaaaaaaah\naaaaaaaaaaaai\naaaaaaaaaaaaj"]}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9(1 <= i <= N)\n* 1 <= B_i <= 10^9(1 <= i <= N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "testcase": ["5\n7 4\n2 4\n6 5\n1 7\n3 2\n4 1", "10\n5 2\n3 6\n1 4\n3 7\n2 8\n9 9\n4 5\n8 1\n6 3\n7 2", "1\n1 1", "2\n2 1\n1 2", "3\n1 2\n3 1\n2 3", "4\n1 2\n2 3\n3 1\n4 2", "5\n1 1\n2 2\n3 3\n4 4\n5 5", "6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "7\n1 2\n3 2\n4 3\n5 4\n6 5\n7 6", "8\n1 2\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7", "9\n1 2\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8", "10\n1 9\n2 8\n3 7\n4 6\n5 5\n6 4\n7 3\n8 2\n9 1\n10 1"]}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1<=|S|<=10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["z", "aaaaaaaaaa", "abcde", "yx", "abcdefghija", "qwert", "tzuzu", "a", "s", "qw"]}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "testcase": ["1 4 2\n1", "1 5 2\n1", "2 2 2\n1\n2", "2 2 2\n2\n1", "5 2 3\n1\n2\n3\n2\n1", "1000000000 1 1000000000\n2", "2 1 2\n1\n1", "3 1 2\n1\n2\n3", "1000000000 1 4\n1", "1 1000000000 1\n1"]}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1<=|s|<=10^5\n* All letters in s are lowercase English letters.\n* 1<=K<=10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "testcase": ["abcdefghijklmnopqrstuvwxyz", "1000000000", "abcde", "10", "aaaaa", "100000", "bcdefghijklmnopqrstuvwxyz", "1000000000000", "a", "1", "bcdefghijklmnopqrstuvwxyz", "10"]}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 <= | S | <= 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["N", "NWS", "ES", "ENS", "NNNE", "ENNNEESSS", "SSSNENENNE", "SSNNNEEEENNWWEEENSE", "SNENEENWWNESEENEENNNEESSNSNNEENEENNEEWNE", "NNNESNESSNESENEWENEENESSWNENENEESSESNNNESENEENENEENNENSNEEEEESEENESSWESENEENEENNESENESENNNEEENSESSESENESEENSEESSSSENSENEENEENTNENEDEESSSSEENSNNNESSEEENEENNEENNNEENNESSNESTSETNNNEANENEEENSNSNESNEENSNESENEENNNESESEESN"]}

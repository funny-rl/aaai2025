{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "testcase": ["abcdef", "hello", "a", "abcdefghijklmnopqrstuvwxyz", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "quickbrownfox", "test", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "ilovetocode", "thisisaverylongstringconsistingofexactlyonehundredlowercaselatinlettersabcdefghij"]}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "testcase": ["5 3\n1 2 3 4 5", "10 10\n1 1 1 1 1 1 1 1 1 1", "3 2\n1000000000 999999999 1000000000", "200000 10\n", " ", "  , ", " )0002(1", " ", "  20000 (1", " ) ", " ", "100 50\n50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 50 ", "6 1000000000\n5454 789789 654987987 321654987 123456789 987987", "1 1000000000\n999999999", "50 1000000\n1000000 900000 800000 700000 600000 500000 400000 300000 200000 100000 1000000 900000 800000 700000 600000 500000 400000 300000 200000 100000 1000000 900000 800000 700000 600000 500000 400000 300000 200000 100000 1000000 900000 800000 700000 600000 500000 400000 300000 200000 100000 1000000 900000 800000 700000 600000 500000 400000 300000 200000 100000", "15 100\n7 13 19 23 29 31 37 41 43 47 53 59 61 67 71", "8 1000\n1 1000 200 300 127 345 678 910"]}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 и y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <=10^8). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "testcase": ["1 2 3 4 5 6", "0 0 -100000000 100000000 108 -108", "-108 108 50 75 -56 -78", "99999999 -99999999 100 -50 -75 30", "0 108 108 108 -108 -108", "-10000000 20000000 30000000 -10000000 0 0", "-98765432 12345678 -87654321 21098765 34567890 -98765432", "100 100 100 100 100 100", "-100 -100 -200 -200 -300 -300", "1 -1 1 -1 1 -1"]}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "testcase": ["1 1\nW", "2 2\nWB\nBW", "3 4\nWWBB\nBWBW\nWWWW", "5 5\nBBBBB\nBWWBW\nWBWBW\nBWWW\nWWBBW", "10 10\nWWWWWWWWWW\nBBBBBBBBBB\nWWWWWWWWWW\nBBBBBBBBBB\nWWWWWWWWWW\nBBBBBBBBBB\nWWWWWWWWWW\nBBBBBBBBBB\nWWWWWWWWWW\nBBBBBBBBBB", "7 7\nBWBWBWB\nWBWBWBW\nBWBWBWB\nWBWBWBW\nBWBWBWB\nWBWBWBW\nBWBWBWB", "4 8\nWWBBWWBB\nBBWWBBWW\nWWBBWWBB\nBBWWBBWW", "8 8\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB", "5 3\nWWW\nBBW\nBWW\nWWW\nBWB", "6 2\nWB\nBW\nBW\nWB\nWB\nBW"]}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "testcase": ["1\n1 1 1", "2\n3 4 5\n6 7 8", "3\n1 1 2\n10 10 20\n100 100 200", "4\n100 200 300\n400 500 600\n700 800 900\n1000 1000 1000", "2\n123456789012345678 987654321098765432 192837465564738291\n111111111111111111 222222222222222222 333333333333333333", "1\n999999999999999999 888888888888888888 777777777777777777", "2\n10 20 30\n40 50 60", "3\n1000000000 1000000000 1000000000\n2000000000 2000000000 2000000000\n3000000000 3000000000 3000000000", "1\n1 10 100", "5\n987654321 123456789 111213141\n121314151 161718192 202122232\n242526272 282930313 323334353\n363738394 404142434 444546474\n484950515 525354555 565758595"]}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "testcase": ["1", "100", "5000", "999999", "123456789", "987654321", "500", "1000000000", "250", "34567890"]}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "testcase": ["1 0", "3 -100 0 100", "5 500000000 -1000000000 0 1000000000 123456789", "10 1 2 3 4 5 6 7 8 9 10", "7 0 0 0 0 0 0 0", "4 -999999999 0 999999999 -500000000", "2 -10 10", "6 987654321 -987654321 123456789 -123456789 0 1", "10 -10 -20 -30 -40 -50 -60 -70 -80 -90 -100", "8 555555555 -555555555 111111111 -111111111 222222222 -222222222 333333333 -333333333"]}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <=10^18, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.", "testcase": ["10 3 2\n1\n10", "100 25 3\n5\n50\n100", "1000 500 5\n500\n999\n100\n1\n1000", "1000000000000 0 2\n2\n999999999999", "50 1 1\n25", "10 10 10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "1000000000000000000 1000000000000000 10\n1000000000000\n99999999999999999\n500000000000000000\n1\n99999999999999999\n10\n20\n100\n100000000000000\n55555555555555", "7 5 4\n1\n5\n7\n3", "15 0 8\n1\n2\n3\n4\n5\n6\n7\n8", "100000 100000 1\n99999"]}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "testcase": ["1 1", "1000000000 1000000000", "500000000 500000000", "2 1000000000", "1000000000 2", "999999999 999999999", "123456789 987654321", "98765 43210", "1000000 1", "1 1000000"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["5 10 2 2 1 1", "3 8 5 1 2 3", "1 100 50 5 10 15", "20 35 20 3 5 2", "30 25 30 4 6 3", "100 1 50 2 4 5", "500 600 550 1 1 1", "1 1000 500 10 5 2", "10 1 5 3 3 3", "250 500 300 6 4 2"]}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "testcase": ["1\n5", "2\n23", "3\n789", "4\n4567", "5\n01234", "6\n987654", "7\n1234567", "8\n56789012", "9\n987654321", "10\n1234567890"]}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "testcase": ["2", "150", "1000", "2023", "54321", "999", "12345", "100000", "67890", "30000"]}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "testcase": ["1", "10", "100", "1000", "10000", "500000", "999999999", "1234567890", "9876543210", "10000000000"]}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "testcase": ["2", "10", "100", "9999", "1000000", "50000000", "1000000000", "1023456789", "2345678901", "10000000000"]}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "testcase": ["a", "z", "abc", "thequickbrownfox", "abcdefghijklmnopqrstuvwxyz", "aaaaabbbbbccccc", "abacabadabacaba", "xyxyxyxyxy", "abcdefghijklmnopqrst", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "testcase": ["2", "100", "999999999", "500000000", "123456789", "987654321", "555555555", "222222222", "800000000", "1000000000"]}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "testcase": ["1\na", "3\nabc", "5\nhello", "12\nzzzzzzzzzzzz", "10\nabcdefghij", "15\nopqrstuvwxyz", "8\nwxyzabcd", "6\nlmnopq", "2\nuv", "4\nqrst"]}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "testcase": ["5\n1 100 5\n50 500 100\n1000 2000 250\n10 20 15\n100000000 1000000000 1000000000", "3\n100 200 1\n500 600 300\n123456789 987654321 1500000", "4\n150 1500 10\n3000 9000 40\n1 1000000000 1\n999999999 1000000000 999", "7\n5 5 5\n10 20 10\n15 25 20\n33 77 8\n49 51 50\n30 30 29\n99 100 100", "2\n1 999999999 1000000000\n1000000 100000000 1000000", "1\n123456 654321 789", "6\n10 10 10\n20 21 19\n30 33 31\n40 44 40\n50 55 50\n60 66 62", "8\n100 500 300\n2000 3000 1500\n5000 10000 2500\n2500 3500 2200\n150 450 130\n90 180 70\n333 999 1\n777777 7777777 777777", "9\n10 1000 100\n500 1000 500\n100000 900000 4500\n5000 5001 100\n1 999999999 500000000\n1000000000 1000000000 1000000000\n123456 654321 10000\n345678 456789 12345\n987654321 987654321 987654320", "10\n1 10 1\n10 20 2\n20 30 3\n31 41 4\n42 49 5\n50 60 10\n61 65 5\n70 70 69\n80 90 10\n95 105 7"]}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "testcase": ["1", "2", "100", "9999", "1000000", "500000000", "1000000000", "1500000000", "1999999999", "2000000000"]}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <=10^5) --- the length of the sought string.", "testcase": ["1", "10", "50", "100", "500", "1000", "5000", "10000", "50000", "100000"]}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "testcase": ["1", "10", "100", "999", "1000", "123", "567", "888", "777", "654321"]}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "testcase": ["2 1\n1", "10 3\n1 0 0", "16 5\n15 14 13 12 11", "10 6\n9 8 7 6 5 4", "100 10\n99 99 99 99 99 99 99 99 99 99", "4 4\n3 2 1 0", "8 7\n7 7 7 7 7 7 7", "3 1\n2", "5 3\n4 0 1", "6 2\n5 5"]}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "testcase": ["100 200 300 150 250 350", "1 1 1 1 1 1", "50000 50000 50000 50000 50000 50000", "10000 20000 30000 15000 25000 35000", "100000 100000 100000 100000 100000 100000", "3 3 3 2 2 2", "12345 67890 11111 54321 98765 13579", "99999 99999 99999 88888 88888 88888", "100 200 300 10000 20000 30000", "70000 30000 90000 30000 70000 20000"]}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <=10^6 --- the board's vertical and horizontal sizes and the number of colors respectively.", "testcase": ["1 1 1", "1000 1000 1000000", "500 500 2", "999 1000 999999", "1 1000 100", "1000 1 1000000", "250 750 50", "600 800 999999", "100 200 500000", "123 456 789012"]}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["5 10\n1 2\n3 4\n2 1\n4 5\n5 3\n1 3\n2 5\n3 1\n5 4\n2 4", "3 5\n1 2\n2 3\n1 3\n3 1\n2 1", "4 7\n1 4\n2 3\n3 2\n4 1\n1 3\n3 4\n2 1", "6 12\n2 3\n3 4\n1 6\n5 1\n6 5\n4 2\n1 3\n3 5\n5 6\n2 4\n4 1\n6 2", "5 15\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n3 5\n5 2\n2 4\n4 1\n1 5\n5 3\n3 2\n2 1\n1 4", "7 18\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 4\n2 5\n3 6\n4 7\n5 1\n1 3\n6 2\n7 5\n1 6\n2 4\n3 7", "2 3\n1 2\n2 1\n1 2", "3 6\n1 3\n3 2\n2 1\n1 2\n2 3\n3 1", "8 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n2 5\n4 7\n6 1\n1 3\n3 6\n5 8\n7 2\n2 4\n4 1\n8 5\n6 2\n3 7", "4 8\n1 2\n2 3\n3 4\n4 1\n1 3\n3 2\n2 4\n4 3"]}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "testcase": ["2\nabc\ndef", "5\nhello\nworld\nthis\nis\na_test", "4\napple\nbanana\ncherry\ndate", "3\nxyz\nmnop\nqrst", "6\nprogramming\nis\nfun\nwith\npython\nand\njava", "7\none\ntwo\nthree\nfour\nfive\nsix\nseven", "10\ninit\ncommit\nbranch\nmerge\nconflict\nresolve\npush\npull\nfetch\nrebase", "9\naaa\nbbb\nccc\nddd\neee\nfff\nggg\nhhh\niii", "8\nsun\nmoon\nstar\nplanet\ngalaxy\nuniverse\nastronaut\ncosmos", "3\nlongest\nstring\nhere"]}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "testcase": ["1\n1", "2\n1 2", "3\n3 3 3", "4\n1 2 3 4", "5\n5 5 5 5 5", "6\n1 1 1 1 1 1", "7\n7 6 5 4 3 2 1", "8\n8 7 6 5 4 3 2 1", "9\n1 2 2 3 3 3 4 4 4", "10\n10 9 8 7 6 5 4 3 2 1"]}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "testcase": ["1 1", "1 10", "10 10", "100 200", "5000 10000", "123456 789101", "1000000 100000000", "300000000 500000000", "1 500000000", "250000000 250000001"]}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "testcase": ["1\n0", "5\n1000000 500000 250000 125000 62500", "4\n999999 1 500000 777777", "10\n345 623 1 234 876 345 678 123 456 789", "2\n0 1000000", "6\n123456 654321 111222 333444 555666 777888", "3\n0 999999 1000000", "7\n987654 12345 67890 123456 789012 345678 901234", "8\n111111 222222 333333 444444 555555 666666 777777 888888", "2000\n"]}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "testcase": ["a", "abcde", "xyz", "lmnopq", "abcdefghij", "qwertyuiop", "abcdefghijklmnopqrstuvwxyz", "pneumonoultramicroscopicsilicovolcanoconiosis", "supercalifragilisticexpialidocious", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcde"]}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "testcase": ["1 +", "1 -", "2 ++", "2 --", "3 +-+", "3 -+-", "4 ++++", "4 ----", "5 ++-+-", "6 ---+-+"]}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "testcase": ["3\n0 0\n1 1\n2 2", "4\n100 -100\n-100 100\n0 0\n50 50", "5\n-5000 -5000\n5000 5000\n4000 -4000\n-3000 3000\n0 0", "6\n10 -10\n-10 10\n9 -9\n-9 9\n8 -8\n-8 8", "7\n-1000 1000\n1000 -1000\n0 1000\n1000 0\n-1000 0\n0 -1000\n500 500", "8\n123 456\n-123 -456\n789 -987\n-789 987\n111 222\n-111 -222\n333 -444\n-333 444", "9\n4 5\n5 4\n-4 -5\n-5 -4\n10 0\n0 10\n-10 0\n0 -10\n1 1", "10\n9999 9999\n-9999 -9999\n5000 5000\n-5000 -5000\n9999 -9999\n-9999 9999\n5000 -5000\n-5000 5000\n6666 7777\n7777 6666", "11\n1010 -1010\n-1010 1010\n2020 -2020\n-2020 2020\n3030 -3030\n-3030 3030\n4040 -4040\n-4040 4040\n5050 -5050\n-5050 5050\n6060 6060", "12\n321 654\n-321 -654\n987 -789\n-987 789\n1234 4321\n-1234 -4321\n5678 -8765\n-5678 8765\n1357 2468\n-1357 -2468\n3571 -2462\n-3571 2462"]}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "testcase": ["3\nalice\nbob\ncharlie", "1\ndave", "5\nmike\nmike\nsusan\nsusan\nalex", "4\njohn\ndoey\njack\njane", "2\ntim\nton", "6\nanna\nbella\ncara\ndiana\nella\nfiona", "10\nkevin\nlee\nliam\nnoah\noliver\nhenry\nlucas\nmason\nlevi\nrohan", "7\ngary\ngarry\ngabriel\ngina\ngill\ngillian\ngiorgio", "3\nron\nronny\nron", "8\nharry\nsally\nwendy\nyuri\nankit\nankita\nkarim\nfarah"]}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <=10^9, 1 <= mod <=10^7).", "testcase": ["0 0 1", "1000000000 1000000000 10000000", "1 1 1000000", "999999999 888888888 1234567", "500000000 500000000 9999999", "0 10 500000", "77 123 10000", "1000000000 0 1", "12345 67890 9876543", "214748364 214748364 2147483"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "10", "25", "50", "75", "100", "5", "20", "35", "90"]}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "testcase": ["0 0 1", "1 0 1000000000000000000", "0 1 1000000000000000000", "1000000000000000000 1000000000000000000 1", "50000000000000000 50000000000000000 888888888888888", "999999999999999 1000000000000000 100", "1000000000000000000 0 123456789012345678", "0 1000000000000000000 987654321098765432", "333333333333333333 666666666666666666 999999999999999999", "88888888888888888 77777777777777777 55555555555555555"]}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "testcase": ["1 1 1 1", "1000000000 1000000000 1000000000 1000000000", "500000000 500000000 500000000 500000000", "100000 1000000000 500000000 1", "999999999 1000000000 1 2", "1 1000000000 999999999 1000000000", "2 2 3 3", "5 10 15 20", "500000000 500000001 500000000 500000001", "1 10 100 1000"]}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "testcase": ["5 1 2 1 3 2 4 2 5", "6 1 2 2 3 3 4 4 5 4 6", "10 1 2 1 3 1 4 2 5 2 6 3 7 3 8 4 9 4 10", "4 1 2 2 3 2 4", "7 3 5 5 1 5 6 3 2 2 7 7 4", "2 1 2", "3 1 3 2 1", "8 1 2 1 3 2 4 4 5 5 6 6 7 6 8", "9 1 2 1 3 1 4 1 5 5 6 6 7 7 8 8 9", "10 1 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9 10"]}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "testcase": ["5 7 3 2", "10 10 5 5", "1 1 1 1", "100 100 10 10", "70 30 6 4", "50 60 7 9", "2 3 2 1", "99 98 10 9", "25 50 5 8", "10 20 4 3"]}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "testcase": ["30", "35", "40", "45", "50", "60", "70", "80", "90", "100"]}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "testcase": ["1 1 1", "10 10 10", "20 30 50", "100 1 100", "50 50 100", "1 100 99", "25 25 25", "80 90 100", "15 10 60", "33 33 33"]}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "testcase": ["3\n1000 2000 3000", "5\n150000 149999 149998 149997 149996", "10\n1 1 1 1 1 1 1 1 1 1", "4\n2 4 6 8", "7\n123 456 789 1011 1213 1415 1617", "1\n150000", "6\n99 22 37 48 15000 45678", "8\n33333 33333 33333 33333 33333 33333 33333 33333", "2\n12345 67890", "150000\n"]}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "testcase": ["0", "1", "10", "11", "101", "110", "111", "1001", "1010", "1111"]}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "testcase": ["2\n123 456 789\n0 1 1000000000", "3\n1000000 2000000 3000000\n999999999 123456789 987654321\n555555555 444444444 333333333", "1\n0 0 0", "4\n1 1 1\n10 10 10\n100 100 100\n1000 1000 1000", "5\n100 0 0\n0 100 0\n0 0 100\n100 100 0\n0 100 100", "3\n2147483647 2147483647 2147483647\n123456789 987654321 123456789\n999999999 1000000000 0", "1\n500000000 500000000 500000000", "2\n123456 789123 456789\n98765 43210 67890", "6\n999999999 999999999 999999999\n111111111 222222222 333333333\n987654321 123456789 111111111\n222222222 333333333 444444444\n567890123 234567890 123456789\n876543210 0987654321 123456789", "10\n123 456 789\n765 432 1987\n876 543 2198\n321 654 9876\n210 987 3451\n654 321 3456\n567 890 1234\n432 789 5678\n321 678 9865\n098 765 4321"]}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "testcase": ["1\n5\n1 2 3 4 5", "2\n3\n2 1 4\n4\n5 3 6 2", "1\n1\n1000000", "3\n2\n1 10\n3\n1000 500 333\n1\n999999", "2\n4\n567 890 234 678\n2\n999 1000000", "1\n6\n12 23 34 45 56 67", "1\n10\n10 9 8 7 6 5 4 3 2 1", "1\n3\n1024 2048 512", "4\n1\n1\n1\n10\n5\n8 6 7 5 9\n7\n128 256 512 1024 2048 4096 8192", "2\n8\n102 203 304 405 506 607 708 809\n2\n123456 789012"]}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "testcase": ["1\n1010", "3\n110\n1001\n0110", "2\n1\n0", "4\n111000\n101\n10\n0", "5\n1010101010\n1111\n0000\n010101\n1100", "1\n1001101", "6\n1\n11\n111\n1111\n11111\n111111", "2\n11010101\n10101010", "7\n0101010101\n00110011\n0000\n11111111\n10\n110011\n01", "1\n000000000000011111111111111111"]}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "2 2", "3 1", "4 24", "5 120", "6 720", "7 5040", "8 40320", "9 362880", "10 3628800"]}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "testcase": ["a", "bcdef", "helloworld", "abcdefghij", "x", "longstringwithletters", "abcdabcdabcd", "zxywvutsrq", "mnopqr", "zzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "testcase": ["1\n2", "3\n3\n4\n5", "2\n999999999\n1000000000", "5\n10\n20\n30\n40\n50", "4\n12345678\n87654321\n100000000\n98765432", "1\n7", "10\n15\n25\n35\n45\n55\n65\n75\n85\n95\n105", "2\n200000000\n300000000", "4\n5000000\n5000001\n5000002\n5000003", "1\n999999998"]}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "testcase": ["5 1 1 1 1000000000 2 500 1000 3 999999999 999999999 4 1 10 5 1000000000 1000000000", "3 2 1 10 3 5 15 4 20 20", "1 1 1 1", "4 2 100 200 2 150 250 2 200 300 2 25 50", "6 5 999 1001 7 500000000 999999999 8 200 201 9 300 400 10 10 20 11 1 2", "3 4 100000000 1000000000 6 300000000 700000000 7 900000000 999999999", "2 1 100000 100001 2 123456789 987654321", "7 1 1 2 2 3 4 5 5 6 9 7 10 20 8 100 200 9 1000 2000", "5 1 50 51 3 6000 7000 4 800 900 6 10 11 7 5 15", "9 1 300 400 1 500 600 1 700 900 1 1000 1200 1 1300 1400 1 1500 1550 1 1600 1700 1 1800 1900 1 2000 2100"]}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "testcase": ["1 1 1 1", "100 100 100 100", "50 50 50 50", "25 50 75 100", "1 100 50 25", "10 20 30 40", "99 98 97 96", "1 2 3 4", "100 99 98 1", "60 60 60 60"]}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "testcase": ["5 2\n12345", "8 0\n98765432", "3 1\n123", "7 3\n1029384", "10 5\n9876543210", "1 0\n8", "15 7\n123456789012345", "12 6\n111111111111", "20 10\n12345678901234567890", "4 2\n1324"]}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "testcase": ["1 1", "100000 100000", "50000 50000", "1 100000", "100000 1", "1000 1000", "12345 54321", "98765 43210", "10000 100", "99 999"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1", "100", "999999999999", "500000000000", "123456789012", "9876543210", "1000000000000", "777777777777", "222222222222", "888888888888"]}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "testcase": ["1 3 2 3 1", "2 4 3 4 1 2 5 5 3 1 4 2", "3 1 1 2 1 1 3 4 5 6 4 5 6 3 1 2", "1 5 2 3 4 5 1", "2 2 2 1 3 4 1 3 2 4", "1 6 1 2 3 4 5 6", "3 7 3 6 7 1 5 4 2 5 1 2 3 4 5 6 7 4 3 2 7 6 5 1", "1 8 1 3 5 7 2 4 6 8", "2 9 5 8 7 2 1 6 4 9 3 4 3 2 9 1 5 7 6 8", "1 10 3 1 4 2 5 10 7 6 9 8"]}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "testcase": ["a", "bc", "abcde", "xyzabcdefghijklmnop", "hello", "iloveprogramming", "pythonisthebestlanguage", "loremipsumdolorsitametconsectetur", "abcdefghijklmnopqrstuvwxyz", "azzaabcdzzaaz"]}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "testcase": ["9876543210", "12345", "77777777777777777777", "999999999999999999999999999999", "1", "462837468237462837", "55555", "8", "11111111111", "3141592653589793"]}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "testcase": ["5\n1 1000000000\n5000 500000\n999999999 2\n23 23\n1000000000 1000000000", "3\n10 100\n1000 10\n9999 8888", "7\n1 1\n123456789 987654321\n11111111 22222222\n12345 54321\n1000000000 1000000000\n10 9\n100 100", "4\n1000000 999999999\n7777777 8888888\n1 999999999\n1000000000 100000000", "2\n50 100\n200 300", "9\n4567 7654\n100000 999000\n3333 4444\n50000000 40000000\n444444444 555555555\n22 33\n19 2\n6789 9876\n102 201", "10\n999999999 1\n888888888 777777777\n456456456 123123123\n654321 123456\n789456 654789\n321654987 987654321\n111111111 111111111\n123123123 321321321\n987654321 123456789\n111111111 999999999", "6\n111 222\n222 333\n444 555\n666 777\n888 999\n987654321 123456789", "8\n100 2000\n3000 40000\n50000 600000\n7000000 80000000\n900000000 1000000000\n15 25\n35 45\n55 65", "1\n123456789 987654321"]}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "testcase": ["1", "10", "100", "999", "5000", "10000", "2500", "8765", "42", "2023"]}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "testcase": ["A", "ZXY", "ABBCCCDDDEEE", "QWERTYUIOPASDFGHJKLZXCVBNM", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ZZZZZ", "AAAAAAAABBBBBBBCCCCCCCDDDDDDD", "NM", "KSHDJFHLGJDS", "XYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZXYZ"]}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "testcase": ["1\\n0", "2\\n01\\n10", "3\\n111\\n000\\n101", "4\\n1000\\n0100\\n0010\\n0001", "5\\n11111\\n11000\\n11100\\n00111\\n00011", "6\\n101010\\n010101\\n101010\\n010101\\n101010\\n010101", "7\\n0000000\\n0111110\\n0100010\\n0100010\\n0100010\\n0111110\\n0000000", "8\\n11111111\\n00000000\\n11111111\\n00000000\\n11111111\\n00000000\\n11111111\\n00000000", "9\\n111111111\\n100000001\\n101010101\\n100000001\\n111111111\\n100000001\\n101010101\\n100000001\\n111111111", "10\\n1000000001\\n0100000010\\n0010000100\\n0001001000\\n0000110000\\n0000110000\\n0001001000\\n0010000100\\n0100000010\\n1000000001"]}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "testcase": ["1\n1000000000 999999999", "2\n500000000 500000000\n100000 100001", "5\n1 1\n123456789 987654321\n1000000000 1\n1 1000000000\n999999999 999999999", "3\n2 2\n999999998 999999999\n1 100", "4\n1 2\n2 1\n10 10\n1000 1000", "3\n1000 999\n999 1000\n1000000000 1000000000", "2\n500000000 1\n1 500000000", "1\n876543210 123456789", "2\n1000000 1000000\n99999999 1", "5\n10000 20000\n30000 40000\n50000 60000\n70000 80000\n90000 100000"]}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "testcase": ["10\n3\n1 2\n3 4\n5 6\n2\n0 1\n1 0\n4\n2 3\n4 5\n6 7\n8 9\n1\n10 11\n5\n12 13\n14 15\n16 17\n18 19\n20 21\n6\n22 23\n24 25\n26 27\n28 29\n30 31\n32 33\n7\n3 6\n6 12\n9 18\n12 24\n15 30\n18 36\n21 42\n1\n99 100\n2\n999 998\n998 999\n10\n11 22\n33 44\n55 66\n77 88\n99 100\n111 122\n133 144\n155 166\n177 188\n199 210", "20\n1\n1 3\n5\n2 5\n4 8\n6 11\n8 14\n10 17\n7\n3 7\n6 10\n9 13\n12 16\n15 19\n18 22\n21 25\n2\n14 23\n23 14\n1\n99 101\n3\n300 700\n500 900\n700 300\n1\n0 50\n6\n60 70\n80 90\n100 110\n120 130\n140 150\n160 170\n3\n50 60\n70 80\n90 100\n2\n1 1\n1000 1000\n1\n500 600", "3\n10\n1 1\n1 2\n1 3\n1 4\n1 5\n1 6\n1 7\n1 8\n1 9\n1 10\n1\n2 2\n5\n11 12\n13 14\n15 16\n17 18\n19 20", "5\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n3\n10 20\n20 30\n30 40\n2\n99 100\n98 99\n4\n7 14\n14 21\n21 28\n28 35\n1\n8 8", "1\n1\n1001 100\n2\n90 200\n200 90", "1\n10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "2\n20\n1 0\n2 0\n3 0\n4 0\n5 0\n6 0\n7 0\n8 0\n9 0\n10 0\n11 0\n12 0\n13 0\n14 0\n15 0\n16 0\n17 0\n18 0\n19 0\n20 20\n1\n1000 0", "7\n1\n10 20\n2\n30 40\n50 60\n3\n70 80\n90 100\n100 110\n4\n120 130\n140 150\n160 170\n180 190\n5\n200 210\n220 230\n240 250\n260 270\n280 290\n6\n300 310\n320 330\n340 350\n360 370\n380 390\n400 410\n5\n500 510\n520 530\n540 550\n560 570\n580 590", "1\n50\n1 49\n2 48\n3 47\n4 46\n5 45\n6 44\n7 43\n8 42\n9 41\n10 40\n11 39\n12 38\n13 37\n14 36\n15 35\n16 34\n17 33\n18 32\n19 31\n20 30\n21 29\n22 28\n23 27\n24 26\n25 25\n26 24\n27 23\n28 22\n29 21\n30 20\n31 19\n32 18\n33 17\n34 16\n35 15\n36 14\n37 13\n38 12\n39 11\n40 10\n41 9\n42 8\n43 7\n44 6\n45 5\n46 4\n47 3\n48 2\n49 1\n50 0", "5\n6\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60\n4\n100 200\n200 300\n300 400\n400 500\n2\n50 100\n100 50\n3\n900 800\n700 600\n500 400\n1\n99 101"]}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <=10^9) without leading zeroes. The second lines contains one integer m (0 <= m <=10^9) --- Bob's answer, possibly with leading zeroes.", "testcase": ["0\n0000000000", "987654321\n123456789", "1\n0000000001", "10\n0000000010", "123456789\n987654321", "1000000000\n999999999", "999999999\n0000000009", "234567890\n0123456789", "111111111\n0000000000", "876543210\n0001234567"]}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "testcase": ["()", "(())", "(()())", "(()", "())", "(((((())))))", "((()()))", "()", "()))(((", "((()))(()())"]}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "testcase": ["1\n5 3\naaaaa\n1 2 3", "2\n3 1\nabc\n1\n4 2\nxyzt\n2 1", "1\n6 5\nabcdef\n5 4 3 2 1", "1\n2 1\nzz\n1", "1\n10 4\nhelloworld\n9 8 7 6", "1\n5 5\napple\n1 3 4 2 1", "2\n10 10\naabbccddee\n1 2 3 4 5 6 7 8 9 1\n3 2\nxyz\n2 2 2", "1\n8 3\nabcdefgh\n1 3 7", "1\n9 5\nalgorithm\n8 4 3 2 1", "2\n15 8\ndatacohesiontest\n1 3 4 8 5 9 2 3\n4 3\nlmn\n2 2 1"]}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "testcase": ["3\n1000000000 999999999 1\n2 500000000 1000000000", "5\n10 20 30 40 50\n50 40 30 20 10", "2\n1 1000000000\n1000000000 1", "4\n1000 2000 3000 4000\n4000 3000 2000 1000", "6\n123456789 987654321 123456789 987654321 123456789 987654321\n987654321 123456789 987654321 123456789 987654321 123456789", "10\n1 1 1 1 1 1 1 1 1 1\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "3\n1 2 3\n3 2 1", "8\n222222222 444444444 666666666 888888888 111111111 333333333 555555555 777777777\n777777777 555555555 333333333 111111111 888888888 666666666 444444444 222222222", "7\n100 200 300 400 500 600 700\n700 600 500 400 300 200 100", "9\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111\n111111111 222222222 333333333 444444444 555555555 666666666 777777777 888888888 999999999"]}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "testcase": ["1\n1 1", "1\n1000000000 999999999", "1\n500 500", "1\n123456789 987654321", "1\n2 3", "1\n999999999 1", "1\n123456 654321", "1\n333333333 666666666", "1\n100 1000", "1\n98765432 23456789"]}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "testcase": ["SNWE", "EWS", "WSN", "NNNN", "WWW", "SEESEEE", "NWNWNW", "SWES", "E", "SWSWNWEEEE"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["10\n2 1\n3 1\n4 2\n5 3\n6 1\n7 4\n8 5\n9 6\n10 7\n11 8", "5\n1000000000 999999999\n999999999 100000000\n123456789 987654321\n234567891 123456789\n345678912 111111111", "7\n15 10\n20 20\n25 15\n30 25\n35 35\n40 10\n45 5", "1\n1000000000 1", "3\n100 50\n200 100\n300 150", "2\n6789 9876\n7890 8901", "4\n112233 223344\n334455 445566\n556677 667788\n778899 889911", "6\n10000 1000\n20000 2000\n30000 3000\n40000 4000\n50000 5000\n60000 6000", "8\n987654 123456\n876543 234567\n765432 345678\n654321 456789\n543210 567890\n432109 678901\n321098 789012\n210987 890123", "9\n101 1\n202 2\n303 3\n404 4\n505 5\n606 6\n707 7\n808 8\n909 9"]}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "testcase": ["1 5 3 1 5 3 2 10 6", "2 5 0 3 1 4 3 1 5 2 8 9 3 2", "3 4 2 10 20 15 25 5 15 10 20 2 8", "4 6 4 9 8 6 7 5 3 2 7 5 8 1 5 6", "5 3 3 12 15 8 2 14 5 7", "6 7 5 10 13 25 14 10 6 30 2 15 20 30 25 10 5", "7 2 1 18 9 1 12", "8 9 3 2 3 5 7 11 13 15 9 4 6 8 10 12 14 5 1", "9 10 7 1 21 5 19 23 7 8 14 6 3 10 9 12 11 2 8 14 7", "10 1 0 30 20"]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["10", "10000", "20000", "1000", "5000", "15000", "25000", "10000", "25000", "27500"]}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "testcase": ["1\n1000 1000", "1\n5000 3000", "1\n8888 7777", "1\n10000 9999", "1\n3456 7654", "1\n1111 2222", "1\n9876 5432", "1\n1234 4321", "1\n5555 4444", "1\n6789 9876"]}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "testcase": ["3\n5 10\n999999999999999999 1000000000000000000\n123456789 987654321", "1\n4294967295 8589934590", "5\n1 1000000000000000000\n1000000000000000000 1000000000000000000\n10 20\n500 1000\n99999999 88888888", "2\n4567890765432 4567890765433\n987654321011 987654321011", "4\n10000000000000000 9999999999999999\n123456789123456789 987654321987654321\n400000000000000000 500000000000000000\n999999999999999999 1", "1\n1 1", "7\n500000000000000 600000000000000\n10 10\n734572849283 83748492931\n9 90\n15 25\n111111111111111111 222222222222222222\n243243243243243243 343434343434343434", "3\n10 100\n20 30\n30 50", "2\n1000000000000000000 2000000000000000000\n123456789012345678 198765432109876543", "1\n982374982374982374 982374982374982373"]}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "testcase": ["1\n0 0\n", "1\n1000000000 0\n", "1\n0 1000000000\n", "1\n999999999 1\n", "1\n1 999999999\n", "1\n123456789 987654321\n", "1\n987654321 123456789\n", "1\n555555555 444444444\n", "1\n99999999 88888888\n", "1\n1000000000 1000000000\n"]}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <=10^9). Both numbers are written in decimal notation.", "testcase": ["0 0", "1 1", "1000000000 0", "0 1000000000", "500000000 500000000", "123456789 987654321", "42 42", "111111111 222222222", "999999999 999999999", "123456789 1000000000"]}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "testcase": ["2\n10 50\n15 100", "3\n5 10\n20 300\n7 0", "5\n12 100\n8 60\n25 625\n3 4\n10 20", "4\n30 900\n6 36\n5 0\n13 169", "1\n300 90000", "6\n18 300\n1 0\n2 4\n3 3\n4 16\n5 25", "2\n100 10000\n15 225", "3\n11 100\n14 196\n19 361", "4\n20 350\n6 18\n3 6\n9 81", "2\n16 50\n7 40"]}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "testcase": ["1\n0", "2\n01\n10", "3\n001\n111\n101", "4\n0000\n0101\n1100\n1111", "5\n1\n10\n11\n100\n101", "6\n0110\n0010\n1111\n0001\n1000\n1010", "7\n0101010\n1110111\n0000000\n0101010\n1010101\n1000001\n1100110", "8\n1110000\n1010101\n0001100\n0011110\n0111101\n1111111\n0000001\n1010100", "9\n0111110\n1011110\n1111000\n0010010\n1101101\n0000000\n1011001\n1110110\n0111111", "10\n110\n010\n000\n111\n100\n001\n101\n011\n111\n000"]}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1 5 123 456 789 101112 131415", "2 3 1000000000 999999999 888888888 2 4 1 2 3 4", "1 100000 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "3 5 10 20 30 40 50 1 1 1000000000 2 2 99 101", "4 2 5 7 2 3 3 3 1 4 6 6 6 3 2 5 6 7", "1 10 100000 20000 3000 400 50 6 666666 777 88 9", "5 1 123456789 1 9 9 9 9 9 1 8 1000000 3 4 4 4", "1 100000 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7 7", "1 1 900000001", "2 11 99500 99450 99400 99350 99300 99250 99200 99150 99100 99050 99000 5 10000 9000 8000 7000 6000", "2 8 1 2 3 4 5 6 7 8 5 999999999 888888888 777777777 666666666 555555555"]}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "999999999", "54321", "123456789", "987654321", "100000000", "999999", "500000000", "850000000", "1000000000"]}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "testcase": ["3", "50", "100", "250", "500", "1000", "10000", "50000", "100000", "1000000"]}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "testcase": ["1\n1000000000", "2\n1\n2", "3\n10\n20\n30", "1\n50321", "4\n987654321\n234567890\n123456789\n111111111", "5\n3\n6\n9\n12\n15", "2\n999999999\n436781", "3\n42\n84\n168", "2\n100\n10", "1\n999999"]}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "testcase": ["1", "12345", "987654321", "202104859", "123456789012345", "99999999999", "1000000", "76432233776", "54321012345", "111111111111111"]}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "testcase": ["1\n100 50", "2\n123456 789999", "3\n0 0", "4\n500000 600000", "5\n1000000 999999", "6\n765432 123456", "7\n349857 987654", "8\n1 1000000", "9\n999999 1", "10\n543210 123456"]}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "testcase": ["5\n10 15 5 10 3\n300 200 150 100 50\n1000000000 900000000 800000000 700000000 100000\n500 600 400 200 400\n1000 1000 500 500 1000\n1 1 1 1 1\n1000000000 1000000000 999999999 999999999 1\n123456789 987654321 12345678 87654321 1000000\n2 10 1 5 5\n7 8 4 3 4", "3\n999999999 888888888 111111111 222222222 10\n1500 1500 1200 1300 270\n100 200 50 100 25", "2\n25 300 20 200 100\n100 100 50 50 100", "3\n300 150 100 80 70\n1000 800 800 700 100\n50 70 25 30 20", "4\n60 70 30 50 20\n8000000 7000000 6000000 5000000 400000\n10 20 5 10 5\n50000000 40000000 30000000 20000000 1000000", "6\n40 30 20 10 15\n90 95 80 85 10\n6000 5000 4000 3000 2000\n1234 5678 1212 3434 42\n123123123 321321321 111111111 222222222 55555555\n95 85 80 75 10", "8\n300 400 100 200 50\n500 400 400 300 60\n8000 9000 5000 6000 2000\n200 100 100 50 50\n99999999 88888888 77777777 66666666 5555555\n2 9 1 3 5\n120 240 60 180 90\n70000000 80000000 65000000 75000000 5000000", "5\n1 2 1 1 1\n6 8 3 5 3\n90 150 70 100 50\n7000 6000 5000 4000 3000\n40 60 20 40 10", "7\n77777 88888 66666 77777 11111\n500 600 200 300 50\n70 130 50 90 30\n100 150 80 120 40\n33333 44444 22222 33333 11111\n300000 250000 200000 150000 50000\n1020304060 1020304050 1020304040 1020304030 10203020", "4\n5000 10000 3000 7000 1000\n150 200 100 150 50\n999 888 777 666 55\n120 240 60 180 100"]}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "testcase": ["3\n3\n123\n4\n5678\n2\n91", "2\n5\n54321\n3\n789", "1\n3\n456", "4\n2\n32\n1\n7\n3\n333\n4\n9876", "1\n4\n2468", "2\n1\n9\n2\n27", "5\n3\n111\n4\n2222\n1\n5\n2\n10\n2\n99", "3\n3\n333\n1\n4\n5\n67890", "1\n1\n1", "2\n6\n654321\n3\n908"]}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["3 10 20 30", "5 1000000000 999999999 888888888 777777777 666666666", "2 123456789 987654321", "4 1 1 1 1", "6 10 20 30 40 50 60", "8 3 6 9 12 15 18 21 24", "2 32 64", "10 100 200 300 400 500 600 700 800 900 1000", "2 999999 1000000", "7 7 14 21 28 35 42 49"]}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <=10^9).", "testcase": ["1", "100", "5000", "100000", "999999999", "1000000000", "123456789", "987654321", "250000000", "750000000"]}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "testcase": ["5 3 2\n1 2 3\n", "3 5 3\n10 20 30 15 5\n", "2 4 1\n100 200 300 400\n", "6 6 5\n5 5 5 5 5 5\n", "2 10 7\n1000 2000 3 6 9 12 15 18 21 24\n", "1 7 6\n15 14 13 12 11 10 9\n", "3 6 2\n7 8 9 12 15 18\n", "4 8 7\n5000 400 300 200 100 0 10 20\n", "5 9 4\n100 90 80 70 60 50 40 30 20\n", "3 10 5\n1000000000 1000000000 1000000000 999999999 999999999 999999999 999999998 999999998 999999998 999999997\n"]}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "testcase": ["1\n3 5\n2 3 4", "1\n2 0\n0 0", "1\n5 10000\n1000 2000 3000 4000 5000", "1\n1 7\n6", "1\n4 12\n3 1 2 6", "1\n7 15\n5 5 5 5 5 5 5", "1\n10 100\n10 20 30 40 50 60 70 80 90 100", "1\n6 999999\n99999 88888 77777 66666 55555 44444", "1\n8 50\n0 1 2 3 4 5 6 7", "1\n2 28\n14 14"]}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "testcase": ["5\n1000 500\n100000 100000\n50000 25000\n1 1\n32768 1024", "10\n20000 1000\n99999 999\n100 50\n500 25\n12345 6789\n54321 4321\n11111 1111\n33333 3333\n77777 7777\n88888 8888", "3\n10 5\n9999 1\n100000 99999", "4\n1500 750\n7500 3750\n30000 1500\n4500 2250", "7\n123 1\n456 2\n789 3\n1011 4\n1213 5\n1415 6\n1617 7", "2\n87456 12345\n99999 54321", "8\n314159 2718\n141421 3562\n161803 3988\n223606 797\n173205 822\n244949 828\n182818 2845\n141421 4233", "6\n11111 1111\n22222 2222\n33333 3333\n44444 4444\n55555 5555\n66666 6666", "9\n99999 1\n10000 50\n34521 100\n24356 200\n12345 300\n54321 400\n67890 500\n98765 600\n13579 700", "3\n98765 4321\n24680 1357\n34567 1234"]}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "testcase": ["t", "orchid", "melody", "lyric", "rhythm", "whisper", "harmony", "echo", "verse", "serenade"]}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <=10^6.", "testcase": ["1 1 1 1", "1000000 999999 1000000 999999", "233 457 876 983", "999999 999998 999997 999996", "54321 12345 67890 98765", "11111 22222 33333 44444", "567899 678900 789012 890123", "123456 654321 234567 765432", "999999 500000 1 1000000", "101010 202020 303030 404040"]}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "testcase": ["3 5 10 2 4 6 8 10", "2 4 5 1 2 3 4", "1 3 7 1 4 1", "4 2 3 4 5 6 7", "5 6 10 2 5 10 8 4", "5 1 1 1 1 1 1 1", "2 4 500000000 200000000 300000000", "3 100000 1000000000 1000000000 1 1000000000", "1 99999 999999999 9999999", "999 1 1000000000 "]}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "testcase": ["3\na\naa\nabc", "5\nz\ny\nyz\nxyz\na", "2\nhello\nworld", "4\nabab\nbcdef\nghijk\nlmz", "3\nmnopqrst\nuvwxyz\naaaa", "1\nqwer", "2\ntestcase\nstringtest", "3\nefg\nhij\neklmno", "1\nexample", "2\nabcde\nvwxyz"]}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "testcase": ["10\n", "123456789 987654321\n", "1000000000 1\n", "500000000 500000000\n", "999999999 1000000000\n", "1 1\n", "123456789 123456789\n", "7654321 1234567\n", "98765432 234567890\n", "99999999 11111111\n", "222222222 333333333\n"]}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "testcase": ["1 1 1 1 100000", "2 3 5 7 100000", "10 10 10 10 100000", "1 2 3 4 50000", "6 7 8 9 30000", "1 10 5 6 40000", "2 3 4 5 99999", "5 3 8 6 1000", "7 7 7 7 77777", "10 5 10 5 100000"]}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "testcase": ["10\n1\n1000000000000\n9876543210\n999999999999\n123456789012\n500000000001\n750000000000\n2147483647\n922337203685477580\n8888888888888", "1\n10", "1\n999999999999", "1\n1000000000000", "1\n500000000000", "1\n987654321098", "1\n2147483648", "1\n777777777777", "1\n300000000000", "1\n665544332211"]}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "testcase": ["1", "1000000000000000000", "42", "999999999999999999", "500", "340282366920938463", "732019382918273629", "129837198237123", "987654321012345678", "271828182845904523"]}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "testcase": ["a", "ab", "abc", "abcd", "abcde", "abcdef", "abcdefg", "abcdefgh", "abcdefghi", "abcdefghij"]}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <=10^13).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "9999999999999", "10000000000000"]}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "testcase": ["A", "ANOT", "NNT", "TAA", "OONO", "NT", "TAO", "ANTON", "NO", "TOTANOTAN"]}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "testcase": ["0110?", "?1?0", "11100011", "00?111?0", "?0", "1??", "0?1?0", "0", "?111?0?1", "000111"]}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <=10^9, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "testcase": ["1 3 4 5", "1 8 3 7", "2 4 5 10", "1 11 6 9", "4 6 3 9", "5 7 8 10", "2 10 3 8", "1 11 1 11", "6 9 1 4", "3 5 7 11"]}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "testcase": ["5 3\n12 15\n12 15\n10 20\n10 20\n5 30", "6 2\n20 5\n18 7\n17 10\n15 12\n14 15\n13 18", "3 1\n50 50\n40 40\n30 30", "4 2\n5 10\n5 10\n5 15\n5 20", "7 4\n25 13\n23 15\n25 19\n21 11\n25 13\n23 17\n22 16", "10 5\n45 30\n44 29\n43 28\n42 27\n41 26\n40 25\n39 24\n38 23\n37 22\n36 21", "8 3\n15 5\n15 5\n14 8\n13 10\n13 12\n12 8\n11 15\n10 14", "9 6\n27 15\n26 14\n25 13\n24 12\n23 11\n22 10\n21 9\n20 8\n19 7", "2 1\n18 2\n18 2", "3 2\n8 7\n7 6\n6 5"]}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <=10^4, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "testcase": ["1000 500 50", "2000 1500 110", "3500 3000 120", "5000 4500 200", "7500 2500 75", "10000 1000 99", "9999 5555 150", "8888 2222 300", "1234 123 50", "5678 567 47"]}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "testcase": ["1", "2", "3", "4", "5", "1", "2", "3", "4", "5"]}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "testcase": ["1000 999 500", "500 300 1000", "750 500 750", "600 400 200", "800 700 600", "1000 500 900", "450 200 300", "100 50 100", "999 998 700", "800 700 800"]}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <=10^6 --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "testcase": ["2 5 3 8", "10 1 100 1000", "3 2 6 9", "4 6 10 10", "1 8 500 500000", "8 1 1000000 999999", "6 3 60000 300000", "5 7 1000000 1", "9 4 850000 950000", "7 2 700000 777777"]}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <=10^18) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "testcase": ["1 1", "1 1000000000000000000", "12345678 87654321", "99999998 99999999", "500000000000000000 500000000000000001", "100 1000", "42 42", "1000000 1000001", "999999999999999999 1000000000000000000", "56789 98765"]}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "testcase": ["1 2 3", "1000000 0 0", "0 1000000 1", "0 1 1000000", "0 230 1", "100 50 50", "0 0 12345678", "231 231 231", "0 0 1", "500000 500000 500000"]}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "testcase": ["1", "1000", "500", "250", "750", "333", "667", "100", "900", "555"]}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <=10^5) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "testcase": ["2\n1 1000000000", "3\n2 2 2", "10\n1 1 1 1 1 1 1 1 1 1", "5\n1000 500 250 125 60", "6\n999999999 1000000000 999999998 999999997 999999996 999999995", "7\n5 10 15 20 25 30 35", "4\n123456789 987654321 111111111 999999999", "8\n10 9 8 7 6 5 4 3", "9\n1 2 3 4 5 6 7 8 9", "10\n100 200 300 400 500 600 700 800 900 1000"]}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <=10^9). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <=10^9).", "testcase": ["5 100\n1 2 3 4 5", "10 50000\n1000000000 999999999 0 234 345 567 999 123456789 987654321 8473647", "1 0\n0", "2000 1000000000\n1000000000 ", ".join([str(i) for i in range(2000)]) , ", "10 10\n10 9 8 7 6 5 4 3 2 1", "5 5\n10 20 30 40 50", "3 1000\n100 200 300", "2 50\n50 50", "1000 999999999\n", ", ", "[str(10**9) for _ in range(1000)])]}", "20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1"]}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "testcase": ["5000 5\n2000 300\n4500 200\n9999 500\n10000 1000\n123 45", "1000 3\n1500 100\n2000 200\n3000 300", "500 1\n250 50", "7500 4\n5000 250\n6000 1000\n7000 200\n8000 300", "300 2\n100 20\n200 30", "10000 3\n9876 123\n5432 321\n1111 400", "2500 6\n3000 500\n3500 600\n4000 700\n4500 800\n4900 900\n5000 1000", "100 1\n50 10", "9000 10\n8000 100\n8200 200\n8400 300\n8600 400\n8800 500\n9000 600\n9100 700\n9200 800\n9300 900", "1500 5\n1000 100\n1100 200\n1200 300\n1300 400\n1400 500"]}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "testcase": ["1", "10", "100", "500", "1000", "5000", "10000", "50000", "100000", "1000000"]}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <=10^9; <image> <=10^5).", "testcase": ["1 1 1", "1000000000 1000000000 1000000000", "123456 789012 345678901", "999999999 999999999 999999999", "1 100000 100000", "500000000 1000000000 1000000000", "1000000000 1 10", "987654321 123456789 987654321", "1 999999999 1000000000", "12345 67890 123456789"]}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "testcase": ["x", "y", "xx", "yy", "xyxyxyxyxy", "yyyyxyyyyx", "xxxxxxxxxx", "yyxxyxxxyy", "xyxyxyxyxyxyxy", "yyxyxyyyxyxyx"]}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "testcase": ["1 2 3 4 5 6 7 8 9", "0 0 0 0 0 0 0 0 0", "100 100 100 50 50 50 25 25 25", "99 99 99 1 1 1 2 2 2", "10 10 10 20 20 20 30 30 30", "5 4 3 2 1 0 99 98 97", "33 66 99 11 22 33 44 55 66", "17 36 15 43 94 63 82 100 29", "3 7 21 14 98 35 59 61 77", "50 25 75 10 40 40 5 5 5"]}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <=10^18, 2 <= k <=10^9).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "testcase": ["1 2", "1000000000000000000 1000000000", "123456789123456789 987654321", "999999999999999999 999999999", "543210 345678", "619234 500000", "9 999999994", "67890000000000000 300000000", "123456789 1000000000", "100000000000000000 1000000000"]}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "testcase": ["3 2 1", "10 5 5", "4000 2000 2000", "4000 3999 1", "500 250 300", "1000 1000 1", "3 1 3", "3500 1500 2500", "2000 1000 1000", "1000 999 2"]}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3.10^7) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.", "testcase": ["3 3 1\n*..\n.*.\n..*", "5 5 1000\n*****\n*...*\n*.*.*\n*...*\n*****", "4 4 3\n....\n.**.\n.**.\n....", "6 3 500000\n*.*\n.*.\n*.*\n.*.\n*.*\n*.*", "2 2 50\n.*\n*.", "7 7 20000000\n.......\n.*****.\n.*...*.\n.*...*.\n.*...*.\n.*****.\n.......", "3 4 1000000\n****\n.*..\n*..*", "1 1 1\n.", "2 3 12345678\n*.*\n.*.", "10 10 31000000\n**********\n*........*\n*.*.****.*\n*.*....*.*\n*.******.*\n*........*\n*.****.*.*\n*.*....*.*\n**********\n**********"]}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <=10^7).", "testcase": ["1 1", "1000000 500000", "10000000 10000000", "2345678 9876543", "3333333 6666666", "9999999 1", "543210 1234567", "2020202 3030303", "1234567 7654321", "8765432 2345678"]}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "testcase": ["+", "-", "+-+-", "++--", "++++", "----", "+-+-+-+-+-+", "+++-+---+-++", "-+-+--++--+", "-+--++-+-+-+-+-"]}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <=10^9).", "testcase": ["5 3\n12345\n67890\n23456\n78901\n34567", "2 5\n987654321\n123456789", "1 0\n1000000000", "10 9\n999999999\n888888888\n777777777\n666666666\n555555555\n444444444\n333333333\n222222222\n111111111\n123456789", "3 2\n10\n20\n30", "7 4\n7612398\n5478392\n1948392\n2839817\n1092837\n7281937\n8923748", "4 1\n1111\n2222\n3333\n4444", "6 0\n101\n202\n303\n404\n505\n606", "8 9\n981273\n873198\n647391\n123876\n983172\n871263\n731987\n918273", "9 7\n6728391\n7328193\n9182736\n8371928\n6371829\n9273817\n8127362\n1827364\n2738916"]}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "testcase": ["1\n1.3.\n..4.\n3...\n.2.1", "2\n1.32\n....\n.4..\n..3.", "3\n....\n3.1.\n.2..\n.4.3", "4\n1...\n.232\n....\n....", "5\n...\n4..3\n.2.1\n1...", "2\n1...\n3.2.\n....\n..4.", "3\n....\n..2.\n4.3.\n2.1.", "1\n..1.\n....\n4.3.\n.2..", "2\n13..\n....\n..2.\n4..3", "5\n12..\n.34.\n....\n...."]}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <=10^6.\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "testcase": ["1000000 1000000 500000 500000 1 1", "1 1 1 1 1 1", "500000 500000 250000 250000 10 10", "1000000 1000000 1 1 1000000 1000000", "100000 200000 50000 100000 50000 100000", "1000 1000 999 999 1 1", "999999 999999 500000 500000 999999 999999", "20 20 10 10 1 1", "1000000 1 1 1 500000 1000000", "500 400 250 200 499 399"]}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "testcase": ["1 2", "500 500", "1000 1000", "100 200", "999 1000", "10 20", "250 750", "400 300", "800 900", "123 456"]}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4.10^7).", "testcase": ["0", "1", "50", "123456", "9999999", "41000000", "30567891", "7891011", "20987654", "40000000"]}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "2"]}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <=10^6, containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "testcase": ["*?012*2?*", "0*1?2??01", "**??***2*", "1111111111", "??0?1***0*", "?*??*?*?*?", "****222***", "*0*1*?2?1*", "1010202021", "1??2*?*01*"]}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "testcase": ["5\n3 4 5 4 2", "10\n10 9 8 7 6 5 4 3 2 1", "1\n1", "3\n100 2 100", "6\n6 6 6 6 6 6", "4\n10 20 30 40", "8\n1 1 1 1 1 1 1 100", "7\n3 8 2 9 5 7 4", "2\n50 100", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "testcase": ["10000 50 20000 100", "50000 -1000 60000 1000", "1 -99999 99999 0", "100000 12345 100000 54321", "99999 -98765 88888 98765", "34567 -12345 76543 54321", "11111 1 99999 2", "87654 -87654 99999 87653", "99998 0 100000 1", "12345 67890 54321 98765"]}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "testcase": ["JOHN", "EMILYALEXANDERSMITH", "CHARLESEVELEIGH", "LAURAWILLIAMS", "OLIVIAJOHNSON", "ETHANBROWN", "ISABELLAJONES", "SOPHIAANDERSON", "JACKSONTHOMAS", "MASONWHITE"]}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "testcase": ["2 3\n1 -1", "5 2\n1 2 3 4 5", "3 1\n-1000 500 1000", "4 10\n-5 -10 -15 20", "6 6\n10 -20 30 -40 50 -60", "10 7\n100 -200 300 -400 500 -600 700 -800 900 -1000", "1 5\n0", "15 3\n123 -456 789 -101 112 -131 415 -161 718 -192 202 212 -232 242 252", "8 9\n1 1 1 1 1 1 1 1", "200 10\n"]}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "testcase": ["5 50\n1 2 3 4 5", "3 200\n10 20 30", "7 1000\n99 100 1 50 75 25 10", "10 5000\n5 5 5 5 5 5 5 5 5 5", "1 1\n1", "4 100\n25 50 75 100", "6 3000\n100 99 98 97 96 95", "8 8000\n1 10 20 30 40 50 60 70", "2 4000\n30 40", "9 9999\n10 20 30 40 50 60 70 80 90"]}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <=10^5). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <=10^5).", "testcase": ["5 10000\n1 2 3 4 5", "10 5\n10 9 8 7 6 5 4 3 2 1", "8 100000\n100000 99999 99998 99997 99996 99995 99994 99993", "3 15\n7 8 1", "2 50000\n15000 35000", "7 2500\n1000 100 500 650 300 400 200", "1 99999\n88888", "6 75\n25 50 10 5 40 60", "4 20000\n5000 10000 15000 20000", "9 12345\n1 2345 6789 1234 5678 9101 1112 1314 1516"]}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5.10^5) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <=10^6 --- the values of the array elements.", "testcase": ["5\n2 7 4 9 10", "1\n1000000", "10\n1 1 1 1 1 1 1 1 1 1", "3\n500000 600000 700000", "6\n100 200 300 400 500 600", "7\n102 200 305 410 509 601 700", "4\n7 14 21 28", "8\n999999 123456 987654 678901 234567 123098 765432 890123", "2\n999999 1000000", "9\n876543 987654 123456 234567 345678 456789 567890 678901 789012"]}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "testcase": ["(a, b, c)", "(x, y, z)", "(m, n, o, p)", "(s, a, v, e)", "(h, e, l, l, o)", "(d, a, t, a, s, c, i, e, n, c, e)", "(p, y, t, h, o, n)", "(c, o, d, i, n, g)", "(l, e, a, r, n, i, n, g, f, a, s, t)", "(t, e, s, t, c, a, s, e)"]}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "testcase": ["1 0 0 0", "10000 5000 5000 5000", "5000 2500 2500 2500", "9999 1 1 1", "1234 4321 1234 4321", "5678 0 1 2", "9876 432 123 0", "3456 2111 345 123", "6789 0 0 5000", "1111 1111 1111 1111"]}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "453_E. Little Pony and Lord Tirek", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 105) --- the number of ponies. Each of the next n lines contains three integers si, mi, ri (0 <= si <= mi <= 105; 0 <= ri <= 105), describing a pony. \n\nThe next line contains an integer m (1 <= m <= 105) --- the number of instructions. Each of the next m lines contains three integers ti, li, ri (0 <= ti <= 109; 1 <= li <= ri <= n), describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti (all ti are distinct).", "testcase": ["5\\n10 20 5\\n15 25 10\\n5 10 3\\n30 35 8\\n0 5 0\\n3\\n1 1 2\\n5 2 4\\n10 1 5", "1\\n0 0 0\\n1\\n1000000000 1 1", "3\\n100 200 50\\n150 150 75\\n80 80 40\\n2\\n1 1 2\\n10000 2 3", "7\\n0 1 1\\n1 2 0\\n2 3 2\\n3 4 3\\n4 5 4\\n5 6 0\\n6 7 1\\n4\\n2 1 3\\n4 4 5\\n6 5 7\\n8 1 7", "4\\n20 30 15\\n25 35 10\\n30 30 5\\n35 40 20\\n2\\n100000000 2 4\\n100000002 1 3", "2\\n100000 100000 100000\\n50000 100000 0\\n5\\n2 1 2\\n4 1 1\\n6 1 1\\n10 2 2\\n20 1 2", "10\\n10 20 10\\n20 30 20\\n30 40 30\\n40 50 40\\n50 60 50\\n60 70 60\\n70 80 70\\n80 90 80\\n90 100 90\\n100 110 100\\n5\\n1 1 5\\n2 6 10\\n3 1 10\\n4 2 9\\n5 3 8", "3\\n0 100000 50\\n1 100000 25\\n99999 100000 75\\n2\\n100000000 1 3\\n200000000 2 2", "6\\n10 10 5\\n9 10 9\\n8 8 0\\n10 10 10\\n1 1 1\\n0 0 0\\n3\\n5 1 3\\n10 1 5\\n15 1 6", "1\\n105 105 0\\n1\\n0 1 1"]}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "testcase": ["5\n2 1 3\n3 1 4 5", "10\n5 1 3 5 7 9\n4 2 4 6 8", "3\n1 2\n2 1 3", "8\n4 1 2 3 4\n4 5 6 7 8", "6\n0\n1 3 6", "7\n3 2 4 6\n3 1 5 7", "4\n2 1 4\n1 2", "9\n6 1 2 3 5 6 8\n1 9", "2\n1 2\n0", "10\n7 1 3 4 6 8 9 10\n7 2 3 5 7 8 9 10"]}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "testcase": ["1 1", "2 3", "9999 5", "10000 10", "5000 6", "123 7", "8750 8", "4567 9", "333 2", "7654 4"]}
{"name": "476_C. Dreamoon and Sums", "description": "Input\n\nThe single line of the input contains two integers a, b (1 <= a, b <= 107).", "testcase": ["1 1", "107 107", "500 500", "10000 10000", "9999999 9999999", "1 107", "107 1", "5000000 5000000", "10000000 10000000", "1234567 7654321"]}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "testcase": ["0 0 0 0 0", "100 100 100 100 100", "1 2 3 4 5", "50 50 50 50 50", "99 0 100 1 98", "23 45 67 89 10", "10 20 30 40 50", "5 15 25 35 45", "100 99 98 97 96", "11 22 33 44 55"]}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2.10^9) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "testcase": ["0 0 0", "2100000000 2100000000 2100000000", "1000000000 1500000000 2000000000", "500000000 1000000000 1500000000", "1 1 1", "123456789 987654321 111111111", "0 2100000000 0", "2099999999 0 1", "500000000 500000000 500000000", "2100000000 0 2100000000"]}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <=10^9; 2 <= x < y <= 3.10^4) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "testcase": ["10000001 10000000 2 3", "500000000 399999999 17 19", "1 1 29 31", "99999998 99999999 7 11", "123456789 876543210 13 17", "107 105 41 43", "42949672 42949664 37 41", "98765432 12345678 181 191", "31415926 27182818 1009 1013", "500000000 500000000 233 239"]}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <=10^9).", "testcase": ["0", "1", "-1", "1000000000", "-1000000000", "123456789", "-987654321", "56789", "-56789", "42"]}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "testcase": ["5 100 0 25 50 75 100", "3 50 0 25 50", "10 1000 0 100 200 300 400 500 600 700 800 900", "6 123 10 23 45 78 100 123", "8 56 5 5 10 20 30 30 45 55", "4 250 60 120 180 240", "2 1 0 1", "12 500 1 2 3 4 5 233 299 400 499 500 0 0", "7 1000000000 10000 20000 30000 40000 50000 60000 70000", "15 9999 0 500 1000 1500 2000 2500 3000 3500 4000 4500 5000 5500 6000 6500 9999"]}
{"name": "49_D. Game", "description": "Input\n\nThe first line contains number n (1 <= n <= 1000) which represents the stripe's length. The second line contains exactly n symbols --- the line's initial coloring. 0 corresponds to a white square, 1 corresponds to a black one.", "testcase": ["10 0010101100", "6 111111", "3 101", "1 0", "5 00000", "8 01010101", "4 1100", "2 11", "7 0011001", "1000 "]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 3", "5 10", "7 15", "9 20", "11 25", "13 30", "15 35", "17 40", "19 45", "21 50"]}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "testcase": ["2 2\nAB\nCD", "3 3\nXYZ\nABC\nDEF", "4 4\nAAAA\nBBBB\nCCCC\nDDDD", "5 5\nQWERT\nYUIOP\nASDFG\nHJKLZ\nXCVBN", "6 6\nLKJHG\nTREWS\nDXCVB\nNMZXC\nQWERT\nYUIOP", "7 7\nABCDEFG\nHIJKLMN\nOPQRSTU\nVWXYZAB\nCDEFGHI\nJKLMNOP\nQRSTUVX", "8 8\nAABBCCDD\nEEFFGGHH\nIIJJKKLL\nMMNNOOPP\nQQRRSSTT\nUUVVWXYZ\nZZYXXWWV\nUUTTSSRR", "9 9\nABCDEFGHI\nJKLMNOPQR\nSTUVWXYZA\nBCDEFGHIJ\nKLMNOPQRS\nTUVWXYZAB\nCDEFGHIJK\nLMNOPQRST\nUVWXYZZZX", "10 10\nAABBCCDDEE\nFFGGHHIIJJ\nKKLLMMNNOO\nPPQQRRSSTT\nUUVVWWXXYY\nZZYAABBCCD\nDEEFFGGHHI\nJKLMNNOPQR\nSTTUVWXYZZ\nYZXWVUTSRQ", "50 50\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\nJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\nKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\nQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT\nUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUUU\nVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVVV\nWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWWW\nXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX\nYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYYY\nZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZZ\nAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\nBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\nCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC\nDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD\nEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEEE\nFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\nGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGGG\nHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHHH\nIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIIII\nJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJJ\nKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKKK\nLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLLL\nMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMMM\nNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN\nOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOOO\nPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPPP\nQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQQ\nRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRRR\nSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSSS\nTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT"]}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "testcase": ["10 20 30 40", "1 1 1 1", "50 50 50 50", "25 30 35 40", "2 3 1 4", "7 14 21 28", "5 10 15 20", "30 25 20 15", "12 34 45 23", "8 9 10 11"]}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "testcase": ["1\n*", "5\n..*.*", "3\n***", "10\n........**", "8\n******..", "4\n*.*.", "6\n*.*.*.", "2\n.*", "7\n*..*.*.", "9\n**.*..*."]}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <=10^5).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <=10^6 for i-th query.", "testcase": ["1 2 5\n1 1000 1000\n2 500000 10\n3 999999 999999\n4 10 100\n5 2000 50", "123456 654321 3\n1 999999 1\n2 100 1000000\n3 500000 500000", "987654 321 4\n100 1000000 100\n200 200000 999999\n300 1500 10\n400 2000 1000000", "5 10 2\n1 10 10\n2 20 20", "10 20 1\n1 1 100", "1000000 1000000 10\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9\n10 10 10", "123456 789012 5\n1 10 1000\n10 100 500\n100 1000 10\n1000 10000 100\n10000 100000 555555", "99999 88888 7\n2 55555 33333\n3 44444 22222\n1 11111 11111\n5 66666 99999\n10 9999 10000\n6 999999 888888\n7 77777 99999", "33333 22222 6\n1 100 1000\n2 200 2000\n3 300 3000\n4 400 4000\n5 500 5000\n6 600 6000", "1 1 1\n999999 1000000 1000000"]}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^6.", "testcase": ["1", "100", "500", "1000", "5000", "10000", "50000", "100000", "500000", "1000000"]}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <=10^9) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "testcase": ["5\n1 3\n2 4\n3 2\n4 5\n5 1", "3\n1000000 1000000\n1000001 999999999\n1000002 1", "7\n1 1000\n2 1000\n3 1000\n4 1000\n5 1000\n6 1000\n7 1000", "10\n1 500\n2 400\n3 300\n4 200\n5 100\n6 100\n7 200\n8 300\n9 400\n10 500", "2\n123456789 987654321\n987654321 123456789", "1\n1000000000 1000000000", "6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "4\n500 500\n1000 1000\n1500 1500\n2000 2000", "8\n100 200\n200 400\n300 600\n400 800\n500 1000\n600 1200\n700 1400\n800 1600", "9\n10 100\n20 200\n30 300\n40 400\n50 500\n60 600\n70 700\n80 800\n90 900"]}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "testcase": ["A", "HELLO", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "QWERTY", "ZZZZZZZZZZ", "FOO", "BARBAZ", "LDJFLKDJSFLKJ", "ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUV", "AAAAAAAAAAAABBBBBBBBBBBBCCCCCCCCCCCCCDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDDD"]}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "testcase": ["5\n500 1500 1000 2000 750", "10\n1 2 3 4 5 6 7 8 9 10", "3\n2000 1000 1500", "6\n600 800 700 600 800 900", "2000\n", "50\n50 45 40 35 30 25 20 15 10 5 1 5 10 15 20 25 30 34 38 42 46 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 28 27 26 25 24 23", "4\n2000 1999 1998 1997", "7\n100 200 300 400 500 600 700", "20\n300 400 100 200 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800 1900 2000", "2\n1234 5678"]}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "testcase": ["a", "abc", "hello", "world", "example", "test", "python", "abcdefghij", "qwertyuiopasdfghjklz", "string"]}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "testcase": ["abc\ndef", "hello\nworld", "abcdefgh\nijklmnop", "x\nx", "pqrstu\nvwxyzb", "aaabbb\ncccddd", "mnopqr\nstuvwx", "darksky\nbrightday", "quickbrown\nlazyfoxes", "the\nothe"]}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "testcase": ["500 600\n200 150\n100 200\n300 400", "800 900\n100 500\n400 300\n350 350", "1000 1000\n300 400\n200 300\n250 500", "750 850\n200 450\n100 300\n150 100", "600 700\n300 500\n400 100\n200 200", "550 650\n150 250\n350 150\n500 300", "700 800\n100 200\n250 300\n150 400", "900 950\n400 100\n300 200\n500 150", "650 750\n350 400\n450 150\n500 250", "400 500\n200 300\n150 250\n100 150"]}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <=10^8, 2 <= hi <=10^8) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "testcase": ["1\n0 2", "2\n-50 10\n50 10", "3\n-108 2\n0 50\n108 100000000", "4\n10000000 999999\n5000000 12345678\n-5000000 98765432\n3 87654321", "5\n100000 500\n200000 600\n300000 700\n400000 800\n500000 900", "6\n1 12345678\n100 87654321\n200 23456789\n300 34567890\n400 45678901\n500 56789012", "7\n-10000 1000\n-9000 2000\n-8000 3000\n-7000 4000\n-6000 5000\n-5000 6000\n-4000 7000", "8\n0 2\n10 3\n20 4\n30 5\n40 6\n50 7\n60 8\n70 9", "9\n-10000000 543210\n-900000 654321\n800000 765432\n700000 876543\n600000 987654\n10000000 234567\n20000000 123456\n30000000 345678\n40000000 678901", "10\n-108 2\n108 9\n215 10\n322 8\n429 7\n536 6\n643 5\n750 4\n857 3\n964 2"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["10 1", "100 50", "1000 999", "20 5", "500 250", "10 10", "987654321 123456789", "123456789 123456789", "1000000000 500000000", "123 100"]}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3.10^5, 0 <= l <= 3.10^5).", "testcase": ["1 1 1 0", "310000 200000 150000 100000", "123456 234567 345678 310000", "100000 100001 100002 300000", "300000 299999 250000 200000", "50000 60000 70000 80000", "310000 310000 310000 310000", "1 310000 1 310000", "10000 20000 300000 0", "99999 88888 77777 33333"]}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "testcase": ["5\n1\n2\n3\n4\n5", "10\n1000000000\n999999999\n999999998\n999999997\n999999996\n1\n50\n500\n1000\n50000", "1\n500000000", "6\n123456\n654321\n111111111\n222222222\n333333333\n444444444", "3\n987654321\n234567890\n345678901", "2\n999999999\n1", "4\n10\n20\n30\n40", "7\n111\n222\n333\n444\n555\n666\n777", "9\n91\n82\n73\n64\n55\n46\n37\n28\n19", "8\n100000000\n200000000\n300000000\n400000000\n500000000\n600000000\n700000000\n800000000"]}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <=10^8) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "testcase": ["1 1 1", "10000000 10000000 10000000", "99999999 99999999 100000000", "12345678 87654321 98765432", "20000000 30000000 40000000", "50000000 60000000 70000000", "3 4 5", "100000000 99999999 88888888", "56789012 23456789 34567890", "11111111 22222222 33333333"]}
{"name": "599_C. Day at the Beach", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains n integers hi (1 <= hi <= 109). The i-th of these integers corresponds to the height of the i-th castle.", "testcase": ["1 1", "5 3 2 5 4 1", "10 1000000000 999999999 999999998 999999997 999999996 999999995 999999994 999999993 999999992 999999991", "2 123 456", "3 300000000 200000000 100000000", "4 10 20 30 40", "7 7 14 28 49 56 63 70", "8 1 2 3 4 5 6 7 8", "6 9 15 25 35 45 55", "9 999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111"]}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.", "testcase": ["()", "(())", "(()())", "()", "(((())))", "(()(()))", "()", "((()))", "()(())", "((())())"]}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "testcase": ["5\n1 100 1000 10000 100000", "10\n1 2 3 4 5 6 7 8 9 10", "3\n1000000000 999999999 1", "1\n500000000", "7\n123456789 987654321 111111111 222222222 333333333 444444444 555555555", "4\n250000 500000 750000 1000000", "6\n1 500000000 400000000 800000000 999999999 1000000000", "2\n999999 1000000000", "10\n10 20 30 40 50 60 70 80 90 100", "8\n98765432 23456789 34567890 45678901 56789012 67890123 78901234 89012345"]}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "testcase": ["1", "100", "10000", "500000", "9999999999", "123456789012", "1014", "87654321098765", "101400000000", "99999999999999"]}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <=10^9) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "testcase": ["2\n1 1", "3\n1000000000 1000000000 1000000000", "4\n1 2 3 4", "5\n10 9 8 7 6", "6\n10 10 10 10 10 10", "7\n1 1 1 1 1 1 1", "8\n100 200 300 400 500 600 700 800", "9\n50 100 150 200 250 300 350 400 450", "10\n999999999 1 2 3 4 5 6 7 8 9", "11\n123456789 987654321 111111111 222222222 333333333 444444444 555555555 666666666 777777777 888888888 999999999"]}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <=10^18) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <=10^18, 1 <= c < b <=10^18) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "testcase": ["1\n1\n2\n1", "100\n5\n10\n3", "99999999999999999\n123456789\n987654321\n100000000", "5000000000000\n100000000000\n2000000000000\n15000000000", "5876\n5\n10\n2", "12345678901234567\n987654321\n1234567890\n543210987", "9000000000000000\n10000000000\n20000000000\n15000000000", "77777777777777777\n555555555555\n3333333333333\n222222222222", "1000000000000000000\n999999999999999999\n100000000000000000\n50000000000000000", "500\n30\n50\n40"]}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "testcase": ["1 0", "0 1", "500000 500000", "1000000 0", "0 1000000", "250000 750000", "999999 1", "1 999999", "750000 250000", "123456 876544"]}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "testcase": ["1 1 1", "500 500 500", "250 400 300", "100 35 200", "300 450 250", "450 50 475", "10 20 30", "123 321 231", "300 100 400", "75 225 50"]}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2.10^18) --- the power in which you need to raise number 5.", "testcase": ["2", "10", "25", "100", "1000", "500000", "99999999999", "5000000000000000", "200000000000000000", "2100000000000000000"]}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "testcase": ["10 20 150", "1 1 50", "100 100 10000", "5 7 300", "50 30 5000", "75 25 750", "12 8 120", "33 67 5000", "45 90 9000", "2 4 1000"]}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["2 0", "5 0", "10 8", "100 36", "1234567890 987654321", "1000000000000 500000000000", "999999999999 888888888888", "314159265358 271828182845", "1000000000000 0", "999999999999 1"]}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "testcase": ["a", "Z1.", "Hello.World123", "2023", "abcXYZ123", "QWERTYUIOPLKJHGFDSAZXCVBNM098.7654", "1234567890abcdEFGHIJKLmnopqrstu.", "dot.in.the.middle", "long.string.with.many.chars1234567890", "abcdefghijklmnopqrstuvwxyz1234567890A.B."]}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "testcase": ["0 0 0 0 0 0", "1000 1000 1000 1000 1000 1000", "123 456 789 101 112 131", "999 888 777 666 555 444", "321 654 987 123 456 789", "500 500 500 500 500 500", "250 750 250 750 250 750", "600 400 200 800 1000 0", "111 222 333 444 555 666", "10 20 30 40 50 60"]}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <=10^9) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "testcase": ["1000000000 500000000 -50000000", "-109 0 109", "0 -1000000000 5", "109 109 109", "-1000000000 1000000000 -1000000", "3 -3 0", "-50 -50 -1", "200000000 -200000000 2", "999999999 0 -9", "-123456789 987654321 123456789"]}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "testcase": ["1 2 3 4 5", "10 20 30 40 50", "100 99 98 97 96", "23 45 67 89 11", "55 66 77 88 99", "15 25 35 45 55", "5 10 15 20 25", "78 84 21 29 34", "9 8 7 6 5", "50 60 70 80 90"]}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <=10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.", "testcase": ["1", "15", "100", "999", "10000", "500000", "1000000000", "9999999999999", "1000000000000000", "123456789012345"]}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "testcase}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "testcase": ["1", "10", "100", "999", "5000", "100000", "9999999", "250000000", "987654321", "1000000000"]}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "testcase": ["1", "2 1 2", "3 1 2 1 3", "4 1 2 1 3 1 4", "5 1 2 1 3 3 4 3 5", "6 1 2 2 3 2 4 4 5 4 6", "7 1 2 1 3 2 4 2 5 1 6 6 7", "8 1 2 2 3 3 4 3 5 1 6 6 7 7 8", "9 1 2 1 3 2 4 2 5 5 6 6 7 3 8 6 9", "10 1 2 1 3 2 4 2 5 5 6 6 7 3 8 4 9 9 10"]}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "testcase": ["1\n0", "5\n1 0 2 3 1", "3\n3 3 3", "10\n1 2 3 0 0 2 1 0 3 2", "8\n0 1 2 0 1 3 3 0", "6\n0 0 0 1 2 3", "4\n2 2 2 2", "7\n3 3 0 3 1 0 2", "2\n1 2", "9\n1 0 0 0 3 2 1 2 1"]}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "testcase": ["0 0 0 0", "109 0 0 0", "123456789 987654321 0 123456789", "1000000000 1000000000 1000000000 1000000000", "1 2 3 4", "0 1 1 0", "500 600 700 800", "999999999 1000000 999999999 0", "100 100 100 100", "0 0 0 1"]}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <=10^7, 1 <= x, y <=10^9) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "testcase": ["1 1 1", "10 1000000 999999999", "9999999 500000000 123456789", "10000000 1000000000 1000000000", "1234567 333333333 666666666", "7654321 111111111 222222222", "5000000 700000000 800000000", "3456789 900000000 100000000", "9876543 555555555 444444444", "8765431 10000000 99999999"]}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <=10^9, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <=10^9). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "testcase": ["5 6 10 0 4\n0 1 2\n1 2 3\n2 4 3\n0 3 0\n3 4 1\n0 2 1", "3 3 5 1 2\n1 0 0\n0 2 5\n1 2 0", "4 5 7 0 3\n0 1 1\n1 2 2\n2 3 4\n0 2 0\n1 3 0", "6 7 15 5 0\n5 4 0\n4 3 5\n3 2 5\n2 1 0\n1 0 0\n5 3 0\n3 0 8", "7 8 12 0 6\n0 1 1\n1 2 1\n2 3 1\n3 4 1\n4 5 3\n5 6 5\n0 3 4\n2 5 0", "8 9 18 0 7\n0 1 2\n1 2 3\n2 3 4\n3 4 5\n4 5 0\n5 6 2\n6 7 2\n0 2 0\n3 6 1", "10 11 25 0 9\n0 1 4\n1 2 5\n2 3 6\n3 4 7\n4 5 8\n5 6 0\n6 7 2\n7 8 3\n8 9 1\n0 5 0\n4 9 1", "6 9 20 1 5\n1 0 0\n1 2 2\n2 3 0\n3 4 7\n4 5 3\n0 3 1\n3 5 0\n2 5 6\n1 4 8", "5 5 10 2 4\n2 1 2\n1 0 5\n0 3 1\n3 4 2\n2 3 0", "12 15 30 3 11\n3 0 3\n0 1 5\n1 2 0\n2 4 4\n4 5 5\n5 6 6\n6 7 0\n7 8 1\n8 9 2\n9 10 0\n10 11 3\n4 7 0\n7 11 6\n3 8 0\n5 9 5"]}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <=10^9) --- the number which Vasily has and the number he wants to have.", "testcase": ["1 2", "999999 1000000", "500000 1000000000", "345678 987654321", "12345678 87654321", "102030 201040", "123 456", "98765432 98765433", "234567891 987654322", "1000000 1000001"]}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <=10^9, 1 <= di <= 5.10^6), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "testcase": ["1\n1000000000 5100000", "2\n1 1\n1000000000 5", "3\n999999999 5000000\n500000000 4000000\n10000000 3000000", "4\n1 2\n2 3\n3 4\n4 5", "5\n200 5\n1000 100\n500 50\n900 10\n800 200", "6\n1000000 1\n999999999 5100000\n123456789 100000\n987654321 200000\n555555555 300000\n333333333 400000", "7\n10 10\n20 20\n30 30\n40 40\n50 50\n60 60\n70 70", "8\n100 100\n200 200\n300 300\n400 400\n500 500\n600 600\n700 700\n800 800", "9\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9", "10\n15 5\n25 4\n35 3\n45 2\n55 1\n65 5\n75 4\n85 3\n95 2\n105 1"]}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "testcase": ["HELLO", "WORLD", "ALPHABETSOUP", "PYTHONIST", "DATA", "SCIENCE", "PROGRAMMING", "CHALLENGE", "AI", "DEEPLEARNING"]}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "testcase": ["2", "1000000000", "2100000000", "250000000", "1999999999", "2000000000", "987654321", "1111111111", "1500000000", "2050000000"]}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <=10^9).", "testcase": ["0", "1", "10", "100", "1000", "999999999", "500000000", "250000000", "123456789", "987654321"]}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "testcase": ["1 1 1", "500 500 500", "1000 1000 1000", "1 1000 1000", "1000 1 1", "250 750 999", "999 750 250", "100 200 300", "300 200 100", "123 456 789"]}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <=10^6.", "testcase": ["2 2", "10 10", "1000000 1000000", "500000 500000", "999999 1000000", "1000000 999999", "2 1000000", "1000000 2", "123456 654321", "999998 999999"]}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "testcase": ["1\n0", "2\n1 1000000", "10\n500 500 500 500 500 500 500 500 500 500", "5\n0 0 0 0 1000000", "100\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000 27000 28000 29000 30000 31000 32000 33000 34000 35000 36000 37000 38000 39000 40000 41000 42000 43000 44000 45000 46000 47000 48000 49000 50000 51000 52000 53000 54000 55000 56000 57000 58000 59000 60000 61000 62000 63000 64000 65000 66000 67000 68000 69000 70000 71000 72000 73000 74000 75000 76000 77000 78000 79000 80000 81000 82000 83000 84000 85000 86000 87000 88000 89000 90000 91000 92000 93000 94000 95000 96000 97000 98000 99000 1000000", "3\n1000000 1000000 500000", "6\n100 200 300 400 500 600", "8\n999999 1 1000000 1 999999 1 1000000 1", "50\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "4\n987654 123456 234567 345678"]}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <=10^9, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "testcase": ["1 1 1", "10 10 5", "100 100 50", "5 15 3", "999999999 1000000000 500000000", "3 5 2", "50 100 25", "1000000000 1000000000 1", "7 7 4", "20 35 20"]}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "testcase": ["3 1 1 2", "5 6 2 3 1 8", "10 10 9 8 7 6 5 4 3 2 1", "6 1 1000000000 500000000 200000000 100000000 99999999", "4 123 456 789 101", "8 7 7 8 8 7 7 8 7", "7 1000000000 999999999 999999998 1 2 3 4", "3 999999999 999999998 999999997", "9 9 9 8 9 9 8 9 9 8", "12 13456 23456 34567 45678 56789 67890 78901 89012 90123 101234 111345 121456"]}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "testcase": ["1", "23", "456", "7890", "12345", "678901", "2345678", "90123456", "987654321", "1234567890"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "1 2", "2 3", "3 4", "4 5", "5 6", "6 7", "7 8", "8 9", "9 10"]}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "testcase": ["15 10", "100000 5", "2 1", "99999 20", "50000 10", "2500 15", "12345 12", "87654 18", "54321 19", "10000 7"]}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "testcase": ["a", "OpenAI", "test", "abcdefghijklm", "12345", "Python3", "x", "helloWorld", "function", "QWERTYUIOPLKJH"]}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "2", "10", "50", "100", "500", "1000", "2000", "50000", "100000"]}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <=10^9).", "testcase": ["2 2", "2 100", "500 1000", "9999999 10000000", "214748364 214748365", "100000 1000000", "123 456789000", "100000000 200000000", "987654322 987654323", "999999998 1000000000"]}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "5", "10", "100", "1000", "54321", "99999", "100000", "23456", "87654"]}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <=10^9, min(A, B) <= 12).", "testcase": ["1 2", "3 4", "5 6", "7 8", "9 10", "11 12", "12 1", "10 12", "12 8", "8 5"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["100 5 10 2 3", "250 20 15 4 5", "500 25 25 10 10", "300 12 9 8 6", "400 7 3 9 5", "800 6 7 11 13", "1000 30 40 15 20", "600 11 14 8 12", "750 13 11 6 10", "200 9 8 4 2"]}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <=10^6 --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <=10^9).", "testcase": ["1\n0", "5\n0 1 2 3 4", "10\n10 9 8 7 6 5 4 3 2 1", "3\n1000000000 500000000 999999999", "7\n7 14 28 56 112 224 448", "6\n123456789 987654321 1000000000 123123123 456456456 789789789", "2\n2 0", "4\n1 10 100 1000", "9\n0 0 0 0 0 0 0 0 0", "10\n10 20 30 40 50 60 70 80 90 100"]}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <=10^9, 0 <= k <= n).", "testcase": ["1 0", "10 5", "1000000000 0", "100 100", "500000000 250000000", "999999999 999999999", "123456789 0", "2 1", "123456789 123456789", "1000000000 1"]}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <=10^9, 1 <= k <=10^4) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "testcase": ["1000 1000000000 500 10", "500000 500000000 250000 3", "1 1 0 1", "999999 10 1 10000", "2000 1000000000 1999 5", "400000 1000000000 200000 150", "50 500000000 25 100", "9999 1000000000 5000 2000", "1000000 1 999999 1", "123456 1000 65432 321"]}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <=10^5, 1 <= S <=10^5), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <=10^5, 1 <= ai <=10^5, 1 <= bi <=10^5), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "testcase": ["1 5\n3 4 6", "2 10\n4 5 7\n5 8 3", "3 15\n7 2 9\n5 3 5\n10 1 6", "4 8\n2 7 4\n8 4 5\n3 9 10\n6 8 4", "5 20\n6 5 8\n9 6 4\n12 8 7\n3 9 5\n5 7 6", "6 25\n5 5 7\n10 7 3\n8 8 8\n6 6 6\n9 9 5\n11 4 10", "7 30\n10 6 5\n5 4 8\n7 5 9\n6 6 7\n8 8 6\n9 5 5\n4 10 10", "8 50\n20 5 5\n15 8 6\n10 4 9\n5 6 3\n8 9 8\n12 7 7\n7 5 4\n3 3 10", "9 45\n5 4 3\n12 6 9\n7 8 10\n9 3 6\n5 7 8\n6 8 4\n11 5 3\n4 9 9\n10 10 2", "10 100\n15 7 7\n17 8 9\n20 9 10\n14 10 8\n13 5 6\n11 4 7\n9 6 5\n10 7 3\n8 3 4\n12 10 1"]}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <=10^6.", "testcase": ["1 2", "100 101", "500000 500001", "999999 1000000", "123456 654321", "345678 876543", "987654 456789", "11111 22222", "333333 444444", "100000 999999"]}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <=10^5).", "testcase": ["1 ", "10 ", "99999 ", "50000 ", "12345 ", "100000 ", "54321 ", "100 ", "25000 ", "98765 "]}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2.10^5) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2.10^5) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "testcase": ["1\n0", "10\n1 2 3 4 5 6 7 8 9 10", "15\n15 15 10 1 5 7 9 2 6 14 13 8 11 3 4", "5\n100 0 100 0 100", "6\n200000 1 199999 2 199998 3", "3\n5 5 5", "8\n7 11 13 14 0 1 12 9", "20\n1 0 3 5 3 1 0 2 4 6 8 7 9 10 11 12 13 14 15 16", "12\n200000 100000 150000 0 50000 200000 100000 150000 0 50000 200000 0", "2\n200000 0"]}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "testcase": ["2 1 3", "5 3 3 1 2 1", "10 2 2 3 3 3 2 1 1 1 3", "1 1", "6 1 2 1 2 1 3", "3 2 2 2", "7 3 2 1 1 1 2 3", "4 3 3 3 3", "8 1 1 1 1 2 2 2 2", "9 3 3 2 2 1 1 3 3 1"]}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "testcase": ["5\n10\n20\n30\n40\n50", "3\n1\n2\n3", "7\n100\n99\n98\n97\n96\n95\n94", "6\n11\n22\n33\n44\n55\n66", "4\n25\n50\n75\n100", "10\n5\n10\n15\n20\n25\n30\n35\n40\n45\n50", "9\n88\n77\n66\n55\n44\n33\n22\n11\n10", "2\n42\n24", "8\n8\n16\n24\n32\n40\n48\n56\n64", "1\n100"]}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "testcase": ["1", "50", "100", "25", "60", "75", "5", "99", "30", "10"]}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["112233445566778899 2", "999999999999999999 2000", "123456789012345678 100", "1000000000000000000 1999", "876543210987654321 500", "585858585858585858 1800", "987654321098765432 1500", "5432109876543210 1000", "111111111111111111 900", "222222222222222222 250"]}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "testcase": ["1\n0 0 1", "2\n-5 -5 3\n5 5 2", "3\n10 10 4\n-10 -10 5\n0 0 3", "2\n3 4 2\n-3 -4 2", "1\n0 -10 9", "3\n1 1 1\n2 2 2\n3 3 3", "2\n-10 0 7\n10 0 2", "1\n-1 -1 6", "3\n0 0 10\n-10 9 1\n9 -10 5", "2\n5 5 3\n-5 -5 8"]}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "1000000000000000000 2000", "500000000000000000 1999", "123456789012345678 1500", "999999999999999999 3", "987654321098765432 1800", "555555555555555555 1000", "111111111111111111 2222", "777777777777777777 999", "333333333333333333 250"]}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "testcase": ["3\n0 150 0", "5\n300 100 200 100 600", "4\n0 0 10 0", "10\n0 0 0 50 0 0 0 0 0 100", "1\n600", "3\n0 60 0", "7\n0 0 0 0 75 0 0", "6\n10 20 30 40 50 0", "2\n0 500", "8\n60 0 70 0 80 0 0 0"]}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "testcase": ["0 0 0", "50 50 50", "100 100 100", "0 100 50", "100 0 50", "25 75 0", "75 25 0", "10 10 80", "0 0 100", "100 100 0"]}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <=10^12), the number of vertices in the graph.", "testcase": ["2", "100", "9999", "50000000", "123456789", "100000000000", "100000000001", "987654321012", "900000000000", "1000000000000"]}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "testcase": ["1 1", "1000000000 1000000000", "500000000 500000000", "1 1000000000", "1000000000 1", "123456789 987654321", "214748364 214748364", "999999999 999999999", "54321 12345", "888888888 111111111"]}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "testcase": ["1", "10", "500", "1000", "2999", "345678", "123456789", "999999999", "250000000", "500000000"]}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "testcase": ["1 1\n1", "10 50\n10 20 30 40 50 60 70 80 90 100", "5 5\n5 5 5 5 5", "3 75\n50 80 100", "7 10\n3 6 9 10 12 15 18", "2 100\n1 100", "4 25\n10 20 25 30", "6 35\n35 34 33 32 31 30", "8 88\n88 77 66 55 44 33 22 11", "5 55\n56 55 54 53 52"]}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "testcase": ["ROYGBV", "VBGYOR", "ROYROY", "GYBVOR", "VVVVVV", "OOOYYY", "GRBOYV", "RRGGBB", "YVOVGB", "BYRRVG"]}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "testcase": ["1 1", "6 6", "3 5", "4 2", "2 3", "5 1", "6 4", "3 3", "2 6", "5 4"]}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <=10^6.", "testcase": ["5\n3\n7\n5\n6\n4", "10\n1000000\n999999\n999998\n999997\n999996\n999995\n999994\n999993\n999992\n999991", "2\n1\n1000000", "6\n10\n20\n30\n40\n50\n60", "3\n30000\n25000\n20000", "4\n5\n5\n5\n5", "8\n123456\n345678\n789012\n456789\n987654\n210123\n543210\n678901", "2\n999999\n1", "7\n6\n1\n2\n3\n4\n5\n6", "9\n8\n8\n8\n8\n8\n8\n8\n8\n8"]}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "testcase": ["hello\\nworld", "abc\\ndef", "123\\n456", "!!!\\n&&&", "test\\ncase", "foo\\nbar", "abcd\\nefgh", "java\\nscript", "one\\ntwo", "line\\nbyline"]}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "testcase": ["3\\n5\\n10\\n15", "5\\n1\\n2\\n3\\n4\\n5", "1\\n100", "4\\n7\\n8\\n9\\n10", "6\\n-1\\n-2\\n-3\\n-4\\n-5\\n-6", "2\\n42\\n24", "8\\n15\\n15\\n15\\n15\\n15\\n15\\n15\\n15", "10\\n-9\\n0\\n9\\n-8\\n8\\n-7\\n7\\n-6\\n6\\n5", "7\\n11\\n22\\n33\\n44\\n55\\n66\\n77", "5\\n123\\n456\\n789\\n101\\n112"]}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "testcase": ["5\n1 2 3 4 5", "3\n10 20 30", "7\n6 5 4 3 2 1 0", "1\n100", "4\n9 8 7 6", "8\n11 12 13 14 15 16 17 18", "2\n99 100", "6\n21 22 23 24 25 26", "10\n10 20 30 40 50 60 70 80 90 100", "3\n7 8 9"]}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n <= 20\n* q <= 200\n* 1 <= elements in A <= 2000\n* 1 <= Mi <= 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "testcase": ["5 1 2 3 4 5 3 10 20 30", "10 100 200 300 400 500 600 700 800 900 1000 5 5 15 25 35 45", "2 2000 1999 1 1", "15 150 300 450 600 750 900 1050 1200 1350 1500 1650 1800 1950 2000 5 7 17 77 177 777", "4 1 1 1 1 2 2000 2000", "6 5 10 15 20 25 30 6 100 200 300 400 500 600", "3 500 1000 1500 3 300 600 900", "20 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 4 1234 567 89 1000", "1 2000 3 1000 1500 2000", "8 200 400 600 800 1000 1200 1400 1600 4 5 10 15 20"]}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "testcase": ["3 50\n60 10 5\n100 20 2\n120 30 3", "4 100\n90 40 2\n80 35 3\n70 25 4\n50 15 5", "5 200\n100 50 10\n200 80 5\n150 60 8\n180 75 3\n110 40 7", "2 75\n85 25 2\n60 30 3", "1 10\n30 5 1", "6 150\n55 20 1\n45 15 2\n85 35 4\n60 25 1\n95 40 3\n75 30 2", "3 120\n110 50 3\n50 20 4\n70 30 2", "5 250\n120 100 6\n110 90 5\n130 110 4\n80 70 3\n140 120 2", "4 30\n25 10 2\n30 15 1\n20 5 3\n15 3 1", "2 500\n300 120 20\n250 100 15"]}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 <= S <= 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "testcase": ["0", "1", "43200", "86400", "1000", "3600", "7200", "1800", "80000", "12345"]}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "testcase": ["The quick brown fox jumps over the lazy dog.", "Artificial intelligence is transforming the way we live and work.", "In the midst of chaos, there is also opportunity.", "The rain in Spain stays mainly in the plain.", "To be or not to be, that is the question.", "She sells seashells by the seashore.", "All that glitters is not gold.", "A journey of a thousand miles begins with a single step.", "The only thing we have to fear is fear itself.", "The pen is mightier than the sword."]}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 <= X <= 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["-40", "-20", "0", "15", "25", "35", "40", "5", "-10", "30"]}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 <= X <= 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["400", "550", "777", "1000", "1500", "1800", "1999", "1200", "1450", "1750"]}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 <= N <= 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "100", "500", "999", "1000", "2500", "5000", "7500", "9999", "10000"]}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 <= K <= N <= 1000\n* 1 <= p_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "testcase": ["5 3\n500 300 800 700 600", "10 1\n1000 1 100 200 300 400 500 600 700 800", "15 15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "20 10\n900 800 700 600 500 400 300 200 100 50 150 250 350 450 550 650 750 850 950 1000", "2 2\n2 1", "1000 1000\n", "{0} ", " .format( ' '.join(map(str,  رہ        Ra       Rd.        Rd.       Rd.          Rd.          Rd.", "range(1000, 0, -1) ) ))", "3 2\n1 500 1000", "50 25\n", "{0} ", " .format( ' '.join(map(str, [i for i in range(1, 51)])) )", "100 50\n", "{0} ", " .format( ' '.join(map(str, [100 - i if i % 2 == 0 else i for i in range(100)])) )", "500 250\n", "{0} ", " .format( ' '.join(map(str, [i % 1000 + 1 for i in range(500)])) )"]}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "500", "999", "250", "740", "10", "85", "678", "321", "888"]}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 <= N, M <= 1000\n* A_i < B_i\\ (1 <= i <= N)\n* E_j < F_j\\ (1 <= j <= M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "testcase": ["1 1\n1 2 3\n4 5 6", "2 2\n-100 0 10\n-50 -20 30\n3 4 5\n10 20 25", "1 1\n-999999999 0 999999999\n-1000000000 -500000000 500000000", "3 3\n1 2 3\n3 4 5\n-10 -5 0\n-5 -4 -3\n0 2 3\n2 3 4", "5 3\n-1000 -900 -800\n-999 -888 -777\n10 20 30\n500 600 700\n-10 0 100\n-20 -10 0\n0 1 2", "1 4\n-999998 -999997 -999996\n99999 100000 100001\n100 101 102\n0 100 200\n-100000000 1 2\n", "2 3\n0 1 2\n2 3 4\n-1 0 1\n1 2 3\n4 5 6", "3 2\n-500000000 -400000000 -300000000\n400000000 500000000 600000000\n700000000 800000000 900000000\n-1000000000 -900000000 -800000000\n200 300 400", "4 5\n0 100 200\n1 101 201\n2 102 202\n3 103 203\n99 199 299\n100 200 300\n101 201 301\n102 202 302\n103 203 303", "5 5\n-10 -5 1\n0 1 2\n3 4 5\n6 7 8\n9 10 11\n100 200 300\n-20000000 -10000000 0\n-9 -8 -7\n12 13 14\n1000000000 1000000001 1000000002"]}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 1000\n* 1 <= K <= 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "testcase": ["3\n1 3", "7\n20 50", "10\n5 100", "25\n25 25", "2\n3 1000", "99\n500 900", "1\n1 1", "1000\n1000 1000", "123\n123 456", "58\n58 1000"]}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 <= A <= 10^{6}\n* 1 <= B <= 10^{12}\n* 1 <= N <= 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "testcase": ["1 1 1", "1000000 1000000000000 1000000000000", "500000 999999999999 500000000000", "250000 500000000000 3000000", "800000 1000000000000 750000000000", "999999 250000000000 1000000000000", "1000000 1 1", "123456 789012345678 999999999999", "987654 234567890123 345678901234", "246810 100010001000 800080008000"]}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* 1 <= K <= N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "testcase": ["1 2", "100000 99999", "200000 200001", "150000 150000", "23456 23457", "1 1", "2 2", "199999 200000", "54321 54322", "200000 1"]}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 <= M <= N <= 100\n* 1 <= A_i <= 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "testcase": ["10 5\n100 200 300 400 500 600 700 800 900 1000", "15 15\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15", "20 10\n20 40 60 80 100 120 140 160 180 200 220 240 260 280 300 320 340 360 380 400", "25 20\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125", "30 25\n1 101 201 301 401 501 601 701 801 901 2 102 202 302 402 502 602 702 802 902 3 103 203 303 403 503 603 703 803 903", "50 50\n1 3 5 7 9 11 13 15 17 19 21 23 25 27 29 31 33 35 37 39 41 43 45 47 49 51 53 55 57 59 61 63 65 67 69 71 73 75 77 79 81 83 85 87 89 91 93 95 97 99", "75 30\n5 10 15 20 25 30 35 40 45 50 55 60 65 70 75 80 85 90 95 100 105 110 115 120 125 130 135 140 145 150 155 160 165 170 175 180 185 190 195 200 205 210 215 220 225 230 235 240 245 250 255 260 265 270 275 280 285 290 295 300 305 310 315 320 325 330 335 340 345 350 355", "80 40\n4 8 12 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120 124 128 132 136 140 144 148 152 156 160 164 168 172 176 180 184 188 192 196 200 204 208 212 216 220 224 228 232 236 240 244 248 252 256 260 264 268 272 276 280 284 288 292 296 300", "90 80\n5 105 205 305 405 505 605 705 805 905 10 110 210 310 410 510 610 710 810 910 15 115 215 315 415 515 615 715 815 915 20 120 220 320 420 520 620 720 820 920 25 125 225 325 425 525 625 725 825 925 30 130 230 330 430 530 630 730 830 930 35 135 235 335 435 535 635 735 835 935 40 140 240 340 440 540 640 740 840 940", "100 99\n2 4 6 8 10 12 14 16 18 20 22 24 26 28 30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70 72 74 76 78 80 82 84 86 88 90 92 94 96 98 100 102 104 106 108 110 112 114 116 118 120 122 124 126 128 130 132 134 136 138 140 142 144 146 148 150 152 154 156 158 160 162 164 166 168 170 172 174 176 178 180 182 184 186 188 190 192 194 196"]}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 <= X <= 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "1", "10", "100", "1000", "500000000", "999999999", "1000000000", "2147483647", "987654321"]}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "testcase": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "y"]}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 <= K <= 100\n* 1 <= X <= 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "testcase": ["1 1", "100 100000", "50 50000", "25 25000", "75 75000", "99 99999", "10 1000", "45 45000", "5 12345", "33 33333"]}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 <= X <= 10^6\n* 1 <= Y <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 1", "1000000 1000000", "54321 12345", "999999 1000000", "1 1000000", "1000000 1", "500000 500000", "123456 654321", "234567 89012", "876543 234567"]}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 <= |S| <= 100\n* S consists of lowercase English letters.\n* 1 <= K <= 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "testcase": ["a 1", "abc 5", "z 1000000000", "abcdefghijklmnopqrstuvwxyz 10", "mnopqr 123456789", "aaaaa 999999999", "abcedfghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxy 721", "aabbccddeeffgghh 2500000", "zyxwvutsrqponmlkjihgfedcba 1234567", "helloworld 987654321"]}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= K <= 500\n* 1 <= h_i <= 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "testcase": ["5 10 300 450 200 150 250", "10 100 100 200 150 250 300 350 400 450 500 100", "15 250 50 100 150 200 250 300 350 400 450 50 100 200 300 400 500", "3 2 1 2 3", "6 500 500 400 300 200 100 50", "20 1 10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200", "1 500 500", "4 5 100 200 300 400", "8 50 10 20 30 40 50 60 70 80", "2 10 30 25"]}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 <= N <= 100\n* -1 \\ 000 \\ 000 <= x_i <= 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 <= y_i <= 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "testcase": ["5\n0 0\n-1000000 1000000\n500000 -500000\n123456 654321\n-999999 999999", "10\n1000000 -1000000\n-2000000 2000000\n-999999 -999999\n500 500\n0 500000\n-1 -1\n999999 1\n2 999999\n400000 -400000\n222222 -222222", "1\n0 0", "3\n100 200\n-300 -400\n500000 600000", "7\n-1 999999\n888 777\n666 555\n444 333\n222 111\n1000000 -1000000\n-500000 500000", "2\n123456 654321\n-31415 27182", "4\n-1000000 -1000000\n1000000 1000000\n0 0\n5 -5", "6\n999999 123456\n-65432 65432\n123456 -123456\n0 1000\n-777777 777777\n345 678", "8\n-888888 888888\n111111 -111111\n-2222 2222\n3333 -3333\n4444 5555\n666 -777\n888 -999\n0 0", "10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n-10 -10"]}
{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 <= N <= 2 * 10^5\n* 1 <= Q <= 2 * 10^5\n* 1 <= a_i < b_i <= N\n* 1 <= p_j <= N\n* 1 <= x_j <= 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "testcase": ["2 1\\n1 2\\n1 1000", "3 2\\n1 2\\n1 3\\n2 5000\\n3 1000", "5 3\\n1 2\\n2 3\\n3 4\\n4 5\\n1 400\\n3 600\\n5 800", "10 5\\n1 2\\n1 3\\n3 4\\n3 5\\n5 6\\n2 7\\n7 8\\n8 9\\n9 10\\n2 200\\n5 500\\n10 300\\n6 250\\n5 800", "7 4\\n1 2\\n1 3\\n2 4\\n2 5\\n3 6\\n3 7\\n4 1000\\n6 700\\n2 500\\n7 300", "4 2\\n1 2\\n2 3\\n2 4\\n3 1000\\n1 500", "6 3\\n1 2\\n1 3\\n3 4\\n4 5\\n4 6\\n2 900\\n6 200\\n5 1000", "15 7\\n1 2\\n1 3\\n1 4\\n2 5\\n2 6\\n3 7\\n7 8\\n8 9\\n8 10\\n4 11\\n11 12\\n12 13\\n13 14\\n14 15\\n5 1500\\n10 300\\n11 400\\n6 700\\n15 300\\n3 1000\\n1 200", "20 10\\n1 2\\n1 3\\n1 4\\n4 5\\n4 6\\n2 7\\n2 8\\n3 9\\n3 10\\n10 11\\n11 12\\n12 13\\n5 14\\n14 15\\n15 16\\n16 17\\n17 18\\n18 19\\n19 20\\n3 100\\n7 200\\n20 150\\n15 400\\n11 250\\n6 450\\n12 350\\n5 300\\n8 900\\n10 500", "30 15\\n1 2\\n1 3\\n3 4\\n4 5\\n4 6\\n5 7\\n7 8\\n7 9\\n9 10\\n2 11\\n11 12\\n11 13\\n12 14\\n6 15\\n15 16\\n16 17\\n18 19\\n19 20\\n20 21\\n21 22\\n22 23\\n10 24\\n24 25\\n25 26\\n26 27\\n27 28\\n28 29\\n29 30\\n10 50\\n20 150\\n21 300\\n4 450\\n14 250\\n3 800\\n11 900\\n28 600\\n18 400\\n5 500\\n15 200\\n30 700\\n26 300\\n1 100\\n23 900"]}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= H_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "testcase": ["1\n1000000000", "5\n1 1 1 1 1", "3\n5000000 1000000 300000000", "4\n999999999 837465829 123456789 987654321", "10\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 1000000000", "2\n15 1000000000", "6\n9 8 7 6 5 4", "1\n1", "7\n123456 654321 11111111 99999999 1234321 9877898 6789909", "8\n987654321 23456789 87654321 34567890 76543210 4567890 6543210 123456789"]}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "testcase": ["1\n0", "1\n1000000000", "10\n0\n1\n2\n3\n4\n5\n6\n7\n8\n9", "5\n999999999\n888888888\n777777777\n666666666\n555555555", "3\n123\n456\n789", "4\n100000\n200000\n300000\n400000", "2\n1000000000\n0", "7\n123456789\n987654321\n111111111\n222222222\n333333333\n444444444\n555555555", "6\n999999999\n1\n999999998\n2\n999999997\n3", "10\n100000000\n200000000\n300000000\n400000000\n500000000\n600000000\n700000000\n800000000\n900000000\n1000000000"]}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= A_i,B_i <= N (1<= i<= M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "testcase": ["2 1\n1 2", "5 5\n1 2\n2 3\n3 4\n4 5\n5 1", "10 15\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n4 9\n4 10\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1", "15 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15", "20 19\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20", "30 45\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 11\n8 12\n9 13\n10 14\n11 15\n12 16\n13 17\n14 18\n15 19\n16 20\n17 21\n18 22\n19 23\n20 24\n21 25\n22 26\n23 27\n24 28\n25 29\n26 30\n27 28\n28 29\n29 30\n1 15\n5 20\n10 25\n20 30\n1 30", "50 49\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50", "100 99\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100", "1000 999\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n100 101\n101 102\n102 103\n103 104\n104 105\n105 106\n106 107\n107 108\n108 109\n109 110\n110 111\n111 112\n112 113\n113 114\n114 115\n115 116\n116 117\n117 118\n118 119\n119 120\n120 121\n121 122\n122 123\n123 124\n124 125\n125 126\n126 127\n127 128\n128 129\n129 130\n130 131\n131 132\n132 133\n133 134\n134 135\n135 136\n136 137\n137 138\n138 139\n139 140\n140 141\n141 142\n142 143\n143 144\n144 145\n145 146\n146 147\n147 148\n148 149\n149 150\n150 151\n151 152\n152 153\n153 154\n154 155\n155 156\n156 157\n157 158\n158 159\n159 160\n160 161\n161 162\n162 163\n163 164\n164 165\n165 166\n166 167\n167 168\n168 169\n169 170\n170 171\n171 172\n172 173\n173 174\n174 175\n175 176\n176 177\n177 178\n178 179\n179 180\n180 181\n181 182\n182 183\n183 184\n184 185\n185 186\n186 187\n187 188\n188 189\n189 190\n190 191\n191 192\n192 193\n193 194\n194 195\n195 196\n196 197\n197 198\n198 199\n199 200\n200 201\n201 202\n202 203\n203 204\n204 205\n205 206\n206 207\n207 208\n208 209\n209 210\n210 211\n211 212\n212 213\n213 214\n214 215\n215 216\n216 217\n217 218\n218 219\n219 220\n220 221\n221 222\n222 223\n223 224\n224 225\n225 226\n226 227\n227 228\n228 229\n229 230\n230 231\n231 232\n232 233\n233 234\n234 235\n235 236\n236 237\n237 238\n238 239\n239 240\n240 241\n241 242\n242 243\n243 244\n244 245\n245 246\n246 247\n247 248\n248 249\n249 250\n250 251\n251 252\n252 253\n253 254\n254 255\n255 256\n256 257\n257 258\n258 259\n259 260\n260 261\n261 262\n262 263\n263 264\n264 265\n265 266\n266 267\n267 268\n268 269\n269 270\n270 271\n271 272\n272 273\n273 274\n274 275\n275 276\n276 277\n277 278\n278 279\n279 280\n280 281\n281 282\n282 283\n283 284\n284 285\n285 286\n286 287\n287 288\n288 289\n289 290\n290 291\n291 292\n292 293\n293 294\n294 295\n295 296\n296 297\n297 298\n298 299\n299 300\n300 301\n301 302\n302 303\n303 304\n304 305\n305 306\n306 307\n307 308\n308 309\n309 310\n310 311\n311 312\n312 313\n313 314\n314 315\n315 316\n316 317\n317 318\n318 319\n319 320\n320 321\n321 322\n322 323\n323 324\n324 325\n325 326\n326 327\n327 328\n328 329\n329 330\n330 331\n331 332\n332 333\n333 334\n334 335\n335 336\n336 337\n337 338\n338 339\n339 340\n340 341\n341 342\n342 343\n343 344\n344 345\n345 346\n346 347\n347 348\n348 349\n349 350\n350 351\n351 352\n352 353\n353 354\n354 355\n355 356\n356 357\n357 358\n358 359\n359 360\n360 361\n361 362\n362 363\n363 364\n364 365\n365 366\n366 367\n367 368\n368 369\n369 370\n370 371\n371 372\n372 373\n373 374\n374 375\n375 376\n376 377\n377 378\n378 379\n379 380\n380 381\n381 382\n382 383\n383 384\n384 385\n385 386\n386 387\n387 388\n388 389\n389 390\n390 391\n391 392\n392 393\n393 394\n394 395\n395 396\n396 397\n397 398\n398 399\n399 400\n400 401\n401 402\n402 403\n403 404\n404 405\n405 406\n406 407\n407 408\n408 409\n409 410\n410 411\n411 412\n412 413\n413 414\n414 415\n415 416\n416 417\n417 418\n418 419\n419 420\n420 421\n421 422\n422 423\n423 424\n424 425\n425 426\n426 427\n427 428\n428 429\n429 430\n430 431\n431 432\n432 433\n433 434\n434 435\n435 436\n436 437\n437 438\n438 439\n439 440\n440 441\n441 442\n442 443\n443 444\n444 445\n445 446\n446 447\n447 448\n448 449\n449 450\n450 451\n451 452\n452 453\n453 454\n454 455\n455 456\n456 457\n457 458\n458 459\n459 460\n460 461\n461 462\n462 463\n463 464\n464 465\n465 466\n466 467\n467 468\n468 469\n469 470\n470 471\n471 472\n472 473\n473 474\n474 475\n475 476\n476 477\n477 478\n478 479\n479 480\n480 481\n481 482\n482 483\n483 484\n484 485\n485 486\n486 487\n487 488\n488 489\n489 490\n490 491\n491 492\n492 493\n493 494\n494 495\n495 496\n496 497\n497 498\n498 499\n499 500\n500 501\n501 502\n502 503\n503 504\n504 505\n505 506\n506 507\n507 508\n508 509\n509 510\n510 511\n511 512\n512 513\n513 514\n514 515\n515 516\n516 517\n517 518\n518 519\n519 520\n520 521\n521 522\n522 523\n523 524\n524 525\n525 526\n526 527\n527 528\n528 529\n529 530\n530 531\n531 532\n532 533\n533 534\n534 535\n535 536\n536 537\n537 538\n538 539\n539 540\n540 541\n541 542\n542 543\n543 544\n544 545\n545 546\n546 547\n547 548\n548 549\n549 550\n550 551\n551 552\n552 553\n553 554\n554 555\n555 556\n556 557\n557 558\n558 559\n559 560\n560 561\n561 562\n562 563\n563 564\n564 565\n565 566\n566 567\n567 568\n568 569\n569 570\n570 571\n571 572\n572 573\n573 574\n574 575\n575 576\n576 577\n577 578\n578 579\n579 580\n580 581\n581 582\n582 583\n583 584\n584 585\n585 586\n586 587\n587 588\n588 589\n589 590\n590 591\n591 592\n592 593\n593 594\n594 595\n595 596\n596 597\n597 598\n598 599\n599 600\n600 601\n601 602\n602 603\n603 604\n604 605\n605 606\n606 607\n607 608\n608 609\n609 610\n610 611\n611 612\n612 613\n613 614\n614 615\n615 616\n616 617\n617 618\n618 619\n619 620\n620 621\n621 622\n622 623\n623 624\n624 625\n625 626\n626 627\n627 628\n628 629\n629 630\n630 631\n631 632\n632 633\n633 634\n634 635\n635 636\n636 637\n637 638\n638 639\n639 640\n640 641\n641 642\n642 643\n643 644\n644 645\n645 646\n646 647\n647 648\n648 649\n649 650\n650 651\n651 652\n652 653\n653 654\n654 655\n655 656\n656 657\n657 658\n658 659\n659 660\n660 661\n661 662\n662 663\n663 664\n664 665\n665 666\n666 667\n667 668\n668 669\n669 670\n670 671\n671 672\n672 673\n673 674\n674 675\n675 676\n676 677\n677 678\n678 679\n679 680\n680 681\n681 682\n682 683\n683 684\n684 685\n685 686\n686 687\n687 688\n688 689\n689 690\n690 691\n691 692\n692 693\n693 694\n694 695\n695 696\n696 697\n697 698\n698 699\n699 700\n700 701\n701 702\n702 703\n703 704\n704 705\n705 706\n706 707\n707 708\n708 709\n709 710\n710 711\n711 712\n712 713\n713 714\n714 715\n715 716\n716 717\n717 718\n718 719\n719 720\n720 721\n721 722\n722 723\n723 724\n724 725\n725 726\n726 727\n727 728\n728 729\n729 730\n730 731\n731 732\n732 733\n733 734\n734 735\n735 736\n736 737\n737 738\n738 739\n739 740\n740 741\n741 742\n742 743\n743 744\n744 745\n745 746\n746 747\n747 748\n748 749\n749 750\n750 751\n751 752\n752 753\n753 754\n754 755\n755 756\n756 757\n757 758\n758 759\n759 760\n760 761\n761 762\n762 763\n763 764\n764 765\n765 766\n766 767\n767 768\n768 769\n769 770\n770 771\n771 772\n772 773\n773 774\n774 775\n775 776\n776 777\n777 778\n778 779\n779 780\n780 781\n781 782\n782 783\n783 784\n784 785\n785 786\n786 787\n787 788\n788 789\n789 790\n790 791\n791 792\n792 793\n793 794\n794 795\n795 796\n796 797\n797 798\n798 799\n799 800\n800 801\n801 802\n802 803\n803 804\n804 805\n805 806\n806 807\n807 808\n808 809\n809 810\n810 811\n811 812\n812 813\n813 814\n814 815\n815 816\n816 817\n817 818\n818 819\n819 820\n820 821\n821 822\n822 823\n823 824\n824 825\n825 826\n826 827\n827 828\n828 829\n829 830\n830 831\n831 832\n832 833\n833 834\n834 835\n835 836\n836 837\n837 838\n838 839\n839 840\n840 841\n841 842\n842 843\n843 844\n844 845\n845 846\n846 847\n847 848\n848 849\n849 850\n850 851\n851 852\n852 853\n853 854\n854 855\n855 856\n856 857\n857 858\n858 859\n859 860\n860 861\n861 862\n862 863\n863 864\n864 865\n865 866\n866 867\n867 868\n868 869\n869 870\n870 871\n871 872\n872 873\n873 874\n874 875\n875 876\n876 877\n877 878\n878 879\n879 880\n880 881\n881 882\n882 883\n883 884\n884 885\n885 886\n886 887\n887 888\n888 889\n889 890\n890 891\n891 892\n892 893\n893 894\n894 895\n895 896\n896 897\n897 898\n898 899\n899 900\n900 901\n901 902\n902 903\n903 904\n904 905\n905 906\n906 907\n907 908\n908 909\n909 910\n910 911\n911 912\n912 913\n913 914\n914 915\n915 916\n916 917\n917 918\n918 919\n919 920\n920 921\n921 922\n922 923\n923 924\n924 925\n925 926\n926 927\n927 928\n928 929\n929 930\n930 931\n931 932\n932 933\n933 934\n934 935\n935 936\n936 937\n937 938\n938 939\n939 940\n940 941\n941 942\n942 943\n943 944\n944 945\n945 946\n946 947\n947 948\n948 949\n949 950\n950 951\n951 952\n952 953\n953 954\n954 955\n955 956\n956 957\n957 958\n958 959\n959 960\n960 961\n961 962\n962 963\n963 964\n964 965\n965 966\n966 967\n967 968\n968 969\n969 970\n970 971\n971 972\n972 973\n973 974\n974 975\n975 976\n976 977\n977 978\n978 979\n979 980\n980 981\n981 982\n982 983\n983 984\n984 985\n985 986\n986 987\n987 988\n988 989\n989 990\n990 991\n991 992\n992 993\n993 994\n994 995\n995 996\n996 997\n997 998\n998 999\n999 1000", "10 12\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n1 5\n2 6\n3 7", "100 101\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 11\n11 12\n12 13\n13 14\n14 15\n15 16\n16 17\n17 18\n18 19\n19 20\n20 21\n21 22\n22 23\n23 24\n24 25\n25 26\n26 27\n27 28\n28 29\n29 30\n30 31\n31 32\n32 33\n33 34\n34 35\n35 36\n36 37\n37 38\n38 39\n39 40\n40 41\n41 42\n42 43\n43 44\n44 45\n45 46\n46 47\n47 48\n48 49\n49 50\n50 51\n51 52\n52 53\n53 54\n54 55\n55 56\n56 57\n57 58\n58 59\n59 60\n60 61\n61 62\n62 63\n63 64\n64 65\n65 66\n66 67\n67 68\n68 69\n69 70\n70 71\n71 72\n72 73\n73 74\n74 75\n75 76\n76 77\n77 78\n78 79\n79 80\n80 81\n81 82\n82 83\n83 84\n84 85\n85 86\n86 87\n87 88\n88 89\n89 90\n90 91\n91 92\n92 93\n93 94\n94 95\n95 96\n96 97\n97 98\n98 99\n99 100\n1 100\n50 51"]}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 <= N, M <= 2 * 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 <= S_i, T_i <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "testcase": ["1 1\n1\n1", "2 3\n100000 99999\n99998 99997 99996", "5 1\n1 50000 100000 25000 75000\n100", "10 10\n1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1", "2000 2000\n"]}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= M <= N-1\n* 1 <= a_1 < a_2 < ... < a_M <= N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "testcase": ["1 0", "1000 5 10 50 100 500 750", "100000 0", "10 3 2 5 8", "15 5 1 3 5 10 14", "500 4 20 100 300 400", "10000 2 200 9999", "3 1 1", "6 2 2 4", "25 6 3 5 10 12 18 24"]}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 50\n* 1 <= K <= 100\n* -10^7 <= V_i <= 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "testcase": ["5 10\n1 2 3 4 5", "10 20\n100000 2000000 -1000 0 5000 3000 8000 -999999 1500000 -10000000", "3 5\n0 0 0", "50 100\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "2 99\n-10000000 10000000", "8 8\n-1 -2 -3 -4 -5 -6 -7 -8", "1 1\n9999999", "6 90\n5 -5 5 -5 5 -5", "25 50\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000", "4 45\n-100000 500000 -1000000 1000000"]}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "testcase": ["1\n2\n3\n4\n5", "123\n122\n121\n120\n119", "12\n34\n56\n78\n90", "11\n12\n13\n14\n15", "100\n99\n98\n97\n96", "50\n60\n70\n80\n90", "5\n10\n15\n20\n25", "45\n46\n47\n48\n49", "88\n77\n66\n55\n44", "33\n22\n11\n66\n77"]}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A, B, C <= 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "testcase": ["1 1 1", "100 100 100", "1 100 50", "50 50 50", "25 75 100", "99 99 2", "10 90 10", "55 45 60", "33 44 22", "88 11 99"]}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 1", "1 20", "2 5", "4 4", "3 20", "10 15", "5 10", "12 20", "1 2", "6 10"]}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* -10^5 <= X_i <= 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "testcase": ["1 1\n0", "2 2\n1 -1", "3 3\n0 1 -1", "5 5\n10 20 30 40 50", "10 10\n-100000 10000 -9999 12345 -123456 78901 45678 -56890 11223 22334", "100 100\n", "1000 1000\n", "10000 10000\n", "87986\n..n98..", "100000 <random> Ms"]}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 <= N <= 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "testcase": ["1\n0.57", "3\n0.45 0.67 0.89", "5\n0.12 0.34 0.56 0.78 0.90", "7\n0.01 0.99 0.50 0.75 0.25 0.10 0.30", "9\n0.25 0.75 0.35 0.65 0.45 0.55 0.65 0.35 0.15", "11\n0.95 0.60 0.65 0.30 0.10 0.05 0.99 0.88 0.77 0.66 0.55", "13\n0.51 0.52 0.53 0.54 0.55 0.56 0.57 0.58 0.59 0.60 0.61 0.62 0.63", "15\n0.10 0.20 0.30 0.40 0.50 0.60 0.70 0.80 0.90 0.95 0.85 0.75 0.65 0.55 0.45", "17\n0.89 0.78 0.67 0.56 0.45 0.34 0.23 0.12 0.11 0.30 0.40 0.50 0.60 0.70 0.80 0.90 0.91", "19\n0.20 0.21 0.22 0.23 0.24 0.25 0.26 0.27 0.28 0.29 0.30 0.31 0.32 0.33 0.34 0.35 0.36 0.37 0.38"]}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 <= X,Y <= 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "10 20", "15 30", "25 40", "30 50", "40 60", "50 70", "60 80", "75 90", "100 100"]}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= P_i <= N\n* 1 <= Y_i <= 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "testcase": ["5 3\n1 100\n2 200\n3 300", "10 5\n5 123456789\n6 987654321\n7 111111111\n8 222222222\n9 333333333", "1 1\n1 1000000000", "100000 3\n1000 500000000\n2000 400000000\n3000 300000000", "100000 10\n10 10000000\n20 20000000\n30 30000000\n40 40000000\n50 50000000\n60 60000000\n70 70000000\n80 80000000\n90 90000000\n100 91000000", "10 10\n1 101\n2 102\n3 103\n4 104\n5 105\n6 106\n7 107\n8 108\n9 109\n10 110", "15 7\n2 157\n3 314\n4 719\n5 123\n6 888\n7 999\n15 456", "1000 5\n100 134567\n200 245678\n300 356789\n400 467890\n500 578901", "10000 8\n500 5001234\n1000 6002345\n2000 7003456\n3000 8004567\n4000 9001234\n5000 1000123\n6000 1100234\n7000 1200345", "20 6\n4 463\n5 827\n6 654\n7 291\n8 348\n9 1234"]}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 <= R <= 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "testcase": ["0", "1", "42", "100", "500", "2048", "3000", "4000", "4207", "4208"]}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 <= |S| <= 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "testcase": ["abacde\nzxycba", "mnopqrstu\nuvwxystuv", "abcdefghij\nklmnopqrst", "zabcdefghijklmnopqrstuvwxy\nyxwvutsrqponmlkjihgfedcba", "poppypoppyq\nqyyyopypyyy", "hamsterwheel\ncyksterxheel", "abcdefghijklmno\nonmlkjihgfedcba", "twodoorcinema\nnwelolyhgnut", "elephant\npelphane", "sequantialorder\nrandomstringset"]}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 <= N <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["1\n1", "5\n99999999 5 200000000 7 100", "3\n1000000000 1000000000 1000000000", "2\n123456789 987654321", "10\n1 1 1 1 1 1 1 1 1 1", "6\n100 200 300 400 500 600", "4\n1 1000000000 1 1000000000", "7\n10 20 30 40 50 60 70", "8\n2 3 5 7 11 13 17 19", "9\n111 222 333 444 555 666 777 888 999"]}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "testcase": ["0 1", "1 50", "2 75", "0 100", "1 1", "2 50", "0 25", "1 99", "2 10", "0 85"]}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 <= N <= 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "1998", "999", "100", "500", "1500", "10", "200", "750", "1800"]}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 <= A,B <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["-1000 1000", "0 0", "500 -500", "999 -999", "1000 -1000", "-750 750", "-1 1", "-100 100", "356 -356", "-999 -1000"]}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 <= N <= 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "testcase": ["2\nab", "5\nhello", "10\naabbccddee", "15\nprogrammingfun", "20\nabcdefghijklmnopqrst", "25\nzzzzzaaaaabbbbbccccc", "30\nppppppoooooooiiiiiiuuuu", "50\nabcdefghijabcdefghijabcdefghijabcdefghij", "75\nzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz", "100\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx"]}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "testcase": ["1\n1", "2\n1\n2", "2\n2\n1", "3\n1\n2\n3", "3\n3\n2\n1", "4\n2\n3\n1\n4", "4\n4\n3\n2\n1", "5\n5\n3\n2\n4\n1", "6\n6\n5\n4\n3\n2\n1", "10\n10\n9\n8\n7\n6\n5\n4\n3\n2\n1"]}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "testcase": ["ooo", "oxx", "oxo", "xxx", "xox", "oox", "xxo", "xoo", "oxo", "oxo"]}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 <= N <= 100\n* 1 <= m_i <= 1000\n* m_1 + m_2 + ... + m_N <= X <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "testcase": ["2 100\n50\n50", "4 500\n100\n150\n50\n200", "3 1000\n300\n400\n300", "5 10000\n2000\n3000\n1500\n1200\n2300", "6 20000\n4000\n3500\n2800\n1900\n1600\n3200", "7 5000\n800\n900\n700\n600\n800\n500\n700", "8 30000\n4000\n4000\n4000\n4000\n4000\n4000\n3000\n2000", "10 45000\n4500\n4500\n4500\n4500\n4500\n4500\n4500\n4500\n4500\n4500", "5 2000\n200\n400\n500\n300\n600", "9 75000\n8000\n7500\n7000\n6500\n6000\n5500\n5000\n4500\n4000"]}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 <= i <= N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "testcase": ["1\n99", "3\n10 20 30", "5\n1 1 1 1 1", "2\n50 75", "4\n100 99 98 97", "10\n12 34 56 78 90 11 22 33 44 55", "6\n7 14 21 28 35 42", "8\n80 60 40 20 100 1 50 75", "7\n17 34 51 68 85 92 10", "9\n9 18 27 36 45 54 63 72 81"]}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= d_i <= 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "testcase": ["1 1", "100 ", "5 10 20 30 40 50", "10 50 50 50 50 50 50 50 50 50 50", "2 99 100", "3 1 1 1", "4 25 30 75 100", "8 5 10 15 20 25 30 35 40", "6 100 99 98 97 96 95", "7 14 28 42 56 70 84 98"]}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= H <= 10^9\n* 1 <= a_i <= b_i <= 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "testcase": ["1 100\n1 100", "2 1000000000\n1 1000000000\n2 999999999", "3 1000000000\n1 500000000\n500000001 750000000\n750000001 1000000000", "3 1\n1 1000000000\n1 1000000000\n1 1000000000", "4 999999999\n1 250000000\n250000001 500000000\n500000001 750000000\n750000001 999999999", "5 500000\n1 100\n101 200\n201 300\n301 400\n401 500", "6 10\n1 10\n1 10\n1 10\n1 10\n1 10\n1 10", "7 700000\n100 200\n300 400\n500 600\n700 800\n900 1000\n1100 1200\n1300 1400", "8 8500000\n1 1000000\n1000001 2000000\n2000001 3000000\n3000001 4000000\n4000001 5000000\n5000001 6000000\n6000001 7000000\n7000001 8000000", "10 1000\n10 11\n12 13\n14 15\n16 17\n18 19\n20 21\n22 23\n24 25\n26 27\n28 29"]}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "testcase": ["a", "abc", "zxy", "aaaaaaaaaa", "abcdefghijklmnopqrstuvwxyz", "hello", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz", "qwerty", "streaming", "nnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnnn", "yzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzzz"]}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 <= N,M <= 1000\n* 0 <= K <= NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "testcase": ["1 1 0", "2 2 4", "10 10 50", "1000 1000 1000000", "100 10 500", "999 1000 1", "50 50 0", "500 500 250000", "100 1000 100000", "1000 1 1000"]}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 <= n <= 50\n* 1 <= |S_i| <= 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "testcase": ["3\napple\nbanana\ncarrot", "5\na\nbb\nccc\ndddd\neeeee", "1\nz", "10\nword\nanother\nsample\ndata\ntext\ninput\ntest\ncase\nexample\nstring", "2\nabc\ndefghijklmnopqrstuvwxyz", "4\nquick\nbrown\nfox\njumps", "7\nlorem\nipsum\ndolor\nsit\namet\nconsectetur\nadipiscing", "8\nhello\nworld\nwide\nweb\ninternet\nprotocol\nsuite", "9\naaa\nbbb\nccc\nddd\neee\nfff\nggg\nhhh\niii", "6\ncomputer\nscience\nis\nfun\nand\nimportant"]}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9(1 <= i <= N)\n* 1 <= B_i <= 10^9(1 <= i <= N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "testcase": ["1\n0 1", "2\n0 1\n1 2", "5\n10 100\n20 200\n30 300\n40 400\n50 500", "3\n1000000000 1\n1000000000 2\n1000000000 3", "6\n1 1000000000\n2 1000000000\n3 1000000000\n4 1000000000\n5 1000000000\n6 1000000000", "10\n0 1000000000\n100000000 200000000\n300000000 400000000\n500000000 600000000\n700000000 800000000\n900000000 1000000000\n3000000 4000000\n5000000 6000000\n7000000 8000000\n9000000 10000000", "4\n999999999 1\n999999999 2\n999999999 3\n999999999 4", "7\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14", "3\n0 0\n1 999999999\n999999999 1", "8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8"]}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1<=|S|<=10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["a", "abc", "xyz", "hello", "world", "abcdefghijklmnopqrstuvwxyz", "abababababa", "qwertyuiopasdfghjklzxcvbnm", "z", "onethousandletterslongaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "testcase": ["3 5 10\n1\n3\n5", "4 0 0\n-1\n0\n1\n2", "5 2 3\n2\n2\n2\n2\n2", "1 100 -100\n0", "6 10 20\n10\n15\n20\n25\n30\n35", "2 0 1\n-100\n100", "3 8 4\n7\n8\n9", "5 -5 5\n-5\n0\n1\n4\n5", "4 6 6\n6\n7\n5\n6", "1 -10 10\n0"]}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1<=|s|<=10^5\n* All letters in s are lowercase English letters.\n* 1<=K<=10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "testcase": ["a\n1", "abcde\n1000000000", "z\n999999999", "qwertyuiop\n123456789", "abcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyz\n987654321", "aabbccddeeffgghh\n500000000", "mnopqr\n102938475", "ghijklmnopqrstuvwxyz\n1", "xxyz\n765432109", "bbccddee\n2"]}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 <= | S | <= 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["NWSENW", "NE", "WWSSSNNNEE", "EEEEEE", "SSSNNNNNNWWE", "NWSWNWEWNWS", "NWSESWSWNW", "SENWEWSN", "NEEEEWWW", "SWNWSEENSSNEE"]}

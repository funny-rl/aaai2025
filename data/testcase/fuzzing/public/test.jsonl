{"name": "1008_A. Romaji", "description": "Vitya has just started learning Berlanese language. It is known that Berlanese uses the Latin alphabet. Vowel letters are \"a\", \"o\", \"u\", \"i\", and \"e\". Other letters are consonant.\n\nIn Berlanese, there has to be a vowel after every consonant, but there can be any letter after any vowel. The only exception is a consonant \"n\"; after this letter, there can be any letter (not only a vowel) or there can be no letter at all. For example, the words \"harakiri\", \"yupie\", \"man\", and \"nbo\" are Berlanese while the words \"horse\", \"king\", \"my\", and \"nz\" are not.\n\nHelp Vitya find out if a word s is Berlanese.\n\nInput\n\nThe first line of the input contains the string s consisting of |s| (1≤ |s|≤ 100) lowercase Latin letters.\n\nOutput\n\nPrint \"YES\" (without quotes) if there is a vowel after every consonant except \"n\", otherwise print \"NO\".\n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\nsumimasen\n\n\nOutput\n\nYES\n\n\nInput\n\nninja\n\n\nOutput\n\nYES\n\n\nInput\n\ncodeforces\n\n\nOutput\n\nNO\n\nNote\n\nIn the first and second samples, a vowel goes after each consonant except \"n\", so the word is Berlanese.\n\nIn the third sample, the consonant \"c\" goes after the consonant \"r\", and the consonant \"s\" stands on the end, so the word is not Berlanese.", "testcase": ["zinja", "ninjj", "sumimusen", "sumimtsen", "codesorces", "nunja", "ninjl", "sumzmasen", "ccdeforces", "sumvmasen"], "output": ["NO\n", "YES\n", "YES\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1016_A. Death Note", "description": "You received a notebook which is called Death Note. This notebook has infinite number of pages. A rule is written on the last page (huh) of this notebook. It says: \"You have to write names in this notebook during n consecutive days. During the i-th day you have to write exactly a_i names.\". You got scared (of course you got scared, who wouldn't get scared if he just receive a notebook which is named Death Note with a some strange rule written in it?).\n\nOf course, you decided to follow this rule. When you calmed down, you came up with a strategy how you will write names in the notebook. You have calculated that each page of the notebook can contain exactly m names. You will start writing names from the first page. You will write names on the current page as long as the limit on the number of names on this page is not exceeded. When the current page is over, you turn the page. Note that you always turn the page when it ends, it doesn't matter if it is the last day or not. If after some day the current page still can hold at least one name, during the next day you will continue writing the names from the current page.\n\nNow you are interested in the following question: how many times will you turn the page during each day? You are interested in the number of pages you will turn each day from 1 to n.\n\nInput\n\nThe first line of the input contains two integers n, m (1 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 10^9) — the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i means the number of names you will write in the notebook during the i-th day.\n\nOutput\n\nPrint exactly n integers t_1, t_2, ..., t_n, where t_i is the number of times you will turn the page during the i-th day.\n\nExamples\n\nInput\n\n3 5\n3 7 9\n\n\nOutput\n\n0 2 1 \n\n\nInput\n\n4 20\n10 9 19 2\n\n\nOutput\n\n0 0 1 1 \n\n\nInput\n\n1 100\n99\n\n\nOutput\n\n0 \n\nNote\n\nIn the first example pages of the Death Note will look like this [1, 1, 1, 2, 2], [2, 2, 2, 2, 2], [3, 3, 3, 3, 3], [3, 3, 3, 3]. Each number of the array describes during which day name on the corresponding position will be written. It is easy to see that you should turn the first and the second page during the second day and the third page during the third day.", "testcase": ["1 101\n99", "4 20\n9 9 20 2", "3 5\n1 7 9", "3 5\n4 7 8", "4 20\n11 10 19 2", "3 5\n3 7 9", "1 99\n99", "4 20\n11 9 20 2", "3 4\n3 6 9", "1 100\n100"], "output": ["0\n", "0 0 1 1\n", "0 2 1\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "101_C. Vectors", "description": "At a geometry lesson Gerald was given a task: to get vector B out of vector A. Besides, the teacher permitted him to perform the following operations with vector А:\n\n  * Turn the vector by 90 degrees clockwise.\n  * Add to the vector a certain vector C.\n\n\n\nOperations could be performed in any order any number of times.\n\nCan Gerald cope with the task?\n\nInput\n\nThe first line contains integers x1 и y1 — the coordinates of the vector A ( - 108 ≤ x1, y1 ≤ 108). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).\n\nOutput\n\nPrint \"YES\" (without the quotes) if it is possible to get vector B using the given operations. Otherwise print \"NO\" (without the quotes).\n\nExamples\n\nInput\n\n0 0\n1 1\n0 1\n\n\nOutput\n\nYES\n\n\nInput\n\n0 0\n1 1\n1 1\n\n\nOutput\n\nYES\n\n\nInput\n\n0 0\n1 1\n2 2\n\n\nOutput\n\nNO", "testcase": ["0 0\n1 0\n1 2", "0 0\n2 0\n0 1", "0 -1\n1 0\n1 1", "0 -1\n1 2\n1 1", "0 1\n1 0\n2 2", "0 0\n1 0\n3 2", "0 0\n1 2\n0 2", "0 0\n1 0\n0 1", "0 -2\n1 1\n2 2", "0 1\n2 1\n2 2"], "output": ["YES\n", "YES\n", "NO\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1028_A. Find Square", "description": "Consider a table of size n × m, initially fully white. Rows are numbered 1 through n from top to bottom, columns 1 through m from left to right. Some square inside the table with odd side length was painted black. Find the center of this square.\n\nInput\n\nThe first line contains two integers n and m (1 ≤ n, m ≤ 115) — the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} … s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.\n\nOutput\n\nOutput two integers r and c (1 ≤ r ≤ n, 1 ≤ c ≤ m) separated by a space — the row and column numbers of the center of the black square.\n\nExamples\n\nInput\n\n5 6\nWWBBBW\nWWBBBW\nWWBBBW\nWWWWWW\nWWWWWW\n\n\nOutput\n\n2 4\n\n\nInput\n\n3 3\nWWW\nBWW\nWWW\n\n\nOutput\n\n2 1", "testcase": ["5 6\nWWJBBW\nWWBBLW\nWWBBBD\nWWWWWW\nWWWWWW", "3 3\nWWW\nBWS\nWCW", "5 8\nWWBBBW\nWWBBBW\nHWBBBW\nWWWWWW\nWWWWWW", "3 3\nWWD\nBWW\nWNW", "5 6\nWWBBBU\nWWBBBW\nWWBBBW\nWWWEWE\nWWWWWW", "3 2\nWWW\nBLW\nWWW", "5 6\nWWBBBW\nWWZBBW\nTWBBBW\nWWWAWW\nWWWWWW", "5 6\nWDBBBW\nWWBBBW\nWWBBBW\nWWWWKW\nWWWWWW", "3 3\nWWW\nBPO\nWWW", "3 1\nWWW\nBWW\nWWW"], "output": ["2 1\n", "2 4\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1036_B. Diagonal Walking v.2", "description": "Mikhail walks on a Cartesian plane. He starts at the point (0, 0), and in one move he can go to any of eight adjacent points. For example, if Mikhail is currently at the point (0, 0), he can go to any of the following points in one move: \n\n  * (1, 0); \n  * (1, 1); \n  * (0, 1); \n  * (-1, 1); \n  * (-1, 0); \n  * (-1, -1); \n  * (0, -1); \n  * (1, -1). \n\n\n\nIf Mikhail goes from the point (x1, y1) to the point (x2, y2) in one move, and x1 ≠ x2 and y1 ≠ y2, then such a move is called a diagonal move.\n\nMikhail has q queries. For the i-th query Mikhail's target is to go to the point (n_i, m_i) from the point (0, 0) in exactly k_i moves. Among all possible movements he want to choose one with the maximum number of diagonal moves. Your task is to find the maximum number of diagonal moves or find that it is impossible to go from the point (0, 0) to the point (n_i, m_i) in k_i moves.\n\nNote that Mikhail can visit any point any number of times (even the destination point!).\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 10^4) — the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 ≤ n_i, m_i, k_i ≤ 10^{18}) — x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.\n\nOutput\n\nPrint q integers. The i-th integer should be equal to -1 if Mikhail cannot go from the point (0, 0) to the point (n_i, m_i) in exactly k_i moves described above. Otherwise the i-th integer should be equal to the the maximum number of diagonal moves among all possible movements.\n\nExample\n\nInput\n\n3\n2 2 3\n4 3 7\n10 1 9\n\n\nOutput\n\n1\n6\n-1\n\nNote\n\nOne of the possible answers to the first test case: (0, 0) → (1, 0) → (1, 1) → (2, 2).\n\nOne of the possible answers to the second test case: (0, 0) → (0, 1) → (1, 2) → (0, 3) → (1, 4) → (2, 3) → (3, 2) → (4, 3).\n\nIn the third test case Mikhail cannot reach the point (10, 1) in 9 moves.", "testcase": ["3\n2 2 4\n4 3 8\n11 1 9", "3\n3 2 3\n4 2 8\n10 1 9", "3\n2 3 3\n4 3 7\n8 1 9", "3\n1 2 2\n4 3 7\n10 2 9", "3\n2 0 3\n4 3 7\n9 1 9", "3\n2 2 3\n4 3 7\n10 1 10", "3\n1 3 3\n5 3 7\n10 1 9", "3\n1 4 3\n4 3 7\n10 1 9", "3\n1 2 3\n4 3 8\n10 0 9", "3\n2 2 4\n4 3 7\n10 2 10"], "output": ["1\n6\n-1\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1037_A. Packets", "description": "You have n coins, each of the same value of 1.\n\nDistribute them into packets such that any amount x (1 ≤ x ≤ n) can be formed using some (possibly one or all) number of these packets.\n\nEach packet may only be used entirely or not used at all. No packet may be used more than once in the formation of the single x, however it may be reused for the formation of other x's.\n\nFind the minimum number of packets in such a distribution.\n\nInput\n\nThe only line contains a single integer n (1 ≤ n ≤ 10^9) — the number of coins you have.\n\nOutput\n\nOutput a single integer — the minimum possible number of packets, satisfying the condition above.\n\nExamples\n\nInput\n\n6\n\n\nOutput\n\n3\n\nInput\n\n2\n\n\nOutput\n\n2\n\nNote\n\nIn the first example, three packets with 1, 2 and 3 coins can be made to get any amount x (1≤ x≤ 6).\n\n  * To get 1 use the packet with 1 coin. \n  * To get 2 use the packet with 2 coins. \n  * To get 3 use the packet with 3 coins. \n  * To get 4 use packets with 1 and 3 coins. \n  * To get 5 use packets with 2 and 3 coins \n  * To get 6 use all packets. \n\n\n\nIn the second example, two packets with 1 and 1 coins can be made to get any amount x (1≤ x≤ 2).", "testcase": ["7", "3", "5", "7", "5", "5", "3", "1", "5", "7"], "output": ["3\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1038_D. Slime", "description": "There are n slimes in a row. Each slime has an integer value (possibly negative or zero) associated with it.\n\nAny slime can eat its adjacent slime (the closest slime to its left or to its right, assuming that this slime exists). \n\nWhen a slime with a value x eats a slime with a value y, the eaten slime disappears, and the value of the remaining slime changes to x - y.\n\nThe slimes will eat each other until there is only one slime left. \n\nFind the maximum possible value of the last slime.\n\nInput\n\nThe first line of the input contains an integer n (1 ≤ n ≤ 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 ≤ a_i ≤ 10^9), where a_i is the value of i-th slime.\n\nOutput\n\nPrint an only integer — the maximum possible value of the last slime.\n\nExamples\n\nInput\n\n4\n2 1 2 1\n\n\nOutput\n\n4\n\nInput\n\n5\n0 -1 -1 -1 -1\n\n\nOutput\n\n4\n\nNote\n\nIn the first example, a possible way of getting the last slime with value 4 is:\n\n  * Second slime eats the third slime, the row now contains slimes 2, -1, 1\n  * Second slime eats the third slime, the row now contains slimes 2, -2\n  * First slime eats the second slime, the row now contains 4 \n\n\n\nIn the second example, the first slime can keep eating slimes to its right to end up with a value of 4.", "testcase": ["5\n0 -2 -1 0 -1", "4\n2 0 2 2", "4\n3 1 3 1", "4\n3 0 2 1", "5\n0 -2 0 -1 -1", "4\n2 2 2 2", "5\n-1 -1 -1 -1 0", "5\n0 -2 -1 -2 -1", "5\n0 -1 0 0 -1", "4\n2 0 1 1"], "output": ["4\n", "4\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "103_C. Russian Roulette", "description": "After all the events in Orlando we all know, Sasha and Roma decided to find out who is still the team's biggest loser. Thankfully, Masha found somewhere a revolver with a rotating cylinder of n bullet slots able to contain exactly k bullets, now the boys have a chance to resolve the problem once and for all. \n\nSasha selects any k out of n slots he wishes and puts bullets there. Roma spins the cylinder so that every of n possible cylinder's shifts is equiprobable. Then the game starts, the players take turns, Sasha starts: he puts the gun to his head and shoots. If there was no bullet in front of the trigger, the cylinder shifts by one position and the weapon is given to Roma for make the same move. The game continues until someone is shot, the survivor is the winner. \n\nSasha does not want to lose, so he must choose slots for bullets in such a way as to minimize the probability of its own loss. Of all the possible variant he wants to select the lexicographically minimal one, where an empty slot is lexicographically less than a charged one. \n\nMore formally, the cylinder of n bullet slots able to contain k bullets can be represented as a string of n characters. Exactly k of them are \"X\" (charged slots) and the others are \".\" (uncharged slots). \n\nLet us describe the process of a shot. Suppose that the trigger is in front of the first character of the string (the first slot). If a shot doesn't kill anyone and the cylinder shifts, then the string shifts left. So the first character becomes the last one, the second character becomes the first one, and so on. But the trigger doesn't move. It will be in front of the first character of the resulting string.\n\nAmong all the strings that give the minimal probability of loss, Sasha choose the lexicographically minimal one. According to this very string, he charges the gun. You have to help Sasha to charge the gun. For that, each xi query must be answered: is there a bullet in the positions xi?\n\nInput\n\nThe first line contains three integers n, k and p (1 ≤ n ≤ 1018, 0 ≤ k ≤ n, 1 ≤ p ≤ 1000) — the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 ≤ xi ≤ n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nOutput\n\nFor each query print \".\" if the slot should be empty and \"X\" if the slot should be charged.\n\nExamples\n\nInput\n\n3 1 3\n1\n2\n3\n\n\nOutput\n\n..X\n\nInput\n\n6 3 6\n1\n2\n3\n4\n5\n6\n\n\nOutput\n\n.X.X.X\n\nInput\n\n5 2 5\n1\n2\n3\n4\n5\n\n\nOutput\n\n...XX\n\nNote\n\nThe lexicographical comparison of is performed by the < operator in modern programming languages. The a string is lexicographically less that the b string, if there exists such i (1 ≤ i ≤ n), that ai < bi, and for any j (1 ≤ j < i) aj = bj.", "testcase": ["6 3 6\n0\n2\n3\n3\n6\n6", "3 1 3\n2\n2\n4", "3 1 2\n1\n1\n3", "6 3 6\n1\n2\n3\n4\n5\n7", "5 2 5\n2\n2\n3\n4\n5", "3 3 3\n1\n2\n3", "3 2 3\n1\n2\n2", "5 2 6\n0\n2\n3\n5\n5", "6 5 6\n1\n1\n3\n4\n5\n6", "5 2 4\n1\n1\n3\n4\n6"], "output": ["...XX\n", ".X.X.X\n", "..X\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1047_D. Little C Loves 3 II", "description": "Little C loves number «3» very much. He loves all things about it.\n\nNow he is playing a game on a chessboard of size n × m. The cell in the x-th row and in the y-th column is called (x,y). Initially, The chessboard is empty. Each time, he places two chessmen on two different empty cells, the Manhattan distance between which is exactly 3. The Manhattan distance between two cells (x_i,y_i) and (x_j,y_j) is defined as |x_i-x_j|+|y_i-y_j|.\n\nHe want to place as many chessmen as possible on the chessboard. Please help him find the maximum number of chessmen he can place.\n\nInput\n\nA single line contains two integers n and m (1 ≤ n,m ≤ 10^9) — the number of rows and the number of columns of the chessboard.\n\nOutput\n\nPrint one integer — the maximum number of chessmen Little C can place.\n\nExamples\n\nInput\n\n2 2\n\n\nOutput\n\n0\n\nInput\n\n3 3\n\n\nOutput\n\n8\n\nNote\n\nIn the first example, the Manhattan distance between any two cells is smaller than 3, so the answer is 0.\n\nIn the second example, a possible solution is (1,1)(3,2), (1,2)(3,3), (2,1)(1,3), (3,1)(2,3).", "testcase": ["2 1", "3 2", "3 2", "2 3", "3 2", "2 1", "2 3", "3 2", "3 2", "3 2"], "output": ["8\n", "0\n"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1054_A. Elevator or Stairs?", "description": "Masha lives in a multi-storey building, where floors are numbered with positive integers. Two floors are called adjacent if their numbers differ by one. Masha decided to visit Egor. Masha lives on the floor x, Egor on the floor y (not on the same floor with Masha).\n\nThe house has a staircase and an elevator. If Masha uses the stairs, it takes t_1 seconds for her to walk between adjacent floors (in each direction). The elevator passes between adjacent floors (in each way) in t_2 seconds. The elevator moves with doors closed. The elevator spends t_3 seconds to open or close the doors. We can assume that time is not spent on any action except moving between adjacent floors and waiting for the doors to open or close. If Masha uses the elevator, it immediately goes directly to the desired floor.\n\nComing out of the apartment on her floor, Masha noticed that the elevator is now on the floor z and has closed doors. Now she has to choose whether to use the stairs or use the elevator. \n\nIf the time that Masha needs to get to the Egor's floor by the stairs is strictly less than the time it will take her using the elevator, then she will use the stairs, otherwise she will choose the elevator.\n\nHelp Mary to understand whether to use the elevator or the stairs.\n\nInput\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 ≤ x, y, z, t_1, t_2, t_3 ≤ 1000) — the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x ≠ y.\n\nOutput\n\nIf the time it will take to use the elevator is not greater than the time it will take to use the stairs, print «YES» (without quotes), otherwise print «NO> (without quotes).\n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n5 1 4 4 2 1\n\n\nOutput\n\nYES\n\nInput\n\n1 6 6 2 1 1\n\n\nOutput\n\nNO\n\nInput\n\n4 1 7 4 1 2\n\n\nOutput\n\nYES\n\nNote\n\nIn the first example:\n\nIf Masha goes by the stairs, the time she spends is 4 ⋅ 4 = 16, because she has to go 4 times between adjacent floors and each time she spends 4 seconds. \n\nIf she chooses the elevator, she will have to wait 2 seconds while the elevator leaves the 4-th floor and goes to the 5-th. After that the doors will be opening for another 1 second. Then Masha will enter the elevator, and she will have to wait for 1 second for the doors closing. Next, the elevator will spend 4 ⋅ 2 = 8 seconds going from the 5-th floor to the 1-st, because the elevator has to pass 4 times between adjacent floors and spends 2 seconds each time. And finally, it will take another 1 second before the doors are open and Masha can come out. \n\nThus, all the way by elevator will take 2 + 1 + 1 + 8 + 1 = 13 seconds, which is less than 16 seconds, so Masha has to choose the elevator.\n\nIn the second example, it is more profitable for Masha to use the stairs, because it will take 13 seconds to use the elevator, that is more than the 10 seconds it will takes to go by foot.\n\nIn the third example, the time it takes to use the elevator is equal to the time it takes to walk up by the stairs, and is equal to 12 seconds. That means Masha will take the elevator.", "testcase": ["5 1 4 2 2 1", "1 7 6 2 1 2", "1 6 6 2 2 0", "1 6 6 2 1 1", "1 6 6 2 1 1", "5 2 4 5 2 1", "1 6 8 2 1 1", "5 -1 4 4 2 1", "4 1 7 5 0 2", "1 6 6 2 1 -1"], "output": ["NO\n", "YES\n", "YES\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1060_A. Phone Numbers", "description": "Let's call a string a phone number if it has length 11 and fits the pattern \"8xxxxxxxxxx\", where each \"x\" is replaced by a digit.\n\nFor example, \"80123456789\" and \"80000000000\" are phone numbers, while \"8012345678\" and \"79000000000\" are not.\n\nYou have n cards with digits, and you want to use them to make as many phone numbers as possible. Each card must be used in at most one phone number, and you don't have to use all cards. The phone numbers do not necessarily have to be distinct.\n\nInput\n\nThe first line contains an integer n — the number of cards with digits that you have (1 ≤ n ≤ 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, …, s_n. The string will not contain any other characters, such as leading or trailing spaces.\n\nOutput\n\nIf at least one phone number can be made from these cards, output the maximum number of phone numbers that can be made. Otherwise, output 0.\n\nExamples\n\nInput\n\n11\n00000000008\n\n\nOutput\n\n1\n\n\nInput\n\n22\n0011223344556677889988\n\n\nOutput\n\n2\n\n\nInput\n\n11\n31415926535\n\n\nOutput\n\n0\n\nNote\n\nIn the first example, one phone number, \"8000000000\", can be made from these cards.\n\nIn the second example, you can make two phone numbers from the cards, for example, \"80123456789\" and \"80123456789\".\n\nIn the third example you can't make any phone number from the given cards.", "testcase": ["11\n31415926534", "22\n11223344556677889987", "22\n11223344556677889987", "22\n11223344556677889989", "11\n31415926536", "11\n31415926536", "22\n11223344556677889989", "11\n7", "22\n11223344556677889989", "11\n7"], "output": ["2\n", "1\n", "0\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1062_D. Fun with Integers", "description": "You are given a positive integer n greater or equal to 2. For every pair of integers a and b (2 ≤ |a|, |b| ≤ n), you can transform a into b if and only if there exists an integer x such that 1 < |x| and (a ⋅ x = b or b ⋅ x = a), where |x| denotes the absolute value of x.\n\nAfter such a transformation, your score increases by |x| points and you are not allowed to transform a into b nor b into a anymore.\n\nInitially, you have a score of 0. You can start at any integer and transform it as many times as you like. What is the maximum score you can achieve?\n\nInput\n\nA single line contains a single integer n (2 ≤ n ≤ 100 000) — the given integer described above.\n\nOutput\n\nPrint an only integer — the maximum score that can be achieved with the transformations. If it is not possible to perform even a single transformation for all possible starting integers, print 0.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n8\n\nInput\n\n6\n\n\nOutput\n\n28\n\nInput\n\n2\n\n\nOutput\n\n0\n\nNote\n\nIn the first example, the transformations are 2 → 4 → (-2) → (-4) → 2.\n\nIn the third example, it is impossible to perform even a single transformation.", "testcase": ["1", "3", "1", "3", "5", "5", "1", "3", "7", "5"], "output": ["0", "8", "28"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1068_B. LCM", "description": "Ivan has number b. He is sorting through the numbers a from 1 to 10^{18}, and for every a writes ([a,    b])/(a) on blackboard. Here [a,    b] stands for least common multiple of a and b. Ivan is very lazy, that's why this task bored him soon. But he is interested in how many different numbers he would write on the board if he would finish the task. Help him to find the quantity of different numbers he would write on the board.\n\nInput\n\nThe only line contains one integer — b (1 ≤ b ≤ 10^{10}).\n\nOutput\n\nPrint one number — answer for the problem.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1\n\nInput\n\n2\n\n\nOutput\n\n2\n\nNote\n\nIn the first example [a,    1] = a, therefore ([a,    b])/(a) is always equal to 1.\n\nIn the second example [a,    2] can be equal to a or 2 ⋅ a depending on parity of a. ([a,    b])/(a) can be equal to 1 and 2.", "testcase": ["0", "2", "0", "1", "1", "0", "2", "1", "1", "2"], "output": ["1\n", "2\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1076_B. Divisor Subtraction", "description": "You are given an integer number n. The following algorithm is applied to it:\n\n  1. if n = 0, then end algorithm; \n  2. find the smallest prime divisor d of n; \n  3. subtract d from n and go to step 1. \n\n\n\nDetermine the number of subtrations the algorithm will make.\n\nInput\n\nThe only line contains a single integer n (2 ≤ n ≤ 10^{10}).\n\nOutput\n\nPrint a single integer — the number of subtractions the algorithm will make.\n\nExamples\n\nInput\n\n\n5\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n4\n\n\nOutput\n\n\n2\n\nNote\n\nIn the first example 5 is the smallest prime divisor, thus it gets subtracted right away to make a 0.\n\nIn the second example 2 is the smallest prime divisor at both steps.", "testcase": ["6", "4", "3", "5", "4", "4", "6", "4", "5", "4"], "output": ["2\n", "1\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1084_C. The Fair Nut and String", "description": "The Fair Nut found a string s. The string consists of lowercase Latin letters. The Nut is a curious guy, so he wants to find the number of strictly increasing sequences p_1, p_2, …, p_k, such that: \n\n  1. For each i (1 ≤ i ≤ k), s_{p_i} = 'a'. \n  2. For each i (1 ≤ i < k), there is such j that p_i < j < p_{i + 1} and s_j = 'b'. \n\n\n\nThe Nut is upset because he doesn't know how to find the number. Help him.\n\nThis number should be calculated modulo 10^9 + 7.\n\nInput\n\nThe first line contains the string s (1 ≤ |s| ≤ 10^5) consisting of lowercase Latin letters.\n\nOutput\n\nIn a single line print the answer to the problem — the number of such sequences p_1, p_2, …, p_k modulo 10^9 + 7.\n\nExamples\n\nInput\n\nabbaa\n\n\nOutput\n\n5\n\nInput\n\nbaaaa\n\n\nOutput\n\n4\n\nInput\n\nagaa\n\n\nOutput\n\n3\n\nNote\n\nIn the first example, there are 5 possible sequences. [1], [4], [5], [1, 4], [1, 5].\n\nIn the second example, there are 4 possible sequences. [2], [3], [4], [5].\n\nIn the third example, there are 3 possible sequences. [1], [3], [4].", "testcase": ["ataa", "baaaz", "biaaa", "baaat", "abhaa", "baaag", "abbap", "nbbaa", "baaap", "lbbaa"], "output": ["3\n", "4\n", "5\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "There are n people sitting in a circle, numbered from 1 to n in the order in which they are seated. That is, for all i from 1 to n-1, the people with id i and i+1 are adjacent. People with id n and 1 are adjacent as well.\n\nThe person with id 1 initially has a ball. He picks a positive integer k at most n, and passes the ball to his k-th neighbour in the direction of increasing ids, that person passes the ball to his k-th neighbour in the same direction, and so on until the person with the id 1 gets the ball back. When he gets it back, people do not pass the ball any more.\n\nFor instance, if n = 6 and k = 4, the ball is passed in order [1, 5, 3, 1]. \n\nConsider the set of all people that touched the ball. The fun value of the game is the sum of the ids of people that touched it. In the above example, the fun value would be 1 + 5 + 3 = 9.\n\nFind and report the set of possible fun values for all choices of positive integer k. It can be shown that under the constraints of the problem, the ball always gets back to the 1-st player after finitely many steps, and there are no more than 10^5 possible fun values for given n.\n\nInput\n\nThe only line consists of a single integer n (2 ≤ n ≤ 10^9) — the number of people playing with the ball.\n\nOutput\n\nSuppose the set of all fun values is f_1, f_2, ..., f_m.\n\nOutput a single line containing m space separated integers f_1 through f_m in increasing order.\n\nExamples\n\nInput\n\n\n6\n\n\nOutput\n\n\n1 5 9 21\n\n\nInput\n\n\n16\n\n\nOutput\n\n\n1 10 28 64 136\n\nNote\n\nIn the first sample, we've already shown that picking k = 4 yields fun value 9, as does k = 2. Picking k = 6 results in fun value of 1. For k = 3 we get fun value 5 and with k = 1 or k = 5 we get 21. \n\n<image>\n\nIn the second sample, the values 1, 10, 28, 64 and 136 are achieved for instance for k = 16, 8, 4, 10 and 11, respectively.", "testcase": ["5", "17", "7", "17", "17", "5", "7", "15", "17", "5"], "output": ["1 5 9 21\n", "1 10 28 64 136\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1095_A. Repeating Cipher", "description": "Polycarp loves ciphers. He has invented his own cipher called repeating.\n\nRepeating cipher is used for strings. To encrypt the string s=s_{1}s_{2} ... s_{m} (1 ≤ m ≤ 10), Polycarp uses the following algorithm:\n\n  * he writes down s_1 ones, \n  * he writes down s_2 twice, \n  * he writes down s_3 three times, \n  * ... \n  * he writes down s_m m times. \n\n\n\nFor example, if s=\"bab\" the process is: \"b\" → \"baa\" → \"baabbb\". So the encrypted s=\"bab\" is \"baabbb\".\n\nGiven string t — the result of encryption of some string s. Your task is to decrypt it, i. e. find the string s.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 55) — the length of the encrypted string. The second line of the input contains t — the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.\n\nOutput\n\nPrint such string s that after encryption it equals t.\n\nExamples\n\nInput\n\n\n6\nbaabbb\n\n\nOutput\n\n\nbab\n\nInput\n\n\n10\nooopppssss\n\n\nOutput\n\n\noops\n\nInput\n\n\n1\nz\n\n\nOutput\n\n\nz", "testcase": ["1\nj", "10\neoopppssss", "1\ns", "1\nr", "10\nogopppssss", "1\nl", "6\nbaabbh", "6\nbaabba", "10\nooopppsssa", "10\nooopppssns"], "output": ["bab", "oops", "z"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1101_A. Minimum Integer", "description": "You are given q queries in the following form:\n\nGiven three integers l_i, r_i and d_i, find minimum positive integer x_i such that it is divisible by d_i and it does not belong to the segment [l_i, r_i].\n\nCan you answer all the queries?\n\nRecall that a number x belongs to segment [l, r] if l ≤ x ≤ r.\n\nInput\n\nThe first line contains one integer q (1 ≤ q ≤ 500) — the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 ≤ l_i ≤ r_i ≤ 10^9, 1 ≤ d_i ≤ 10^9). l_i, r_i and d_i are integers.\n\nOutput\n\nFor each query print one integer: the answer to this query.\n\nExample\n\nInput\n\n\n5\n2 4 2\n5 10 4\n3 10 1\n1 2 3\n4 6 5\n\n\nOutput\n\n\n6\n4\n1\n3\n10", "testcase": ["5\n2 4 2\n5 10 6\n3 10 1\n1 2 4\n4 6 5", "5\n2 5 2\n5 10 5\n3 10 2\n1 2 3\n4 6 5", "5\n2 4 2\n5 10 4\n3 10 0\n1 2 3\n4 7 4", "5\n2 4 2\n5 10 5\n3 10 1\n0 2 4\n4 6 5", "5\n2 4 2\n4 9 4\n3 10 0\n1 2 4\n4 6 4", "5\n2 5 1\n5 9 4\n3 10 1\n1 2 3\n3 5 5", "5\n2 3 3\n5 9 4\n3 10 1\n1 2 3\n3 6 4", "5\n2 4 1\n5 10 5\n3 11 2\n1 2 3\n4 5 5", "5\n2 4 2\n6 10 3\n3 10 1\n0 2 2\n5 6 5", "5\n2 5 2\n5 10 4\n3 11 1\n0 1 3\n4 7 5"], "output": ["6\n4\n1\n3\n10\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1102_A. Integer Sequence Dividing", "description": "You are given an integer sequence 1, 2, ..., n. You have to divide it into two sets A and B in such a way that each element belongs to exactly one set and |sum(A) - sum(B)| is minimum possible.\n\nThe value |x| is the absolute value of x and sum(S) is the sum of elements of the set S.\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2 ⋅ 10^9).\n\nOutput\n\nPrint one integer — the minimum possible value of |sum(A) - sum(B)| if you divide the initial sequence 1, 2, ..., n into two sets A and B.\n\nExamples\n\nInput\n\n\n3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n5\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n6\n\n\nOutput\n\n\n1\n\nNote\n\nSome (not all) possible answers to examples:\n\nIn the first example you can divide the initial sequence into sets A = \\{1, 2\\} and B = \\{3\\} so the answer is 0.\n\nIn the second example you can divide the initial sequence into sets A = \\{1, 3, 4\\} and B = \\{2, 5\\} so the answer is 1.\n\nIn the third example you can divide the initial sequence into sets A = \\{1, 4, 5\\} and B = \\{2, 3, 6\\} so the answer is 1.", "testcase": ["7", "5", "4", "4", "6", "4", "2", "4", "2", "6"], "output": ["1\n", "1\n", "0\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "110_B. Lucky String", "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya recently learned to determine whether a string of lowercase Latin letters is lucky. For each individual letter all its positions in the string are written out in the increasing order. This results in 26 lists of numbers; some of them can be empty. A string is considered lucky if and only if in each list the absolute difference of any two adjacent numbers is a lucky number. \n\nFor example, let's consider string \"zbcdzefdzc\". The lists of positions of equal letters are:\n\n  * b: 2\n  * c: 3, 10\n  * d: 4, 8\n  * e: 6\n  * f: 7\n  * z: 1, 5, 9\n  * Lists of positions of letters a, g, h, ..., y are empty.\n\n\n\nThis string is lucky as all differences are lucky numbers. For letters z: 5 - 1 = 4, 9 - 5 = 4, for letters c: 10 - 3 = 7, for letters d: 8 - 4 = 4. \n\nNote that if some letter occurs only once in a string, it doesn't influence the string's luckiness after building the lists of positions of equal letters. The string where all the letters are distinct is considered lucky.\n\nFind the lexicographically minimal lucky string whose length equals n.\n\nInput\n\nThe single line contains a positive integer n (1 ≤ n ≤ 105) — the length of the sought string.\n\nOutput\n\nPrint on the single line the lexicographically minimal lucky string whose length equals n.\n\nExamples\n\nInput\n\n5\n\n\nOutput\n\nabcda\n\n\nInput\n\n3\n\n\nOutput\n\nabc\n\nNote\n\nThe lexical comparison of strings is performed by the < operator in modern programming languages. String a is lexicographically less than string b if exists such i (1 ≤ i ≤ n), that ai < bi, and for any j (1 ≤ j < i) aj = bj.", "testcase": ["4", "4", "4", "4", "2", "6", "4", "4", "6", "2"], "output": ["abc", "abcda"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "110_C. Lucky Sum of Digits", "description": "Petya loves lucky numbers. We all know that lucky numbers are the positive integers whose decimal representations contain only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya wonders eagerly what minimum lucky number has the sum of digits equal to n. Help him cope with the task.\n\nInput\n\nThe single line contains an integer n (1 ≤ n ≤ 106) — the sum of digits of the required lucky number.\n\nOutput\n\nPrint on the single line the result — the minimum lucky number, whose sum of digits equals n. If such number does not exist, print -1.\n\nExamples\n\nInput\n\n11\n\n\nOutput\n\n47\n\n\nInput\n\n10\n\n\nOutput\n\n-1", "testcase": ["9", "12", "9", "12", "11", "11", "10", "10", "12", "12"], "output": ["47\n", "-1\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1110_A. Parity", "description": "You are given an integer n (n ≥ 0) represented with k digits in base (radix) b. So,\n\n$$$n = a_1 ⋅ b^{k-1} + a_2 ⋅ b^{k-2} + … a_{k-1} ⋅ b + a_k.$$$\n\nFor example, if b=17, k=3 and a=[11, 15, 7] then n=11⋅17^2+15⋅17+7=3179+255+7=3441.\n\nDetermine whether n is even or odd.\n\nInput\n\nThe first line contains two integers b and k (2≤ b≤ 100, 1≤ k≤ 10^5) — the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, …, a_k (0≤ a_i < b) — the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.\n\nOutput\n\nPrint \"even\" if n is even, otherwise print \"odd\".\n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n13 3\n3 2 7\n\n\nOutput\n\neven\n\n\nInput\n\n10 9\n1 2 3 4 5 6 7 8 9\n\n\nOutput\n\nodd\n\n\nInput\n\n99 5\n32 92 85 74 4\n\n\nOutput\n\nodd\n\n\nInput\n\n2 2\n1 0\n\n\nOutput\n\neven\n\nNote\n\nIn the first example, n = 3 ⋅ 13^2 + 2 ⋅ 13 + 7 = 540, which is even.\n\nIn the second example, n = 123456789 is odd.\n\nIn the third example, n = 32 ⋅ 99^4 + 92 ⋅ 99^3 + 85 ⋅ 99^2 + 74 ⋅ 99 + 4 = 3164015155 is odd.\n\nIn the fourth example n = 2.", "testcase": ["99 5\n33 92 83 74 4", "13 2\n3 1 7", "10 9\n1 2 4 4 5 5 7 8 9", "13 3\n3 3 8", "99 5\n32 92 85 72 5", "2 3\n1 -1", "13 3\n4 2 6", "13 3\n2 1 7", "10 9\n1 2 3 5 5 6 8 8 9", "99 5\n32 92 84 74 4"], "output": ["even\n", "odd\n", "even\n", "odd\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1114_A. Got Any Grapes?", "description": "[The Duck song](https://www.youtube.com/watch?v=MtN1YnoL46Q)\n\nFor simplicity, we'll assume that there are only three types of grapes: green grapes, purple grapes and black grapes.\n\nAndrew, Dmitry and Michal are all grapes' lovers, however their preferences of grapes are different. To make all of them happy, the following should happen:\n\n  * Andrew, Dmitry and Michal should eat at least x, y and z grapes, respectively.\n  * Andrew has an extreme affinity for green grapes, thus he will eat green grapes and green grapes only.\n  * On the other hand, Dmitry is not a fan of black grapes — any types of grapes except black would do for him. In other words, Dmitry can eat green and purple grapes.\n  * Michal has a common taste — he enjoys grapes in general and will be pleased with any types of grapes, as long as the quantity is sufficient.\n\n\n\nKnowing that his friends are so fond of grapes, Aki decided to host a grape party with them. He has prepared a box with a green grapes, b purple grapes and c black grapes.\n\nHowever, Aki isn't sure if the box he prepared contains enough grapes to make everyone happy. Can you please find out whether it's possible to distribute grapes so that everyone is happy or Aki has to buy some more grapes?\n\nIt is not required to distribute all the grapes, so it's possible that some of them will remain unused.\n\nInput\n\nThe first line contains three integers x, y and z (1 ≤ x, y, z ≤ 10^5) — the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 ≤ a, b, c ≤ 10^5) — the number of green, purple and black grapes in the box.\n\nOutput\n\nIf there is a grape distribution that allows everyone to be happy, print \"YES\", otherwise print \"NO\".\n\nExamples\n\nInput\n\n1 6 2\n4 3 3\n\n\nOutput\n\nYES\n\n\nInput\n\n5 1 1\n4 3 2\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example, there is only one possible distribution:\n\nAndrew should take 1 green grape, Dmitry should take 3 remaining green grapes and 3 purple grapes, and Michal will take 2 out of 3 available black grapes.\n\nIn the second test, there is no possible distribution, since Andrew is not be able to eat enough green grapes. :(", "testcase": ["5 1 1\n3 4 2", "1 5 2\n4 3 2", "1 6 1\n4 2 3", "1 6 3\n5 3 3", "1 6 2\n4 3 5", "1 6 2\n3 3 2", "1 8 2\n4 3 3", "5 1 1\n4 3 0", "5 1 1\n4 3 2", "5 1 1\n4 1 2"], "output": ["YES\n", "NO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "111_D. Petya and Coloring", "description": "Little Petya loves counting. He wants to count the number of ways to paint a rectangular checkered board of size n × m (n rows, m columns) in k colors. Besides, the coloring should have the following property: for any vertical line that passes along the grid lines and divides the board in two non-empty parts the number of distinct colors in both these parts should be the same. Help Petya to count these colorings.\n\nInput\n\nThe first line contains space-separated integers n, m and k (1 ≤ n, m ≤ 1000, 1 ≤ k ≤ 106) — the board's vertical and horizontal sizes and the number of colors respectively.\n\nOutput\n\nPrint the answer to the problem. As the answer can be quite a large number, you should print it modulo 109 + 7 (1000000007).\n\nExamples\n\nInput\n\n2 2 1\n\n\nOutput\n\n1\n\n\nInput\n\n2 2 2\n\n\nOutput\n\n8\n\n\nInput\n\n3 2 2\n\n\nOutput\n\n40", "testcase": ["3 1 2", "3 2 3", "2 1 1", "2 2 1", "3 2 3", "2 2 1", "2 2 3", "2 1 2", "2 3 2", "3 2 1"], "output": ["                                                               1\n", "                                                               8\n", "                                                              40\n"], "difficulty": 10, "time_limit": {"seconds": 5, "nanos": 0}}
{"name": "1129_A2. Toy Train", "description": "Alice received a set of Toy Train™ from Bob. It consists of one train and a connected railway network of n stations, enumerated from 1 through n. The train occupies one station at a time and travels around the network of stations in a circular manner. More precisely, the immediate station that the train will visit after station i is station i+1 if 1 ≤ i < n or station 1 if i = n. It takes the train 1 second to travel to its next station as described.\n\nBob gave Alice a fun task before he left: to deliver m candies that are initially at some stations to their independent destinations using the train. The candies are enumerated from 1 through m. Candy i (1 ≤ i ≤ m), now at station a_i, should be delivered to station b_i (a_i ≠ b_i).\n\n<image> The blue numbers on the candies correspond to b_i values. The image corresponds to the 1-st example.\n\nThe train has infinite capacity, and it is possible to load off any number of candies at a station. However, only at most one candy can be loaded from a station onto the train before it leaves the station. You can choose any candy at this station. The time it takes to move the candies is negligible.\n\nNow, Alice wonders how much time is needed for the train to deliver all candies. Your task is to find, for each station, the minimum time the train would need to deliver all the candies were it to start from there.\n\nInput\n\nThe first line contains two space-separated integers n and m (2 ≤ n ≤ 5 000; 1 ≤ m ≤ 20 000) — the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 ≤ a_i, b_i ≤ n; a_i ≠ b_i) — the station that initially contains candy i and the destination station of the candy, respectively.\n\nOutput\n\nIn the first and only line, print n space-separated integers, the i-th of which is the minimum time, in seconds, the train would need to deliver all the candies were it to start from station i.\n\nExamples\n\nInput\n\n\n5 7\n2 4\n5 1\n2 3\n3 4\n4 1\n5 3\n3 5\n\n\nOutput\n\n\n10 9 10 10 9 \n\n\nInput\n\n\n2 3\n1 2\n1 2\n1 2\n\n\nOutput\n\n\n5 6 \n\nNote\n\nConsider the second sample.\n\nIf the train started at station 1, the optimal strategy is as follows.\n\n  1. Load the first candy onto the train. \n  2. Proceed to station 2. This step takes 1 second. \n  3. Deliver the first candy. \n  4. Proceed to station 1. This step takes 1 second. \n  5. Load the second candy onto the train. \n  6. Proceed to station 2. This step takes 1 second. \n  7. Deliver the second candy. \n  8. Proceed to station 1. This step takes 1 second. \n  9. Load the third candy onto the train. \n  10. Proceed to station 2. This step takes 1 second. \n  11. Deliver the third candy. \n\n\n\nHence, the train needs 5 seconds to complete the tasks.\n\nIf the train were to start at station 2, however, it would need to move to station 1 before it could load the first candy, which would take one additional second. Thus, the answer in this scenario is 5+1 = 6 seconds.", "testcase": ["2 3\n1 2\n0 2\n1 2", "5 7\n2 4\n5 1\n2 4\n3 3\n3 1\n5 3\n3 5", "2 3\n1 3\n1 2\n0 3", "2 2\n0 3\n1 2\n1 2", "5 6\n2 4\n5 1\n2 2\n3 4\n4 1\n5 3\n2 5", "5 7\n2 4\n5 1\n3 4\n3 4\n4 2\n5 5\n3 5", "2 3\n1 2\n1 1\n1 2", "2 2\n0 3\n1 2\n1 2", "5 6\n2 4\n6 1\n2 4\n3 4\n4 1\n6 3\n3 6", "5 7\n2 4\n5 1\n1 3\n2 5\n4 1\n5 3\n3 5"], "output": ["5 6 ", "10 9 10 10 9 "], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1131_E. String Multiplication", "description": "Roman and Denis are on the trip to the programming competition. Since the trip was long, they soon got bored, and hence decided to came up with something. Roman invented a pizza's recipe, while Denis invented a string multiplication. According to Denis, the result of multiplication (product) of strings s of length m and t is a string t + s_1 + t + s_2 + … + t + s_m + t, where s_i denotes the i-th symbol of the string s, and \"+\" denotes string concatenation. For example, the product of strings \"abc\" and \"de\" is a string \"deadebdecde\", while the product of the strings \"ab\" and \"z\" is a string \"zazbz\". Note, that unlike the numbers multiplication, the product of strings s and t is not necessarily equal to product of t and s.\n\nRoman was jealous of Denis, since he invented such a cool operation, and hence decided to invent something string-related too. Since Roman is beauty-lover, he decided to define the beauty of the string as the length of the longest substring, consisting of only one letter. For example, the beauty of the string \"xayyaaabca\" is equal to 3, since there is a substring \"aaa\", while the beauty of the string \"qwerqwer\" is equal to 1, since all neighboring symbols in it are different.\n\nIn order to entertain Roman, Denis wrote down n strings p_1, p_2, p_3, …, p_n on the paper and asked him to calculate the beauty of the string ( … (((p_1 ⋅ p_2) ⋅ p_3) ⋅ … ) ⋅ p_n, where s ⋅ t denotes a multiplication of strings s and t. Roman hasn't fully realized how Denis's multiplication works, so he asked you for a help. Denis knows, that Roman is very impressionable, he guarantees, that the beauty of the resulting string is at most 10^9.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 100 000) — the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, …, p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.\n\nOutput\n\nPrint exactly one integer — the beauty of the product of the strings.\n\nExamples\n\nInput\n\n\n3\na\nb\na\n\n\nOutput\n\n\n3\n\n\nInput\n\n\n2\nbnn\na\n\n\nOutput\n\n\n1\n\nNote\n\nIn the first example, the product of strings is equal to \"abaaaba\".\n\nIn the second example, the product of strings is equal to \"abanana\".", "testcase": ["3\na\nq\no", "2\nbnd\na", "3\nd\nb\ny", "2\nbnn\np", "3\nc\np\na", "3\na\nr\nz", "3\nt\nb\nl", "2\nbnn\nr", "2\nbnn\no", "2\nbnn\nq"], "output": ["1", "3"], "difficulty": 11, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1140_A. Detective Book", "description": "Ivan recently bought a detective book. The book is so interesting that each page of this book introduces some sort of a mystery, which will be explained later. The i-th page contains some mystery that will be explained on page a_i (a_i ≥ i).\n\nIvan wants to read the whole book. Each day, he reads the first page he didn't read earlier, and continues to read the following pages one by one, until all the mysteries he read about are explained and clear to him (Ivan stops if there does not exist any page i such that Ivan already has read it, but hasn't read page a_i). After that, he closes the book and continues to read it on the following day from the next page.\n\nHow many days will it take to read the whole book?\n\nInput\n\nThe first line contains single integer n (1 ≤ n ≤ 10^4) — the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i ≤ a_i ≤ n), where a_i is the number of page which contains the explanation of the mystery on page i.\n\nOutput\n\nPrint one integer — the number of days it will take to read the whole book.\n\nExample\n\nInput\n\n\n9\n1 3 3 6 7 6 8 8 9\n\n\nOutput\n\n\n4\n\nNote\n\nExplanation of the example test:\n\nDuring the first day Ivan will read only the first page. During the second day Ivan will read pages number 2 and 3. During the third day — pages 4-8. During the fourth (and the last) day Ivan will read remaining page number 9.", "testcase": ["9\n0 2 3 6 7 7 8 8 9", "9\n1 5 2 6 7 6 8 8 9", "9\n1 3 3 7 7 6 9 8 8", "9\n1 3 2 6 7 4 8 8 9", "9\n2 3 3 7 7 6 7 8 9", "9\n1 4 3 6 8 6 8 8 8", "9\n1 2 3 5 7 6 8 8 10", "9\n0 4 3 7 7 6 8 8 9", "9\n2 3 3 7 7 5 8 8 9", "9\n1 3 5 6 6 6 8 8 9"], "output": ["4\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1141_A. Game 23", "description": "Polycarp plays \"Game 23\". Initially he has a number n and his goal is to transform it to m. In one move, he can multiply n by 2 or multiply n by 3. He can perform any number of moves.\n\nPrint the number of moves needed to transform n to m. Print -1 if it is impossible to do so.\n\nIt is easy to prove that any way to transform n to m contains the same number of moves (i.e. number of moves doesn't depend on the way of transformation).\n\nInput\n\nThe only line of the input contains two integers n and m (1 ≤ n ≤ m ≤ 5⋅10^8).\n\nOutput\n\nPrint the number of moves to transform n to m, or -1 if there is no solution.\n\nExamples\n\nInput\n\n\n120 51840\n\n\nOutput\n\n\n7\n\n\nInput\n\n\n42 42\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n48 72\n\n\nOutput\n\n\n-1\n\nNote\n\nIn the first example, the possible sequence of moves is: 120 → 240 → 720 → 1440 → 4320 → 12960 → 25920 → 51840. The are 7 steps in total.\n\nIn the second example, no moves are needed. Thus, the answer is 0.\n\nIn the third example, it is impossible to transform 48 to 72.", "testcase": ["48 73", "48 73", "42 41", "42 43", "48 71", "42 41", "48 73", "42 41", "120 51839", "42 41"], "output": ["0\n", "-1\n", "7\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1144_B. Parity Alternated Deletions", "description": "Polycarp has an array a consisting of n integers.\n\nHe wants to play a game with this array. The game consists of several moves. On the first move he chooses any element and deletes it (after the first move the array contains n-1 elements). For each of the next moves he chooses any element with the only restriction: its parity should differ from the parity of the element deleted on the previous move. In other words, he alternates parities (even-odd-even-odd-... or odd-even-odd-even-...) of the removed elements. Polycarp stops if he can't make a move.\n\nFormally: \n\n  * If it is the first move, he chooses any element and deletes it; \n  * If it is the second or any next move: \n    * if the last deleted element was odd, Polycarp chooses any even element and deletes it; \n    * if the last deleted element was even, Polycarp chooses any odd element and deletes it. \n  * If after some move Polycarp cannot make a move, the game ends. \n\n\n\nPolycarp's goal is to minimize the sum of non-deleted elements of the array after end of the game. If Polycarp can delete the whole array, then the sum of non-deleted elements is zero.\n\nHelp Polycarp find this value.\n\nInput\n\nThe first line of the input contains one integer n (1 ≤ n ≤ 2000) — the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^6), where a_i is the i-th element of a.\n\nOutput\n\nPrint one integer — the minimum possible sum of non-deleted elements of the array after end of the game.\n\nExamples\n\nInput\n\n\n5\n1 5 7 8 2\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n6\n5 1 2 4 6 3\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n2\n1000000 1000000\n\n\nOutput\n\n\n1000000", "testcase": ["6\n5 2 2 4 7 2", "2\n1000001 1000000", "6\n5 1 2 4 6 4", "6\n5 1 1 5 5 3", "2\n1000000 1000001", "5\n1 4 7 8 1", "5\n1 5 7 6 2", "2\n1000000 999999", "6\n3 1 2 4 5 3", "6\n5 1 3 2 6 3"], "output": ["1000000\n", "0\n", "0\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1146_B. Hate \"A\"", "description": "Bob has a string s consisting of lowercase English letters. He defines s' to be the string after removing all \"a\" characters from s (keeping all other characters in the same order). He then generates a new string t by concatenating s and s'. In other words, t=s+s' (look at notes for an example).\n\nYou are given a string t. Your task is to find some s that Bob could have used to generate t. It can be shown that if an answer exists, it will be unique.\n\nInput\n\nThe first line of input contains a string t (1 ≤ |t| ≤ 10^5) consisting of lowercase English letters.\n\nOutput\n\nPrint a string s that could have generated t. It can be shown if an answer exists, it is unique. If no string exists, print \":(\" (without double quotes, there is no space between the characters).\n\nExamples\n\nInput\n\n\naaaaa\n\n\nOutput\n\n\naaaaa\n\n\nInput\n\n\naacaababc\n\n\nOutput\n\n\n:(\n\n\nInput\n\n\nababacacbbcc\n\n\nOutput\n\n\nababacac\n\n\nInput\n\n\nbaba\n\n\nOutput\n\n\n:(\n\nNote\n\nIn the first example, we have s =  \"aaaaa\", and s' =  \"\".\n\nIn the second example, no such s can work that will generate the given t.\n\nIn the third example, we have s =  \"ababacac\", and s' =  \"bbcc\", and t = s + s' =  \"ababacacbbcc\".", "testcase": ["ababacacbbzc", "babg", "kaba", "aaaad", "aaaoa", "ababacycbbcc", "ayaaa", "aauaababc", "ababacatbbcc", "abaaa"], "output": ["ababacac", ":(", ":(", "aaaaa"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1159_A. A pile of stones", "description": "Vasya has a pile, that consists of some number of stones. n times he either took one stone from the pile or added one stone to the pile. The pile was non-empty before each operation of taking one stone from the pile.\n\nYou are given n operations which Vasya has made. Find the minimal possible number of stones that can be in the pile after making these operations.\n\nInput\n\nThe first line contains one positive integer n — the number of operations, that have been made by Vasya (1 ≤ n ≤ 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).\n\nOutput\n\nPrint one integer — the minimal possible number of stones that can be in the pile after these n operations.\n\nExamples\n\nInput\n\n\n3\n---\n\n\nOutput\n\n\n0\n\nInput\n\n\n4\n++++\n\n\nOutput\n\n\n4\n\nInput\n\n\n2\n-+\n\n\nOutput\n\n\n1\n\nInput\n\n\n5\n++-++\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first test, if Vasya had 3 stones in the pile at the beginning, after making operations the number of stones will be equal to 0. It is impossible to have less number of piles, so the answer is 0. Please notice, that the number of stones at the beginning can't be less, than 3, because in this case, Vasya won't be able to take a stone on some operation (the pile will be empty).\n\nIn the second test, if Vasya had 0 stones in the pile at the beginning, after making operations the number of stones will be equal to 4. It is impossible to have less number of piles because after making 4 operations the number of stones in the pile increases on 4 stones. So, the answer is 4.\n\nIn the third test, if Vasya had 1 stone in the pile at the beginning, after making operations the number of stones will be equal to 1. It can be proved, that it is impossible to have less number of stones after making the operations.\n\nIn the fourth test, if Vasya had 0 stones in the pile at the beginning, after making operations the number of stones will be equal to 3.", "testcase": ["5\n-++++", "5\n-++++", "4\n++++", "4\n++++", "3\n---", "5\n+-+++", "3\n---", "4\n++++", "3\n---", "2\n+-"], "output": ["1\n", "0\n", "3\n", "4\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "This problem is same as the next one, but has smaller constraints.\n\nIt was a Sunday morning when the three friends Selena, Shiro and Katie decided to have a trip to the nearby power station (do not try this at home). After arriving at the power station, the cats got impressed with a large power transmission system consisting of many chimneys, electric poles, and wires. Since they are cats, they found those things gigantic.\n\nAt the entrance of the station, there is a map describing the complicated wiring system. Selena is the best at math among three friends. He decided to draw the map on the Cartesian plane. Each pole is now a point at some coordinates (x_i, y_i). Since every pole is different, all of the points representing these poles are distinct. Also, every two poles are connected with each other by wires. A wire is a straight line on the plane infinite in both directions. If there are more than two poles lying on the same line, they are connected by a single common wire.\n\nSelena thinks, that whenever two different electric wires intersect, they may interfere with each other and cause damage. So he wonders, how many pairs are intersecting? Could you help him with this problem?\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 50) — the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 ≤ x_i, y_i ≤ 10^4) — the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.\n\nOutput\n\nPrint a single integer — the number of pairs of wires that are intersecting.\n\nExamples\n\nInput\n\n\n4\n0 0\n1 1\n0 3\n1 2\n\n\nOutput\n\n\n14\n\n\nInput\n\n\n4\n0 0\n0 2\n0 4\n2 0\n\n\nOutput\n\n\n6\n\n\nInput\n\n\n3\n-1 -1\n1 0\n3 1\n\n\nOutput\n\n\n0\n\nNote\n\nIn the first example:\n\n<image>\n\nIn the second example:\n\n<image>\n\nNote that the three poles (0, 0), (0, 2) and (0, 4) are connected by a single wire.\n\nIn the third example:\n\n<image>", "testcase": ["4\n0 -1\n1 2\n0 4\n2 1", "4\n0 -1\n1 1\n-1 3\n1 1", "3\n-1 0\n-1 0\n3 1", "3\n0 -2\n1 0\n2 1", "4\n-1 0\n-1 2\n0 3\n2 0", "4\n1 1\n0 1\n0 4\n2 0", "4\n1 0\n2 1\n0 3\n1 1", "4\n0 0\n1 2\n-1 2\n1 2", "4\n1 0\n2 1\n0 4\n1 2", "4\n0 0\n-1 2\n0 4\n2 -2"], "output": ["14\n", "6\n", "0\n"], "difficulty": 9, "time_limit": {"seconds": 3, "nanos": 0}}
{"name": "1166_A. Silent Classroom", "description": "There are n students in the first grade of Nlogonia high school. The principal wishes to split the students into two classrooms (each student must be in exactly one of the classrooms). Two distinct students whose name starts with the same letter will be chatty if they are put in the same classroom (because they must have a lot in common). Let x be the number of such pairs of students in a split. Pairs (a, b) and (b, a) are the same and counted only once.\n\nFor example, if there are 6 students: \"olivia\", \"jacob\", \"tanya\", \"jack\", \"oliver\" and \"jessica\", then:\n\n  * splitting into two classrooms (\"jack\", \"jacob\", \"jessica\", \"tanya\") and (\"olivia\", \"oliver\") will give x=4 (3 chatting pairs in the first classroom, 1 chatting pair in the second classroom), \n  * splitting into two classrooms (\"jack\", \"tanya\", \"olivia\") and (\"jessica\", \"oliver\", \"jacob\") will give x=1 (0 chatting pairs in the first classroom, 1 chatting pair in the second classroom). \n\n\n\nYou are given the list of the n names. What is the minimum x we can obtain by splitting the students into classrooms?\n\nNote that it is valid to place all of the students in one of the classrooms, leaving the other one empty.\n\nInput\n\nThe first line contains a single integer n (1≤ n ≤ 100) — the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.\n\nOutput\n\nThe output must consist of a single integer x — the minimum possible number of chatty pairs.\n\nExamples\n\nInput\n\n\n4\njorge\njose\noscar\njerry\n\n\nOutput\n\n\n1\n\n\nInput\n\n\n7\nkambei\ngorobei\nshichiroji\nkyuzo\nheihachi\nkatsushiro\nkikuchiyo\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n5\nmike\nmike\nmike\nmike\nmike\n\n\nOutput\n\n\n4\n\nNote\n\nIn the first sample the minimum number of pairs is 1. This can be achieved, for example, by putting everyone except jose in one classroom, and jose in the other, so jorge and jerry form the only chatty pair.\n\nIn the second sample the minimum number of pairs is 2. This can be achieved, for example, by putting kambei, gorobei, shichiroji and kyuzo in one room and putting heihachi, katsushiro and kikuchiyo in the other room. In this case the two pairs are kambei and kyuzo, and katsushiro and kikuchiyo.\n\nIn the third sample the minimum number of pairs is 4. This can be achieved by placing three of the students named mike in one classroom and the other two students in another classroom. Thus there will be three chatty pairs in one classroom and one chatty pair in the other classroom.", "testcase": ["7\nkambei\ngorobei\nshichiroji\nkyuwo\nheizacti\nkatsushiro\nkikuchiyo", "7\nkambec\ngorobei\nshichiroji\npyuzo\nhvihachi\nkatsushiro\nkikuchiyo", "5\ncike\nmike\nmike\nmikb\nmike", "5\nmike\nmike\nmike\nmiue\nmikd", "4\njokge\njosw\noscar\njerry", "5\npike\nmike\nmike\nmike\naike", "4\njorge\njosk\noscjr\njerry", "4\njorge\njqse\noscar\njerrt", "5\nmike\nmdke\nmike\nfike\nmike", "5\nmike\nmiky\nmike\nuike\nmike"], "output": ["2\n", "1\n", "4\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "117_B. Very Interesting Game", "description": "In a very ancient country the following game was popular. Two people play the game. Initially first player writes a string s1, consisting of exactly nine digits and representing a number that does not exceed a. After that second player looks at s1 and writes a string s2, consisting of exactly nine digits and representing a number that does not exceed b. Here a and b are some given constants, s1 and s2 are chosen by the players. The strings are allowed to contain leading zeroes.\n\nIf a number obtained by the concatenation (joining together) of strings s1 and s2 is divisible by mod, then the second player wins. Otherwise the first player wins. You are given numbers a, b, mod. Your task is to determine who wins if both players play in the optimal manner. If the first player wins, you are also required to find the lexicographically minimum winning move.\n\nInput\n\nThe first line contains three integers a, b, mod (0 ≤ a, b ≤ 109, 1 ≤ mod ≤ 107).\n\nOutput\n\nIf the first player wins, print \"1\" and the lexicographically minimum string s1 he has to write to win. If the second player wins, print the single number \"2\".\n\nExamples\n\nInput\n\n1 10 7\n\n\nOutput\n\n2\n\n\nInput\n\n4 0 9\n\n\nOutput\n\n1 000000001\n\nNote\n\nThe lexical comparison of strings is performed by the < operator in modern programming languages. String x is lexicographically less than string y if exists such i (1 ≤ i ≤ 9), that xi < yi, and for any j (1 ≤ j < i) xj = yj. These strings always have length 9.", "testcase": ["1 11 7", "1 10 8", "4 -1 9", "4 0 8", "1 10 6", "1 10 6", "1 10 8", "4 -1 9", "1 9 7", "4 -1 9"], "output": ["1 000000001\n", "2\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1180_A. Alex and a Rhombus", "description": "While playing with geometric figures Alex has accidentally invented a concept of a n-th order rhombus in a cell grid.\n\nA 1-st order rhombus is just a square 1 × 1 (i.e just a cell).\n\nA n-th order rhombus for all n ≥ 2 one obtains from a n-1-th order rhombus adding all cells which have a common side with it to it (look at the picture to understand it better).\n\n<image>\n\nAlex asks you to compute the number of cells in a n-th order rhombus.\n\nInput\n\nThe first and only input line contains integer n (1 ≤ n ≤ 100) — order of a rhombus whose numbers of cells should be computed.\n\nOutput\n\nPrint exactly one integer — the number of cells in a n-th order rhombus.\n\nExamples\n\nInput\n\n\n1\n\n\nOutput\n\n\n1\n\nInput\n\n\n2\n\n\nOutput\n\n\n5\n\nInput\n\n\n3\n\n\nOutput\n\n\n13\n\nNote\n\nImages of rhombus corresponding to the examples are given in the statement.", "testcase": ["2", "2", "1", "2", "3", "2", "2", "0", "2", "0"], "output": ["13\n", "1\n", "5\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1181_A. Chunga-Changa", "description": "Soon after the Chunga-Changa island was discovered, it started to acquire some forms of civilization and even market economy. A new currency arose, colloquially called \"chizhik\". One has to pay in chizhiks to buy a coconut now.\n\nSasha and Masha are about to buy some coconuts which are sold at price z chizhiks per coconut. Sasha has x chizhiks, Masha has y chizhiks. Each girl will buy as many coconuts as she can using only her money. This way each girl will buy an integer non-negative number of coconuts.\n\nThe girls discussed their plans and found that the total number of coconuts they buy can increase (or decrease) if one of them gives several chizhiks to the other girl. The chizhiks can't be split in parts, so the girls can only exchange with integer number of chizhiks.\n\nConsider the following example. Suppose Sasha has 5 chizhiks, Masha has 4 chizhiks, and the price for one coconut be 3 chizhiks. If the girls don't exchange with chizhiks, they will buy 1 + 1 = 2 coconuts. However, if, for example, Masha gives Sasha one chizhik, then Sasha will have 6 chizhiks, Masha will have 3 chizhiks, and the girls will buy 2 + 1 = 3 coconuts. \n\nIt is not that easy to live on the island now, so Sasha and Mash want to exchange with chizhiks in such a way that they will buy the maximum possible number of coconuts. Nobody wants to have a debt, so among all possible ways to buy the maximum possible number of coconuts find such a way that minimizes the number of chizhiks one girl gives to the other (it is not important who will be the person giving the chizhiks).\n\nInput\n\nThe first line contains three integers x, y and z (0 ≤ x, y ≤ 10^{18}, 1 ≤ z ≤ 10^{18}) — the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut. \n\nOutput\n\nPrint two integers: the maximum possible number of coconuts the girls can buy and the minimum number of chizhiks one girl has to give to the other.\n\nExamples\n\nInput\n\n\n5 4 3\n\n\nOutput\n\n\n3 1\n\n\nInput\n\n\n6 8 2\n\n\nOutput\n\n\n7 0\n\nNote\n\nThe first example is described in the statement. In the second example the optimal solution is to dot exchange any chizhiks. The girls will buy 3 + 4 = 7 coconuts.", "testcase": ["6 8 3", "5 4 2", "6 8 1", "6 8 1", "5 3 3", "5 4 2", "6 9 2", "5 5 3", "5 5 3", "5 4 4"], "output": ["7 0\n", "3 1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1185_A. Ropewalkers", "description": "Polycarp decided to relax on his weekend and visited to the performance of famous ropewalkers: Agafon, Boniface and Konrad.\n\nThe rope is straight and infinite in both directions. At the beginning of the performance, Agafon, Boniface and Konrad are located in positions a, b and c respectively. At the end of the performance, the distance between each pair of ropewalkers was at least d.\n\nRopewalkers can walk on the rope. In one second, only one ropewalker can change his position. Every ropewalker can change his position exactly by 1 (i. e. shift by 1 to the left or right direction on the rope). Agafon, Boniface and Konrad can not move at the same time (Only one of them can move at each moment). Ropewalkers can be at the same positions at the same time and can \"walk past each other\".\n\nYou should find the minimum duration (in seconds) of the performance. In other words, find the minimum number of seconds needed so that the distance between each pair of ropewalkers can be greater or equal to d.\n\nRopewalkers can walk to negative coordinates, due to the rope is infinite to both sides.\n\nInput\n\nThe only line of the input contains four integers a, b, c, d (1 ≤ a, b, c, d ≤ 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.\n\nOutput\n\nOutput one integer — the minimum duration (in seconds) of the performance.\n\nExamples\n\nInput\n\n\n5 2 6 3\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n3 1 5 6\n\n\nOutput\n\n\n8\n\n\nInput\n\n\n8 3 3 2\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n2 3 10 4\n\n\nOutput\n\n\n3\n\nNote\n\nIn the first example: in the first two seconds Konrad moves for 2 positions to the right (to the position 8), while Agafon and Boniface stay at their positions. Thus, the distance between Agafon and Boniface will be |5 - 2| = 3, the distance between Boniface and Konrad will be |2 - 8| = 6 and the distance between Agafon and Konrad will be |5 - 8| = 3. Therefore, all three pairwise distances will be at least d=3, so the performance could be finished within 2 seconds.", "testcase": ["3 -1 5 6", "5 2 7 2", "2 3 8 4", "3 1 4 7", "8 1 3 2", "3 1 5 6", "5 2 7 2", "3 -1 5 6", "2 4 9 4", "5 2 6 3"], "output": ["2\n", "3\n", "8\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1189_D1. Add on a Tree", "description": "Note that this is the first problem of the two similar problems. You can hack this problem only if you solve both problems.\n\nYou are given a tree with n nodes. In the beginning, 0 is written on all edges. In one operation, you can choose any 2 distinct leaves u, v and any real number x and add x to values written on all edges on the simple path between u and v.\n\nFor example, on the picture below you can see the result of applying two operations to the graph: adding 2 on the path from 7 to 6, and then adding -0.5 on the path from 4 to 5. \n\n<image>\n\nIs it true that for any configuration of real numbers written on edges, we can achieve it with a finite number of operations?\n\nLeaf is a node of a tree of degree 1. Simple path is a path that doesn't contain any node twice.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 10^5) — the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 ≤ u, v ≤ n, u ≠ v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.\n\nOutput\n\nIf there is a configuration of real numbers written on edges of the tree that we can't achieve by performing the operations, output \"NO\". \n\nOtherwise, output \"YES\". \n\nYou can print each letter in any case (upper or lower).\n\nExamples\n\nInput\n\n\n2\n1 2\n\n\nOutput\n\n\nYES\n\nInput\n\n\n3\n1 2\n2 3\n\n\nOutput\n\n\nNO\n\nInput\n\n\n5\n1 2\n1 3\n1 4\n2 5\n\n\nOutput\n\n\nNO\n\nInput\n\n\n6\n1 2\n1 3\n1 4\n2 5\n2 6\n\n\nOutput\n\n\nYES\n\nNote\n\nIn the first example, we can add any real x to the value written on the only edge (1, 2).\n\n<image>\n\nIn the second example, one of configurations that we can't reach is 0 written on (1, 2) and 1 written on (2, 3).\n\n<image>\n\nBelow you can see graphs from examples 3, 4:\n\n<image> <image>", "testcase": ["5\n1 2\n1 3\n1 5\n2 5", "6\n1 2\n1 3\n1 4\n3 3\n2 7", "3\n1 1\n2 4", "3\n2 1\n2 3", "2\n0 2", "2\n2 2", "2\n1 3", "6\n1 2\n1 3\n1 3\n2 5\n2 7", "3\n2 2\n1 3", "3\n1 2\n3 4"], "output": ["YES", "NO", "NO", "YES"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "118_D. Caesar's Legions", "description": "Gaius Julius Caesar, a famous general, loved to line up his soldiers. Overall the army had n1 footmen and n2 horsemen. Caesar thought that an arrangement is not beautiful if somewhere in the line there are strictly more that k1 footmen standing successively one after another, or there are strictly more than k2 horsemen standing successively one after another. Find the number of beautiful arrangements of the soldiers. \n\nNote that all n1 + n2 warriors should be present at each arrangement. All footmen are considered indistinguishable among themselves. Similarly, all horsemen are considered indistinguishable among themselves.\n\nInput\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 ≤ n1, n2 ≤ 100, 1 ≤ k1, k2 ≤ 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.\n\nOutput\n\nPrint the number of beautiful arrangements of the army modulo 100000000 (108). That is, print the number of such ways to line up the soldiers, that no more than k1 footmen stand successively, and no more than k2 horsemen stand successively.\n\nExamples\n\nInput\n\n2 1 1 10\n\n\nOutput\n\n1\n\n\nInput\n\n2 3 1 2\n\n\nOutput\n\n5\n\n\nInput\n\n2 4 1 1\n\n\nOutput\n\n0\n\nNote\n\nLet's mark a footman as 1, and a horseman as 2.\n\nIn the first sample the only beautiful line-up is: 121\n\nIn the second sample 5 beautiful line-ups exist: 12122, 12212, 21212, 21221, 22121", "testcase": ["2 1 -1 10", "2 1 -1 10", "2 3 1 2", "2 4 0 2", "2 2 1 9", "2 4 1 1", "2 5 1 2", "2 3 1 2", "2 1 2 9", "2 3 1 2"], "output": ["1\n", "5\n", "0\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Tokitsukaze is one of the characters in the game \"Kantai Collection\". In this game, every character has a common attribute — health points, shortened to HP.\n\nIn general, different values of HP are grouped into 4 categories:\n\n  * Category A if HP is in the form of (4 n + 1), that is, when divided by 4, the remainder is 1; \n  * Category B if HP is in the form of (4 n + 3), that is, when divided by 4, the remainder is 3; \n  * Category C if HP is in the form of (4 n + 2), that is, when divided by 4, the remainder is 2; \n  * Category D if HP is in the form of 4 n, that is, when divided by 4, the remainder is 0. \n\n\n\nThe above-mentioned n can be any integer.\n\nThese 4 categories ordered from highest to lowest as A > B > C > D, which means category A is the highest and category D is the lowest.\n\nWhile playing the game, players can increase the HP of the character. Now, Tokitsukaze wants you to increase her HP by at most 2 (that is, either by 0, 1 or 2). How much should she increase her HP so that it has the highest possible category?\n\nInput\n\nThe only line contains a single integer x (30 ≤ x ≤ 100) — the value Tokitsukaze's HP currently.\n\nOutput\n\nPrint an integer a (0 ≤ a ≤ 2) and an uppercase letter b (b ∈ { A, B, C, D }), representing that the best way is to increase her HP by a, and then the category becomes b.\n\nNote that the output characters are case-sensitive.\n\nExamples\n\nInput\n\n\n33\n\n\nOutput\n\n\n0 A\n\n\nInput\n\n\n98\n\n\nOutput\n\n\n1 B\n\nNote\n\nFor the first example, the category of Tokitsukaze's HP is already A, so you don't need to enhance her ability.\n\nFor the second example:\n\n  * If you don't increase her HP, its value is still 98, which equals to (4 × 24 + 2), and its category is C. \n  * If you increase her HP by 1, its value becomes 99, which equals to (4 × 24 + 3), and its category becomes B. \n  * If you increase her HP by 2, its value becomes 100, which equals to (4 × 25), and its category becomes D. \n\n\n\nTherefore, the best way is to increase her HP by 1 so that the category of her HP becomes B.", "testcase": ["97", "34", "32", "97", "32", "32", "97", "32", "32", "99"], "output": ["0 A\n", "1 B\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "119_A. Epic Game", "description": "Simon and Antisimon play a game. Initially each player receives one fixed positive integer that doesn't change throughout the game. Simon receives number a and Antisimon receives number b. They also have a heap of n stones. The players take turns to make a move and Simon starts. During a move a player should take from the heap the number of stones equal to the greatest common divisor of the fixed number he has received and the number of stones left in the heap. A player loses when he cannot take the required number of stones (i. e. the heap has strictly less stones left than one needs to take). \n\nYour task is to determine by the given a, b and n who wins the game.\n\nInput\n\nThe only string contains space-separated integers a, b and n (1 ≤ a, b, n ≤ 100) — the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.\n\nOutput\n\nIf Simon wins, print \"0\" (without the quotes), otherwise print \"1\" (without the quotes).\n\nExamples\n\nInput\n\n3 5 9\n\n\nOutput\n\n0\n\nInput\n\n1 1 100\n\n\nOutput\n\n1\n\nNote\n\nThe greatest common divisor of two non-negative integers a and b is such maximum positive integer k, that a is divisible by k without remainder and similarly, b is divisible by k without remainder. Let gcd(a, b) represent the operation of calculating the greatest common divisor of numbers a and b. Specifically, gcd(x, 0) = gcd(0, x) = x.\n\nIn the first sample the game will go like that:\n\n  * Simon should take gcd(3, 9) = 3 stones from the heap. After his move the heap has 6 stones left.\n  * Antisimon should take gcd(5, 6) = 1 stone from the heap. After his move the heap has 5 stones left.\n  * Simon should take gcd(3, 5) = 1 stone from the heap. After his move the heap has 4 stones left.\n  * Antisimon should take gcd(5, 4) = 1 stone from the heap. After his move the heap has 3 stones left.\n  * Simon should take gcd(3, 3) = 3 stones from the heap. After his move the heap has 0 stones left.\n  * Antisimon should take gcd(5, 0) = 5 stones from the heap. As 0 < 5, it is impossible and Antisimon loses.\n\n\n\nIn the second sample each player during each move takes one stone from the heap. As n is even, Antisimon takes the last stone and Simon can't make a move after that.", "testcase": ["3 5 8", "3 5 8", "1 1 99", "1 1 101", "1 2 100", "1 2 100", "3 5 8", "3 4 9", "1 1 101", "1 2 100"], "output": ["0\n", "1\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1203_E. Boxers", "description": "There are n boxers, the weight of the i-th boxer is a_i. Each of them can change the weight by no more than 1 before the competition (the weight cannot become equal to zero, that is, it must remain positive). Weight is always an integer number.\n\nIt is necessary to choose the largest boxing team in terms of the number of people, that all the boxers' weights in the team are different (i.e. unique).\n\nWrite a program that for given current values ​a_i will find the maximum possible number of boxers in a team.\n\nIt is possible that after some change the weight of some boxer is 150001 (but no more).\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 150000) — the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 ≤ a_i ≤ 150000) is the weight of the i-th boxer.\n\nOutput\n\nPrint a single integer — the maximum possible number of people in a team.\n\nExamples\n\nInput\n\n4\n3 2 4 1\n\n\nOutput\n\n4\n\n\nInput\n\n6\n1 1 1 4 4 4\n\n\nOutput\n\n5\n\nNote\n\nIn the first example, boxers should not change their weights — you can just make a team out of all of them.\n\nIn the second example, one boxer with a weight of 1 can be increased by one (get the weight of 2), one boxer with a weight of 4 can be reduced by one, and the other can be increased by one (resulting the boxers with a weight of 3 and 5, respectively). Thus, you can get a team consisting of boxers with weights of 5, 4, 3, 2, 1.", "testcase": ["4\n3 2 2 1", "4\n3 2 4 1", "6\n1 1 2 5 5 4", "4\n3 2 4 1", "6\n0 1 1 5 3 4", "6\n1 1 2 4 3 5", "4\n3 1 5 1", "4\n3 2 4 1", "4\n3 1 5 1", "6\n1 0 1 5 4 3"], "output": ["5\n", "4\n"], "difficulty": 11, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "The only difference between easy and hard versions is the length of the string. You can hack this problem only if you solve both problems.\n\nKirk has a binary string s (a string which consists of zeroes and ones) of length n and he is asking you to find a binary string t of the same length which satisfies the following conditions:\n\n  * For any l and r (1 ≤ l ≤ r ≤ n) the length of the longest non-decreasing subsequence of the substring s_{l}s_{l+1} … s_{r} is equal to the length of the longest non-decreasing subsequence of the substring t_{l}t_{l+1} … t_{r};\n  * The number of zeroes in t is the maximum possible.\n\n\n\nA non-decreasing subsequence of a string p is a sequence of indices i_1, i_2, …, i_k such that i_1 < i_2 < … < i_k and p_{i_1} ≤ p_{i_2} ≤ … ≤ p_{i_k}. The length of the subsequence is k.\n\nIf there are multiple substrings which satisfy the conditions, output any.\n\nInput\n\nThe first line contains a binary string of length not more than 2\\: 000.\n\nOutput\n\nOutput a binary string which satisfied the above conditions. If there are many such strings, output any of them.\n\nExamples\n\nInput\n\n\n110\n\n\nOutput\n\n\n010\n\n\nInput\n\n\n010\n\n\nOutput\n\n\n010\n\n\nInput\n\n\n0001111\n\n\nOutput\n\n\n0000000\n\n\nInput\n\n\n0111001100111011101000\n\n\nOutput\n\n\n0011001100001011101000\n\nNote\n\nIn the first example: \n\n  * For the substrings of the length 1 the length of the longest non-decreasing subsequnce is 1; \n  * For l = 1, r = 2 the longest non-decreasing subsequnce of the substring s_{1}s_{2} is 11 and the longest non-decreasing subsequnce of the substring t_{1}t_{2} is 01; \n  * For l = 1, r = 3 the longest non-decreasing subsequnce of the substring s_{1}s_{3} is 11 and the longest non-decreasing subsequnce of the substring t_{1}t_{3} is 00; \n  * For l = 2, r = 3 the longest non-decreasing subsequnce of the substring s_{2}s_{3} is 1 and the longest non-decreasing subsequnce of the substring t_{2}t_{3} is 1; \n\n\n\nThe second example is similar to the first one.", "testcase": ["1112", "111", "111001100111011100999", "111", "111001100111011101001", "111", "1110", "9", "111001100111011100999", "11"], "output": ["0011001100001011101000\n", "0000000\n", "010\n", "010\n"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1208_A. XORinacci", "description": "Cengiz recently learned Fibonacci numbers and now he is studying different algorithms to find them. After getting bored of reading them, he came with his own new type of numbers that he named XORinacci numbers. He defined them as follows: \n\n  * f(0) = a; \n  * f(1) = b; \n  * f(n) = f(n-1) ⊕ f(n-2) when n > 1, where ⊕ denotes the [bitwise XOR operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR). \n\n\n\nYou are given three integers a, b, and n, calculate f(n).\n\nYou have to answer for T independent test cases.\n\nInput\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 ≤ T ≤ 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 ≤ a, b, n ≤ 10^9) respectively.\n\nOutput\n\nFor each test case, output f(n).\n\nExample\n\nInput\n\n\n3\n3 4 2\n4 5 0\n325 265 1231232\n\n\nOutput\n\n\n7\n4\n76\n\nNote\n\nIn the first example, f(2) = f(0) ⊕ f(1) = 3 ⊕ 4 = 7.", "testcase": ["3\n2 4 2\n5 5 0\n325 264 1231232", "3\n3 4 2\n4 5 0\n326 265 1231232", "3\n4 4 2\n4 5 0\n325 265 1231232", "3\n3 4 2\n3 5 0\n325 265 1231232", "3\n3 5 2\n4 5 0\n324 265 1231231", "3\n3 4 1\n3 5 -1\n325 265 1231232", "3\n3 3 2\n4 5 0\n326 265 1231231", "3\n3 3 2\n4 5 0\n325 265 1231232", "3\n2 3 2\n4 6 0\n325 265 1231232", "3\n2 4 2\n4 5 0\n324 264 1231232"], "output": ["7\n4\n76\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1213_B. Bad Prices", "description": "Polycarp analyzes the prices of the new berPhone. At his disposal are the prices for n last days: a_1, a_2, ..., a_n, where a_i is the price of berPhone on the day i.\n\nPolycarp considers the price on the day i to be bad if later (that is, a day with a greater number) berPhone was sold at a lower price. For example, if n=6 and a=[3, 9, 4, 6, 7, 5], then the number of days with a bad price is 3 — these are days 2 (a_2=9), 4 (a_4=6) and 5 (a_5=7).\n\nPrint the number of days with a bad price.\n\nYou have to answer t independent data sets.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 10000) — the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 ≤ n ≤ 150000) — the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.\n\nOutput\n\nPrint t integers, the j-th of which should be equal to the number of days with a bad price in the j-th input data set.\n\nExample\n\nInput\n\n\n5\n6\n3 9 4 6 7 5\n1\n1000000\n2\n2 1\n10\n31 41 59 26 53 58 97 93 23 84\n7\n3 2 1 2 3 4 5\n\n\nOutput\n\n\n3\n0\n1\n8\n2", "testcase": ["5\n6\n3 9 3 6 8 4\n1\n1000000\n2\n1 1\n10\n32 41 59 26 53 57 97 93 23 84\n7\n4 3 1 1 2 4 5", "5\n6\n3 9 2 5 7 5\n1\n1000001\n1\n3 1\n10\n31 41 59 26 52 58 97 92 24 83\n7\n3 2 1 2 3 4 5", "5\n5\n3 8 4 6 6 5\n1\n1000001\n2\n2 1\n10\n31 42 59 26 53 58 97 94 23 85\n7\n3 2 1 2 2 4 5", "5\n6\n3 9 4 7 7 4\n0\n1000000\n2\n3 1\n10\n31 42 59 26 53 58 97 93 23 85\n6\n3 2 1 3 3 4 7", "5\n6\n3 9 4 6 7 6\n1\n1000000\n2\n2 1\n10\n32 40 59 26 53 58 97 92 24 84\n7\n3 1 1 2 3 4 5", "5\n6\n3 9 4 6 8 5\n1\n1000000\n1\n2 1\n10\n31 40 60 26 54 59 98 93 23 83\n7\n3 1 1 2 3 4 4", "5\n7\n4 8 4 6 6 5\n1\n1000000\n2\n1 1\n12\n31 41 59 26 53 58 97 93 23 84\n7\n3 1 1 2 3 4 5", "5\n6\n3 9 6 6 7 5\n1\n1000000\n3\n3 1\n10\n31 41 59 25 53 58 97 92 23 84\n7\n3 1 2 1 3 5 5", "5\n6\n3 10 4 6 7 5\n2\n1000000\n2\n2 2\n11\n31 41 59 26 54 59 97 93 23 84\n7\n2 2 1 0 4 4 5", "5\n6\n3 9 4 6 7 4\n1\n1000000\n2\n2 1\n10\n30 41 58 27 53 58 97 93 23 84\n7\n3 2 1 0 3 5 4"], "output": ["3\n0\n1\n8\n2\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1217_C. The Number Of Good Substrings", "description": "You are given a binary string s (recall that a string is binary if each character is either 0 or 1).\n\nLet f(t) be the decimal representation of integer t written in binary form (possibly with leading zeroes). For example f(011) = 3, f(00101) = 5, f(00001) = 1, f(10) = 2, f(000) = 0 and f(000100) = 4.\n\nThe substring s_{l}, s_{l+1}, ... , s_{r} is good if r - l + 1 = f(s_l ... s_r).\n\nFor example string s = 1011 has 5 good substrings: s_1 ... s_1 = 1, s_3 ... s_3 = 1, s_4 ... s_4 = 1, s_1 ... s_2 = 10 and s_2 ... s_4 = 011. \n\nYour task is to calculate the number of good substrings of string s.\n\nYou have to answer t independent queries.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of queries.\n\nThe only line of each query contains string s (1 ≤ |s| ≤ 2 ⋅ 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that ∑_{i=1}^{t} |s_i| ≤ 2 ⋅ 10^5.\n\nOutput\n\nFor each query print one integer — the number of good substrings of string s.\n\nExample\n\nInput\n\n\n4\n0110\n0101\n00001000\n0001000\n\n\nOutput\n\n\n4\n3\n4\n3", "testcase": ["4\n0110\n102\n00001000\n1001", "4\n108\n0101\n00001000\n0001000", "4\n109\n0101\n00001000\n1001", "4\n0110\n100\n00001000\n1001", "4\n0110\n102\n1001\n0001000", "4\n0110\n0101\n1001\n999", "4\n0110\n0101\n999\n1001", "4\n0110\n102\n1001\n0001000", "4\n0110\n0101\n999\n1001", "4\n0110\n102\n00001000\n999"], "output": ["4\n3\n4\n3\n"], "difficulty": 9, "time_limit": {"seconds": 4, "nanos": 0}}
{"name": "121_C. Lucky Permutation", "description": "Petya loves lucky numbers. Everybody knows that lucky numbers are positive integers whose decimal representation contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nOne day Petya dreamt of a lexicographically k-th permutation of integers from 1 to n. Determine how many lucky numbers in the permutation are located on the positions whose indexes are also lucky numbers.\n\nInput\n\nThe first line contains two integers n and k (1 ≤ n, k ≤ 109) — the number of elements in the permutation and the lexicographical number of the permutation.\n\nOutput\n\nIf the k-th permutation of numbers from 1 to n does not exist, print the single number \"-1\" (without the quotes). Otherwise, print the answer to the problem: the number of such indexes i, that i and ai are both lucky numbers.\n\nExamples\n\nInput\n\n7 4\n\n\nOutput\n\n1\n\n\nInput\n\n4 7\n\n\nOutput\n\n1\n\nNote\n\nA permutation is an ordered set of n elements, where each integer from 1 to n occurs exactly once. The element of permutation in position with index i is denoted as ai (1 ≤ i ≤ n). Permutation a is lexicographically smaller that permutation b if there is such a i (1 ≤ i ≤ n), that ai < bi, and for any j (1 ≤ j < i) aj = bj. Let's make a list of all possible permutations of n elements and sort it in the order of lexicographical increasing. Then the lexicographically k-th permutation is the k-th element of this list of permutations.\n\nIn the first sample the permutation looks like that:\n\n1 2 3 4 6 7 5\n\nThe only suitable position is 4.\n\nIn the second sample the permutation looks like that:\n\n2 1 3 4\n\nThe only suitable position is 4.", "testcase": ["7 5", "4 6", "7 3", "4 8", "4 8", "4 8", "7 3", "7 3", "4 6", "7 5"], "output": ["1", "1"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1220_C. Substring Game in the Lesson", "description": "Mike and Ann are sitting in the classroom. The lesson is boring, so they decided to play an interesting game. Fortunately, all they need to play this game is a string s and a number k (0 ≤ k < |s|).\n\nAt the beginning of the game, players are given a substring of s with left border l and right border r, both equal to k (i.e. initially l=r=k). Then players start to make moves one by one, according to the following rules:\n\n  * A player chooses l^{\\prime} and r^{\\prime} so that l^{\\prime} ≤ l, r^{\\prime} ≥ r and s[l^{\\prime}, r^{\\prime}] is lexicographically less than s[l, r]. Then the player changes l and r in this way: l := l^{\\prime}, r := r^{\\prime}.\n  * Ann moves first.\n  * The player, that can't make a move loses.\n\n\n\nRecall that a substring s[l, r] (l ≤ r) of a string s is a continuous segment of letters from s that starts at position l and ends at position r. For example, \"ehn\" is a substring (s[3, 5]) of \"aaaehnsvz\" and \"ahz\" is not.\n\nMike and Ann were playing so enthusiastically that they did not notice the teacher approached them. Surprisingly, the teacher didn't scold them, instead of that he said, that he can figure out the winner of the game before it starts, even if he knows only s and k.\n\nUnfortunately, Mike and Ann are not so keen in the game theory, so they ask you to write a program, that takes s and determines the winner for all possible k.\n\nInput\n\nThe first line of the input contains a single string s (1 ≤ |s| ≤ 5 ⋅ 10^5) consisting of lowercase English letters.\n\nOutput\n\nPrint |s| lines.\n\nIn the line i write the name of the winner (print Mike or Ann) in the game with string s and k = i, if both play optimally\n\nExamples\n\nInput\n\n\nabba\n\n\nOutput\n\n\nMike\nAnn\nAnn\nMike\n\n\nInput\n\n\ncba\n\n\nOutput\n\n\nMike\nMike\nMike", "testcase": ["abea", "abfa", "abbg", "wba", "cya", "abia", "dbba", "abbg", "cbm", "agba"], "output": ["Mike\nAnn\nAnn\nMike\n", "Mike\nMike\nMike\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1223_A. CME", "description": "Let's denote correct match equation (we will denote it as CME) an equation a + b = c there all integers a, b and c are greater than zero.\n\nFor example, equations 2 + 2 = 4 (||+||=||||) and 1 + 2 = 3 (|+||=|||) are CME but equations 1 + 2 = 4 (|+||=||||), 2 + 2 = 3 (||+||=|||), and 0 + 1 = 1 (+|=|) are not.\n\nNow, you have n matches. You want to assemble a CME using all your matches. Unfortunately, it is possible that you can't assemble the CME using all matches. But you can buy some extra matches and then assemble CME!\n\nFor example, if n = 2, you can buy two matches and assemble |+|=||, and if n = 5 you can buy one match and assemble ||+|=|||. \n\n<image>\n\nCalculate the minimum number of matches which you have to buy for assembling CME.\n\nNote, that you have to answer q independent queries.\n\nInput\n\nThe first line contains one integer q (1 ≤ q ≤ 100) — the number of queries.\n\nThe only line of each query contains one integer n (2 ≤ n ≤ 10^9) — the number of matches.\n\nOutput\n\nFor each test case print one integer in single line — the minimum number of matches which you have to buy for assembling CME. \n\nExample\n\nInput\n\n\n4\n2\n5\n8\n11\n\n\nOutput\n\n\n2\n1\n0\n1\n\nNote\n\nThe first and second queries are explained in the statement.\n\nIn the third query, you can assemble 1 + 3 = 4 (|+|||=||||) without buying matches.\n\nIn the fourth query, buy one match and assemble 2 + 4 = 6 (||+||||=||||||).", "testcase": ["4\n3\n4\n8\n11", "4\n1\n5\n7\n11", "4\n2\n3\n8\n11", "4\n3\n4\n8\n11", "4\n2\n5\n8\n11", "4\n1\n5\n8\n12", "4\n2\n4\n8\n12", "4\n2\n4\n8\n10", "4\n3\n6\n8\n11", "4\n2\n5\n9\n10"], "output": ["2\n1\n0\n1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1227_A. Math Problem", "description": "Your math teacher gave you the following problem:\n\nThere are n segments on the x-axis, [l_1; r_1], [l_2; r_2], …, [l_n; r_n]. The segment [l; r] includes the bounds, i.e. it is a set of such x that l ≤ x ≤ r. The length of the segment [l; r] is equal to r - l.\n\nTwo segments [a; b] and [c; d] have a common point (intersect) if there exists x that a ≤ x ≤ b and c ≤ x ≤ d. For example, [2; 5] and [3; 10] have a common point, but [5; 6] and [1; 4] don't have.\n\nYou should add one segment, which has at least one common point with each of the given segments and as short as possible (i.e. has minimal length). The required segment can degenerate to be a point (i.e a segment with length zero). The added segment may or may not be among the given n segments.\n\nIn other words, you need to find a segment [a; b], such that [a; b] and every [l_i; r_i] have a common point for each i, and b-a is minimal.\n\nInput\n\nThe first line contains integer number t (1 ≤ t ≤ 100) — the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 ≤ n ≤ 10^{5}) — the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 ≤ l_i ≤ r_i ≤ 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.\n\nOutput\n\nFor each test case, output one integer — the smallest possible length of the segment which has at least one common point with all given segments.\n\nExample\n\nInput\n\n\n4\n3\n4 5\n5 9\n7 7\n5\n11 19\n4 17\n16 16\n3 12\n14 17\n1\n1 10\n1\n1 1\n\n\nOutput\n\n\n2\n4\n0\n0\n\nNote\n\nIn the first test case of the example, we can choose the segment [5;7] as the answer. It is the shortest segment that has at least one common point with all given segments.", "testcase": ["4\n3\n3 3\n5 9\n7 8\n5\n10 19\n5 16\n16 16\n3 12\n14 17\n1\n2 10\n1\n1 1", "4\n3\n4 5\n5 9\n7 8\n5\n10 19\n4 16\n16 16\n3 12\n14 17\n1\n2 10\n1\n1 1", "4\n3\n3 6\n5 9\n7 7\n5\n10 19\n4 18\n16 16\n3 12\n14 18\n2\n1 10\n-1\n1 1", "4\n2\n4 5\n5 8\n7 7\n5\n9 18\n3 17\n16 16\n3 12\n13 17\n1\n1 10\n1\n1 2", "4\n3\n4 5\n6 8\n7 8\n5\n11 19\n5 17\n16 16\n3 12\n13 17\n1\n1 10\n1\n2 1", "4\n4\n4 5\n5 9\n7 7\n5\n11 19\n4 18\n17 16\n3 12\n14 18\n1\n1 10\n1\n1 1", "4\n3\n4 5\n5 9\n8 7\n5\n10 20\n4 17\n15 15\n3 13\n14 18\n1\n0 10\n1\n1 1", "4\n3\n3 5\n5 9\n7 7\n4\n12 19\n4 17\n16 17\n3 13\n14 17\n1\n1 10\n0\n-1 1", "4\n2\n4 5\n5 10\n7 7\n5\n10 19\n4 17\n16 16\n3 12\n14 17\n1\n1 11\n1\n1 1", "4\n2\n4 5\n5 9\n7 8\n5\n11 19\n3 17\n15 17\n3 13\n14 18\n1\n1 10\n1\n1 0"], "output": ["2\n4\n0\n0\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Dawid has four bags of candies. The i-th of them contains a_i candies. Also, Dawid has two friends. He wants to give each bag to one of his two friends. Is it possible to distribute the bags in such a way that each friend receives the same amount of candies in total?\n\nNote, that you can't keep bags for yourself or throw them away, each bag should be given to one of the friends.\n\nInput\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 ≤ a_i ≤ 100) — the numbers of candies in each bag.\n\nOutput\n\nOutput YES if it's possible to give the bags to Dawid's friends so that both friends receive the same amount of candies, or NO otherwise. Each character can be printed in any case (either uppercase or lowercase).\n\nExamples\n\nInput\n\n\n1 7 11 5\n\n\nOutput\n\n\nYES\n\n\nInput\n\n\n7 3 2 5\n\n\nOutput\n\n\nNO\n\nNote\n\nIn the first sample test, Dawid can give the first and the third bag to the first friend, and the second and the fourth bag to the second friend. This way, each friend will receive 12 candies.\n\nIn the second sample test, it's impossible to distribute the bags.", "testcase": ["1 6 11 6", "1 8 11 6", "7 3 1 6", "7 3 2 7", "1 8 12 5", "7 3 2 7", "7 2 3 5", "1 6 10 5", "7 3 2 5", "7 2 3 5"], "output": ["YES\n", "NO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1230_B. Ania and Minimizing", "description": "Ania has a large integer S. Its decimal representation has length n and doesn't contain any leading zeroes. Ania is allowed to change at most k digits of S. She wants to do it in such a way that S still won't contain any leading zeroes and it'll be minimal possible. What integer will Ania finish with?\n\nInput\n\nThe first line contains two integers n and k (1 ≤ n ≤ 200 000, 0 ≤ k ≤ n) — the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.\n\nOutput\n\nOutput the minimal possible value of S which Ania can end with. Note that the resulting integer should also have n digits.\n\nExamples\n\nInput\n\n\n5 3\n51528\n\n\nOutput\n\n\n10028\n\n\nInput\n\n\n3 2\n102\n\n\nOutput\n\n\n100\n\n\nInput\n\n\n1 1\n1\n\n\nOutput\n\n\n0\n\nNote\n\nA number has leading zeroes if it consists of at least two digits and its first digit is 0. For example, numbers 00, 00069 and 0101 have leading zeroes, while 0, 3000 and 1010 don't have leading zeroes.", "testcase": ["1 2\n1", "5 2\n51528", "5 3\n51527", "3 3\n102", "1 1\n2", "1 1\n0", "1 0\n1", "1 1\n2", "3 2\n103", "5 2\n51528"], "output": ["0\n", "100\n", "10028\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Recently Ivan the Fool decided to become smarter and study the probability theory. He thinks that he understands the subject fairly well, and so he began to behave like he already got PhD in that area.\n\nTo prove his skills, Ivan decided to demonstrate his friends a concept of random picture. A picture is a field of n rows and m columns, where each cell is either black or white. Ivan calls the picture random if for every cell it has at most one adjacent cell of the same color. Two cells are considered adjacent if they share a side.\n\nIvan's brothers spent some time trying to explain that it's not how the randomness usually works. Trying to convince Ivan, they want to count the number of different random (according to Ivan) pictures. Two pictures are considered different if at least one cell on those two picture is colored differently. Since the number of such pictures may be quite large, print it modulo 10^9 + 7.\n\nInput\n\nThe only line contains two integers n and m (1 ≤ n, m ≤ 100 000), the number of rows and the number of columns of the field.\n\nOutput\n\nPrint one integer, the number of random pictures modulo 10^9 + 7.\n\nExample\n\nInput\n\n\n2 3\n\n\nOutput\n\n\n8\n\nNote\n\nThe picture below shows all possible random pictures of size 2 by 3. \n\n<image>", "testcase": ["2 4", "2 2", "2 4", "2 4", "2 4", "2 2", "2 4", "2 2", "2 2", "2 2"], "output": ["8\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1242_A. Tile Painting", "description": "Ujan has been lazy lately, but now has decided to bring his yard to good shape. First, he decided to paint the path from his house to the gate.\n\nThe path consists of n consecutive tiles, numbered from 1 to n. Ujan will paint each tile in some color. He will consider the path aesthetic if for any two different tiles with numbers i and j, such that |j - i| is a divisor of n greater than 1, they have the same color. Formally, the colors of two tiles with numbers i and j should be the same if |i-j| > 1 and n mod |i-j| = 0 (where x mod y is the remainder when dividing x by y).\n\nUjan wants to brighten up space. What is the maximum number of different colors that Ujan can use, so that the path is aesthetic?\n\nInput\n\nThe first line of input contains a single integer n (1 ≤ n ≤ 10^{12}), the length of the path.\n\nOutput\n\nOutput a single integer, the maximum possible number of colors that the path can be painted in.\n\nExamples\n\nInput\n\n\n4\n\n\nOutput\n\n\n2\n\n\nInput\n\n\n5\n\n\nOutput\n\n\n5\n\nNote\n\nIn the first sample, two colors is the maximum number. Tiles 1 and 3 should have the same color since 4 mod |3-1| = 0. Also, tiles 2 and 4 should have the same color since 4 mod |4-2| = 0.\n\nIn the second sample, all five colors can be used.\n\n<image>", "testcase": ["4", "3", "3", "5", "6", "6", "3", "6", "5", "3"], "output": ["5\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1249_B1. Books Exchange (easy version)", "description": "The only difference between easy and hard versions is constraints.\n\nThere are n kids, each of them is reading a unique book. At the end of any day, the i-th kid will give his book to the p_i-th kid (in case of i = p_i the kid will give his book to himself). It is guaranteed that all values of p_i are distinct integers from 1 to n (i.e. p is a permutation). The sequence p doesn't change from day to day, it is fixed.\n\nFor example, if n=6 and p=[4, 6, 1, 3, 5, 2] then at the end of the first day the book of the 1-st kid will belong to the 4-th kid, the 2-nd kid will belong to the 6-th kid and so on. At the end of the second day the book of the 1-st kid will belong to the 3-th kid, the 2-nd kid will belong to the 2-th kid and so on.\n\nYour task is to determine the number of the day the book of the i-th child is returned back to him for the first time for every i from 1 to n.\n\nConsider the following example: p = [5, 1, 2, 4, 3]. The book of the 1-st kid will be passed to the following kids:\n\n  * after the 1-st day it will belong to the 5-th kid, \n  * after the 2-nd day it will belong to the 3-rd kid, \n  * after the 3-rd day it will belong to the 2-nd kid, \n  * after the 4-th day it will belong to the 1-st kid. \n\n\n\nSo after the fourth day, the book of the first kid will return to its owner. The book of the fourth kid will return to him for the first time after exactly one day.\n\nYou have to answer q independent queries.\n\nInput\n\nThe first line of the input contains one integer q (1 ≤ q ≤ 200) — the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 ≤ n ≤ 200) — the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 ≤ p_i ≤ n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.\n\nOutput\n\nFor each query, print the answer on it: n integers a_1, a_2, ..., a_n, where a_i is the number of the day the book of the i-th child is returned back to him for the first time in this query.\n\nExample\n\nInput\n\n\n6\n5\n1 2 3 4 5\n3\n2 3 1\n6\n4 6 2 1 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 3\n\n\nOutput\n\n\n1 1 1 1 1 \n3 3 3 \n2 3 3 2 1 3 \n1 \n2 2 2 2 \n4 4 4 1 4 ", "testcase": ["6\n5\n1 2 3 4 6\n3\n2 4 1\n5\n4 6 3 2 5 3\n1\n1\n4\n3 4 1 2\n5\n5 1 1 4 3", "6\n5\n1 2 3 4 5\n4\n2 2 1\n6\n4 6 1 1 6 3\n1\n1\n5\n4 4 1 2\n5\n6 1 2 4 2", "6\n5\n0 2 3 4 5\n2\n3 3 1\n6\n4 6 3 1 5 3\n2\n2\n4\n3 4 1 3\n4\n5 1 2 3 4", "6\n5\n1 2 3 4 5\n2\n0 3 2\n7\n4 6 3 1 5 3\n1\n0\n4\n3 4 0 2\n5\n5 1 2 4 3", "6\n5\n1 2 5 4 5\n3\n2 3 1\n6\n5 6 3 1 5 4\n1\n1\n4\n3 4 1 2\n5\n5 1 2 4 4", "6\n4\n1 1 2 5 5\n3\n2 4 1\n6\n4 6 2 1 6 3\n0\n1\n4\n3 4 0 1\n5\n5 1 2 4 2", "6\n6\n1 2 3 4 5\n3\n1 4 1\n6\n3 6 2 1 5 4\n1\n1\n4\n3 4 1 3\n4\n5 1 2 5 3", "6\n5\n1 2 3 4 4\n3\n2 4 1\n6\n6 6 2 0 5 3\n1\n0\n4\n3 4 1 1\n6\n6 2 2 4 3", "6\n6\n0 3 4 4 5\n3\n2 3 1\n6\n5 6 2 1 5 2\n1\n2\n4\n3 4 1 2\n5\n5 1 2 3 3", "6\n5\n1 2 5 4 5\n3\n1 3 2\n6\n5 6 2 1 5 2\n1\n1\n3\n3 5 1 2\n4\n5 0 2 4 3"], "output": ["1 1 1 1 1\n3 3 3\n2 3 3 2 1 3\n1\n2 2 2 2\n4 4 4 1 4\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "124_C. Prime Permutation", "description": "You are given a string s, consisting of small Latin letters. Let's denote the length of the string as |s|. The characters in the string are numbered starting from 1. \n\nYour task is to find out if it is possible to rearrange characters in string s so that for any prime number p ≤ |s| and for any integer i ranging from 1 to |s| / p (inclusive) the following condition was fulfilled sp = sp × i. If the answer is positive, find one way to rearrange the characters.\n\nInput\n\nThe only line contains the initial string s, consisting of small Latin letters (1 ≤ |s| ≤ 1000).\n\nOutput\n\nIf it is possible to rearrange the characters in the string so that the above-mentioned conditions were fulfilled, then print in the first line \"YES\" (without the quotes) and print on the second line one of the possible resulting strings. If such permutation is impossible to perform, then print the single string \"NO\".\n\nExamples\n\nInput\n\nabc\n\n\nOutput\n\nYES\nabc\n\n\nInput\n\nabcd\n\n\nOutput\n\nNO\n\n\nInput\n\nxxxyxxx\n\n\nOutput\n\nYES\nxxxxxxy\n\nNote\n\nIn the first sample any of the six possible strings will do: \"abc\", \"acb\", \"bac\", \"bca\", \"cab\" or \"cba\".\n\nIn the second sample no letter permutation will satisfy the condition at p = 2 (s2 = s4).\n\nIn the third test any string where character \"y\" doesn't occupy positions 2, 3, 4, 6 will be valid.", "testcase": ["kbcd", "xxxyuxx", "vbc", "xxxyzxx", "xxxyxux", "abfd", "obc", "lbc", "afcd", "yxxyxxx"], "output": ["NO\n", "YES\nabc", "YES\nxxxxxxy\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1251_C. Minimize The Integer", "description": "You are given a huge integer a consisting of n digits (n is between 1 and 3 ⋅ 10^5, inclusive). It may contain leading zeros.\n\nYou can swap two digits on adjacent (neighboring) positions if the swapping digits are of different parity (that is, they have different remainders when divided by 2). \n\nFor example, if a = 032867235 you can get the following integers in a single operation: \n\n  * 302867235 if you swap the first and the second digits; \n  * 023867235 if you swap the second and the third digits; \n  * 032876235 if you swap the fifth and the sixth digits; \n  * 032862735 if you swap the sixth and the seventh digits; \n  * 032867325 if you swap the seventh and the eighth digits. \n\n\n\nNote, that you can't swap digits on positions 2 and 4 because the positions are not adjacent. Also, you can't swap digits on positions 3 and 4 because the digits have the same parity.\n\nYou can perform any number (possibly, zero) of such operations.\n\nFind the minimum integer you can obtain.\n\nNote that the resulting integer also may contain leading zeros.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 ⋅ 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 ⋅ 10^5.\n\nOutput\n\nFor each test case print line — the minimum integer you can obtain.\n\nExample\n\nInput\n\n\n3\n0709\n1337\n246432\n\n\nOutput\n\n\n0079\n1337\n234642\n\nNote\n\nIn the first test case, you can perform the following sequence of operations (the pair of swapped digits is highlighted): 0 \\underline{70} 9 → 0079.\n\nIn the second test case, the initial integer is optimal. \n\nIn the third test case you can perform the following sequence of operations: 246 \\underline{43} 2 → 24 \\underline{63}42 → 2 \\underline{43} 642 → 234642.", "testcase": ["3\n708\n1337\n246431", "3\n710\n1337\n246431", "3\n0709\n1339\n246432", "3\n708\n1337\n246433", "3\n709\n1337\n246432", "3\n710\n1336\n246432", "3\n0709\n1337\n246430", "3\n0709\n1338\n246431", "3\n710\n1337\n246433", "3\n0709\n1336\n246433"], "output": ["0079\n1337\n234642\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1257_B. Magic Stick", "description": "Recently Petya walked in the forest and found a magic stick.\n\nSince Petya really likes numbers, the first thing he learned was spells for changing numbers. So far, he knows only two spells that can be applied to a positive integer: \n\n  1. If the chosen number a is even, then the spell will turn it into 3a/2; \n  2. If the chosen number a is greater than one, then the spell will turn it into a-1. \n\n\n\nNote that if the number is even and greater than one, then Petya can choose which spell to apply.\n\nPetya now has only one number x. He wants to know if his favorite number y can be obtained from x using the spells he knows. The spells can be used any number of times in any order. It is not required to use spells, Petya can leave x as it is.\n\nInput\n\nThe first line contains single integer T (1 ≤ T ≤ 10^4) — the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 ≤ x, y ≤ 10^9) — the current number and the number that Petya wants to get.\n\nOutput\n\nFor the i-th test case print the answer on it — YES if Petya can get the number y from the number x using known spells, and NO otherwise.\n\nYou may print every letter in any case you want (so, for example, the strings yEs, yes, Yes and YES will all be recognized as positive answer).\n\nExample\n\nInput\n\n\n7\n2 3\n1 1\n3 6\n6 8\n1 2\n4 1\n31235 6578234\n\n\nOutput\n\n\nYES\nYES\nNO\nYES\nNO\nYES\nYES", "testcase": ["7\n2 3\n1 2\n2 6\n6 8\n1 3\n5 0\n31235 6578234", "7\n2 4\n1 1\n3 6\n6 9\n2 1\n4 1\n31235 6578233", "7\n1 3\n2 1\n2 6\n6 9\n1 1\n4 1\n31235 6578234", "7\n2 1\n1 2\n3 7\n6 8\n2 2\n4 1\n31235 6578234", "7\n2 3\n1 0\n3 5\n6 7\n0 2\n4 1\n31235 6578233", "7\n2 3\n2 1\n3 6\n8 9\n1 3\n4 1\n31235 6578234", "7\n2 3\n1 1\n3 7\n6 8\n0 2\n4 1\n31234 6578234", "7\n1 3\n0 2\n2 6\n6 8\n1 3\n4 1\n31235 6578234", "7\n3 3\n1 1\n3 7\n6 8\n0 2\n4 1\n31235 6578234", "7\n3 3\n1 1\n4 6\n6 7\n1 2\n4 1\n31236 6578233"], "output": ["Yes\nYes\nNo\nYes\nNo\nYes\nYes\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "125_A. Measuring Lengths in Baden", "description": "Lengths are measures in Baden in inches and feet. To a length from centimeters it is enough to know that an inch equals three centimeters in Baden and one foot contains 12 inches.\n\nYou are given a length equal to n centimeters. Your task is to convert it to feet and inches so that the number of feet was maximum. The result should be an integer rounded to the closest value containing an integral number of inches.\n\nNote that when you round up, 1 cm rounds up to 0 inches and 2 cm round up to 1 inch.\n\nInput\n\nThe only line contains an integer n (1 ≤ n ≤ 10000).\n\nOutput\n\nPrint two non-negative space-separated integers a and b, where a is the numbers of feet and b is the number of inches.\n\nExamples\n\nInput\n\n42\n\n\nOutput\n\n1 2\n\n\nInput\n\n5\n\n\nOutput\n\n0 2", "testcase": ["41", "43", "43", "6", "6", "6", "43", "41", "6", "41"], "output": ["1 2\n", "0 2\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1267_B. Balls of Buma", "description": "Balph is learning to play a game called Buma. In this game, he is given a row of colored balls. He has to choose the color of one new ball and the place to insert it (between two balls, or to the left of all the balls, or to the right of all the balls).\n\nWhen the ball is inserted the following happens repeatedly: if some segment of balls of the same color became longer as a result of a previous action and its length became at least 3, then all the balls of this segment are eliminated. \n\nConsider, for example, a row of balls 'AAABBBWWBB'. Suppose Balph chooses a ball of color 'W' and the place to insert it after the sixth ball, i. e. to the left of the two 'W's. After Balph inserts this ball, the balls of color 'W' are eliminated, since this segment was made longer and has length 3 now, so the row becomes 'AAABBBBB'. The balls of color 'B' are eliminated now, because the segment of balls of color 'B' became longer and has length 5 now. Thus, the row becomes 'AAA'. However, none of the balls are eliminated now, because there is no elongated segment.\n\nHelp Balph count the number of possible ways to choose a color of a new ball and a place to insert it that leads to the elimination of all the balls.\n\nInput\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 ⋅ 10^5. Each letter represents a ball with the corresponding color.\n\nOutput\n\nOutput the number of ways to choose a color and a position of a new ball in order to eliminate all the balls.\n\nExamples\n\nInput\n\n\nBBWWBB\n\n\nOutput\n\n\n3\n\n\nInput\n\n\nBWWB\n\n\nOutput\n\n\n0\n\n\nInput\n\n\nBBWBB\n\n\nOutput\n\n\n0\n\n\nInput\n\n\nOOOWWW\n\n\nOutput\n\n\n0\n\n\nInput\n\n\nWWWOOOOOOWWW\n\n\nOutput\n\n\n7", "testcase": ["BWWQ", "BUWBB", "OOOWKW", "BBWB", "BFWB", "BWWM", "UWWOOOOOOWWW", "BBOBB", "BBWBX", "BBQWBB"], "output": ["0\n", "0\n", "3\n", "0\n", "7\n"], "difficulty": 8, "time_limit": {"seconds": 3, "nanos": 0}}
{"name": "127_E. E-reader Display", "description": "After years of hard work scientists invented an absolutely new e-reader display. The new display has a larger resolution, consumes less energy and its production is cheaper. And besides, one can bend it. The only inconvenience is highly unusual management. For that very reason the developers decided to leave the e-readers' software to programmers.\n\nThe display is represented by n × n square of pixels, each of which can be either black or white. The display rows are numbered with integers from 1 to n upside down, the columns are numbered with integers from 1 to n from the left to the right. The display can perform commands like \"x, y\". When a traditional display fulfills such command, it simply inverts a color of (x, y), where x is the row number and y is the column number. But in our new display every pixel that belongs to at least one of the segments (x, x) - (x, y) and (y, y) - (x, y) (both ends of both segments are included) inverts a color.\n\nFor example, if initially a display 5 × 5 in size is absolutely white, then the sequence of commands (1, 4), (3, 5), (5, 1), (3, 3) leads to the following changes:\n\n<image>\n\nYou are an e-reader software programmer and you should calculate minimal number of commands needed to display the picture. You can regard all display pixels as initially white.\n\nInput\n\nThe first line contains number n (1 ≤ n ≤ 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color. \n\nOutput\n\nPrint one integer z — the least number of commands needed to display the picture.\n\nExamples\n\nInput\n\n5\n01110\n10010\n10001\n10011\n11110\n\n\nOutput\n\n4", "testcase": ["5\n1111\n10011\n10001\n10011\n11110", "5\n1111\n10009\n10001\n10011\n11110", "5\n1111\n10010\n10001\n10011\n11111", "5\n01110\n10010\n10001\n10010\n11109", "5\n01110\n10010\n10002\n10010\n11110", "5\n01110\n10010\n10001\n10011\n11112", "5\n01110\n10009\n10002\n10011\n11110", "5\n1111\n10011\n10001\n10011\n11110", "5\n1111\n10011\n10001\n10011\n11110", "5\n01110\n10010\n10000\n10012\n11110"], "output": ["4\n"], "difficulty": 11, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1288_A. Deadline", "description": "Adilbek was assigned to a special project. For Adilbek it means that he has n days to run a special program and provide its results. But there is a problem: the program needs to run for d days to calculate the results.\n\nFortunately, Adilbek can optimize the program. If he spends x (x is a non-negative integer) days optimizing the program, he will make the program run in \\left⌈ (d)/(x + 1) \\right⌉ days (\\left⌈ a \\right⌉ is the ceiling function: \\left⌈ 2.4 \\right⌉ = 3, \\left⌈ 2 \\right⌉ = 2). The program cannot be run and optimized simultaneously, so the total number of days he will spend is equal to x + \\left⌈ (d)/(x + 1) \\right⌉.\n\nWill Adilbek be able to provide the generated results in no more than n days?\n\nInput\n\nThe first line contains a single integer T (1 ≤ T ≤ 50) — the number of test cases.\n\nThe next T lines contain test cases – one per line. Each line contains two integers n and d (1 ≤ n ≤ 10^9, 1 ≤ d ≤ 10^9) — the number of days before the deadline and the number of days the program runs.\n\nOutput\n\nPrint T answers — one per test case. For each test case print YES (case insensitive) if Adilbek can fit in n days or NO (case insensitive) otherwise.\n\nExample\n\nInput\n\n\n3\n1 1\n4 5\n5 11\n\n\nOutput\n\n\nYES\nYES\nNO\n\nNote\n\nIn the first test case, Adilbek decides not to optimize the program at all, since d ≤ n.\n\nIn the second test case, Adilbek can spend 1 day optimizing the program and it will run \\left⌈ 5/2 \\right⌉ = 3 days. In total, he will spend 4 days and will fit in the limit.\n\nIn the third test case, it's impossible to fit in the limit. For example, if Adilbek will optimize the program 2 days, it'll still work \\left⌈ (11)/(2+1) \\right⌉ = 4 days.", "testcase": ["3\n1 1\n4 4\n5 11", "3\n0 1\n3 5\n5 10", "3\n0 1\n4 7\n5 11", "3\n1 1\n5 5\n6 12", "3\n1 1\n3 5\n5 11", "3\n2 0\n4 6\n5 11", "3\n1 1\n4 4\n5 11", "3\n1 2\n4 5\n5 11", "3\n1 1\n4 3\n6 11", "3\n0 2\n4 6\n5 11"], "output": ["YES\nYES\nNO\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1294_B. Collecting Packages", "description": "There is a robot in a warehouse and n packages he wants to collect. The warehouse can be represented as a coordinate grid. Initially, the robot stays at the point (0, 0). The i-th package is at the point (x_i, y_i). It is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe robot is semi-broken and only can move up ('U') and right ('R'). In other words, in one move the robot can go from the point (x, y) to the point (x + 1, y) or to the point (x, y + 1).\n\nAs we say above, the robot wants to collect all n packages (in arbitrary order). He wants to do it with the minimum possible number of moves. If there are several possible traversals, the robot wants to choose the lexicographically smallest path.\n\nThe string s of length n is lexicographically less than the string t of length n if there is some index 1 ≤ j ≤ n that for all i from 1 to j-1 s_i = t_i and s_j < t_j. It is the standard comparison of string, like in a dictionary. Most programming languages compare strings in this way.\n\nInput\n\nThe first line of the input contains an integer t (1 ≤ t ≤ 100) — the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 ≤ n ≤ 1000) — the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 ≤ x_i, y_i ≤ 1000) — the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.\n\nOutput\n\nPrint the answer for each test case.\n\nIf it is impossible to collect all n packages in some order starting from (0,0), print \"NO\" on the first line.\n\nOtherwise, print \"YES\" in the first line. Then print the shortest path — a string consisting of characters 'R' and 'U'. Among all such paths choose the lexicographically smallest path.\n\nNote that in this problem \"YES\" and \"NO\" can be only uppercase words, i.e. \"Yes\", \"no\" and \"YeS\" are not acceptable.\n\nExample\n\nInput\n\n\n3\n5\n1 3\n1 2\n3 3\n5 5\n4 3\n2\n1 0\n0 1\n1\n4 3\n\n\nOutput\n\n\nYES\nRUUURRRRUU\nNO\nYES\nRRRRUUU\n\nNote\n\nFor the first test case in the example the optimal path RUUURRRRUU is shown below: \n\n<image>", "testcase": ["3\n5\n1 3\n2 2\n3 3\n5 4\n2 3\n2\n1 1\n0 1\n1\n5 3", "3\n6\n2 3\n1 2\n4 3\n6 5\n4 3\n2\n1 0\n-1 0\n1\n4 3", "3\n5\n1 3\n0 2\n3 4\n5 4\n4 3\n2\n1 0\n1 0\n1\n3 3", "3\n5\n1 4\n1 2\n3 3\n5 4\n4 3\n1\n1 -1\n0 1\n1\n3 2", "3\n5\n0 3\n1 3\n3 3\n5 4\n3 3\n2\n0 0\n1 1\n1\n4 3", "3\n5\n1 3\n1 3\n3 3\n5 5\n4 3\n2\n1 0\n1 1\n1\n5 4", "3\n6\n0 3\n1 2\n3 3\n5 6\n5 4\n2\n1 -1\n0 1\n1\n4 3", "3\n6\n2 3\n2 2\n3 3\n6 5\n4 2\n1\n1 0\n0 1\n1\n4 3", "3\n5\n1 3\n1 2\n3 3\n6 4\n5 3\n2\n2 0\n0 1\n1\n4 3", "3\n5\n2 3\n1 2\n4 3\n5 4\n4 3\n3\n1 0\n-1 2\n1\n4 3"], "output": ["YES\nRUUURRRRUU\nNO\nYES\nRRRRUUU\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "12_B. Correct Solution?", "description": "One cold winter evening Alice and her older brother Bob was sitting at home near the fireplace and giving each other interesting problems to solve. When it was Alice's turn, she told the number n to Bob and said:\n\n—Shuffle the digits in this number in order to obtain the smallest possible number without leading zeroes.\n\n—No problem! — said Bob and immediately gave her an answer.\n\nAlice said a random number, so she doesn't know whether Bob's answer is correct. Help her to find this out, because impatient brother is waiting for the verdict.\n\nInput\n\nThe first line contains one integer n (0 ≤ n ≤ 109) without leading zeroes. The second lines contains one integer m (0 ≤ m ≤ 109) — Bob's answer, possibly with leading zeroes.\n\nOutput\n\nPrint OK if Bob's answer is correct and WRONG_ANSWER otherwise.\n\nExamples\n\nInput\n\n3310\n1033\n\n\nOutput\n\nOK\n\n\nInput\n\n4\n5\n\n\nOutput\n\nWRONG_ANSWER", "testcase": ["4\n6", "3310\n1032", "3310\n1034", "4\n4", "3310\n1032", "4\n4", "3310\n1034", "3310\n1032", "3310\n1034", "4\n6"], "output": ["OK\n", "WRONG_ANSWER\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Now that Kuroni has reached 10 years old, he is a big boy and doesn't like arrays of integers as presents anymore. This year he wants a Bracket sequence as a Birthday present. More specifically, he wants a bracket sequence so complex that no matter how hard he tries, he will not be able to remove a simple subsequence!\n\nWe say that a string formed by n characters '(' or ')' is simple if its length n is even and positive, its first n/2 characters are '(', and its last n/2 characters are ')'. For example, the strings () and (()) are simple, while the strings )( and ()() are not simple.\n\nKuroni will be given a string formed by characters '(' and ')' (the given string is not necessarily simple). An operation consists of choosing a subsequence of the characters of the string that forms a simple string and removing all the characters of this subsequence from the string. Note that this subsequence doesn't have to be continuous. For example, he can apply the operation to the string ')()(()))', to choose a subsequence of bold characters, as it forms a simple string '(())', delete these bold characters from the string and to get '))()'. \n\nKuroni has to perform the minimum possible number of operations on the string, in such a way that no more operations can be performed on the remaining string. The resulting string does not have to be empty.\n\nSince the given string is too large, Kuroni is unable to figure out how to minimize the number of operations. Can you help him do it instead?\n\nA sequence of characters a is a subsequence of a string b if a can be obtained from b by deletion of several (possibly, zero or all) characters.\n\nInput\n\nThe only line of input contains a string s (1 ≤ |s| ≤ 1000) formed by characters '(' and ')', where |s| is the length of s.\n\nOutput\n\nIn the first line, print an integer k — the minimum number of operations you have to apply. Then, print 2k lines describing the operations in the following format:\n\nFor each operation, print a line containing an integer m — the number of characters in the subsequence you will remove.\n\nThen, print a line containing m integers 1 ≤ a_1 < a_2 < ... < a_m — the indices of the characters you will remove. All integers must be less than or equal to the length of the current string, and the corresponding subsequence must form a simple string.\n\nIf there are multiple valid sequences of operations with the smallest k, you may print any of them.\n\nExamples\n\nInput\n\n\n(()((\n\n\nOutput\n\n\n1\n2\n1 3 \n\n\nInput\n\n\n)(\n\n\nOutput\n\n\n0\n\n\nInput\n\n\n(()())\n\n\nOutput\n\n\n1\n4\n1 2 5 6 \n\nNote\n\nIn the first sample, the string is '(()(('. The operation described corresponds to deleting the bolded subsequence. The resulting string is '(((', and no more operations can be performed on it. Another valid answer is choosing indices 2 and 3, which results in the same final string.\n\nIn the second sample, it is already impossible to perform any operations.", "testcase": ["()(((", "(())()", "()", ")()(()", ")(())(", "()", "()", "()", ")((((", "(()))("], "output": ["1\n2\n1 3 ", "1\n4\n1 2 5 6 ", "0"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1311_C. Perform the Combo", "description": "You want to perform the combo on your opponent in one popular fighting game. The combo is the string s consisting of n lowercase Latin letters. To perform the combo, you have to press all buttons in the order they appear in s. I.e. if s=\"abca\" then you have to press 'a', then 'b', 'c' and 'a' again.\n\nYou know that you will spend m wrong tries to perform the combo and during the i-th try you will make a mistake right after p_i-th button (1 ≤ p_i < n) (i.e. you will press first p_i buttons right and start performing the combo from the beginning). It is guaranteed that during the m+1-th try you press all buttons right and finally perform the combo.\n\nI.e. if s=\"abca\", m=2 and p = [1, 3] then the sequence of pressed buttons will be 'a' (here you're making a mistake and start performing the combo from the beginning), 'a', 'b', 'c', (here you're making a mistake and start performing the combo from the beginning), 'a' (note that at this point you will not perform the combo because of the mistake), 'b', 'c', 'a'.\n\nYour task is to calculate for each button (letter) the number of times you'll press it.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 ≤ n ≤ 2 ⋅ 10^5, 1 ≤ m ≤ 2 ⋅ 10^5) — the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 ≤ p_i < n) — the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5, ∑ m ≤ 2 ⋅ 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 ⋅ 10^9.\n\nOutput\n\nFor each test case, print the answer — 26 integers: the number of times you press the button 'a', the number of times you press the button 'b', ..., the number of times you press the button 'z'.\n\nExample\n\nInput\n\n\n3\n4 2\nabca\n1 3\n10 5\ncodeforces\n2 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4\n\n\nOutput\n\n\n4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n\nNote\n\nThe first test case is described in the problem statement. Wrong tries are \"a\", \"abc\" and the final try is \"abca\". The number of times you press 'a' is 4, 'b' is 2 and 'c' is 2.\n\nIn the second test case, there are five wrong tries: \"co\", \"codeforc\", \"cod\", \"co\", \"codeforce\" and the final try is \"codeforces\". The number of times you press 'c' is 9, 'd' is 4, 'e' is 5, 'f' is 3, 'o' is 9, 'r' is 3 and 's' is 1.", "testcase": ["3\n4 0\nybcc\n1 4\n10 5\ncodeforces\n3 8 3 2 8\n25 11\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 3 5 10 5 9 4", "3\n4 2\nabca\n1 4\n10 5\ncvdeforces\n2 8 3 2 10\n26 10\nqwertyuioplkjhgfdsazxcvbbm\n21 10 1 2 3 6 10 6 9 4", "3\n4 2\nabca\n1 3\n11 5\ncodeforces\n2 8 4 2 8\n27 11\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 2 5 9 6 10 4", "3\n4 2\nabca\n1 3\n10 6\ncodeforces\n2 8 5 1 9\n26 9\nqwertyuioplkjhgfdsazxcvbnm\n20 10 1 2 4 4 10 5 9 4", "3\n4 2\nabca\n1 3\n10 5\ncodeforces\n1 9 3 2 9\n27 11\nqwertyuioplkjhgfdsazxcvbnm\n19 9 1 2 3 5 9 3 9 4", "3\n3 2\nabca\n1 2\n10 5\ncodeforces\n2 8 3 1 7\n26 10\nqwertyuioslkjhgfdsuzxcvbnm\n20 10 1 2 2 5 9 5 9 4", "3\n3 2\nabca\n1 3\n9 4\ncodehorces\n1 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n19 10 1 2 4 5 10 5 9 4", "3\n4 2\nascf\n1 2\n10 5\ncodeforces\n2 7 4 2 9\n25 10\nqwertyuioplkjhgfdsazxcvbnm\n20 9 1 2 3 5 11 6 9 4", "3\n4 2\nabca\n1 3\n9 4\ncodeforces\n3 8 3 2 9\n26 10\nqwertyuioplkjhgfdsazxcvbnm\n20 9 1 2 3 5 11 5 9 4", "3\n3 2\nabca\n1 2\n10 5\ncodefxrces\n3 7 3 2 9\n27 10\nqwertyuioplkjhgfdsazxcvbnm\n21 10 1 3 3 5 10 6 9 4"], "output": ["4 2 2 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 \n\n0 0 9 4 5 3 0 0 0 0 0 0 0 0 9 0 0 3 1 0 0 0 0 0 0 0 \n\n2 1 1 2 9 2 2 2 5 2 2 2 1 1 5 4 11 8 2 7 5 1 10 1 5 2 \n\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1324_D. Pair of Topics", "description": "The next lecture in a high school requires two topics to be discussed. The i-th topic is interesting by a_i units for the teacher and by b_i units for the students.\n\nThe pair of topics i and j (i < j) is called good if a_i + a_j > b_i + b_j (i.e. it is more interesting for the teacher).\n\nYour task is to find the number of good pairs of topics.\n\nInput\n\nThe first line of the input contains one integer n (2 ≤ n ≤ 2 ⋅ 10^5) — the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 10^9), where b_i is the interestingness of the i-th topic for the students.\n\nOutput\n\nPrint one integer — the number of good pairs of topic.\n\nExamples\n\nInput\n\n\n5\n4 8 2 6 2\n4 5 4 1 3\n\n\nOutput\n\n\n7\n\n\nInput\n\n\n4\n1 3 2 4\n1 3 2 4\n\n\nOutput\n\n\n0", "testcase": ["4\n1 2 1 4\n1 2 2 4", "4\n1 3 2 4\n2 3 2 4", "4\n1 3 1 4\n1 4 2 3", "5\n4 8 2 7 2\n4 5 3 3 3", "5\n3 8 2 6 2\n5 4 5 1 3", "5\n5 7 2 6 2\n4 5 4 2 4", "4\n0 3 1 5\n1 3 2 4", "4\n1 3 2 3\n1 3 1 3", "5\n5 7 2 7 2\n4 5 5 1 3", "5\n4 8 2 7 2\n4 6 4 1 3"], "output": ["0\n", "7\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1328_A. Divisibility Problem", "description": "You are given two positive integers a and b. In one move you can increase a by 1 (replace a with a+1). Your task is to find the minimum number of moves you need to do in order to make a divisible by b. It is possible, that you have to make 0 moves, as a is already divisible by b. You have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 ≤ a, b ≤ 10^9).\n\nOutput\n\nFor each test case print the answer — the minimum number of moves you need to do in order to make a divisible by b.\n\nExample\n\nInput\n\n\n5\n10 4\n13 9\n100 13\n123 456\n92 46\n\n\nOutput\n\n\n2\n5\n4\n333\n0", "testcase": ["5\n9 4\n12 9\n100 14\n122 456\n92 46", "5\n9 4\n13 10\n100 12\n123 456\n91 46", "5\n9 5\n12 8\n100 13\n123 456\n92 46", "5\n10 4\n12 9\n100 13\n122 456\n91 45", "5\n9 4\n13 8\n101 14\n123 456\n92 46", "5\n9 5\n13 9\n101 13\n123 456\n92 47", "5\n10 3\n12 9\n100 12\n123 455\n92 46", "5\n10 3\n13 9\n101 13\n123 457\n92 47", "5\n10 3\n14 9\n100 14\n123 456\n92 47", "5\n10 4\n13 8\n100 13\n125 457\n92 46"], "output": ["2\n5\n4\n333\n0\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1351_C. Skier", "description": "Skier rides on a snowy field. Its movements can be described by a string of characters 'S', 'N', 'W', 'E' (which correspond to 1 meter movement in the south, north, west or east direction respectively).\n\nIt is known that if he moves along a previously unvisited segment of a path (i.e. this segment of the path is visited the first time), then the time of such movement is 5 seconds. If he rolls along previously visited segment of a path (i.e., this segment of the path has been covered by his path before), then it takes 1 second.\n\nFind the skier's time to roll all the path.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.\n\nOutput\n\nFor each test case, print the desired path time in seconds.\n\nExample\n\nInput\n\n\n5\nNNN\nNS\nWWEN\nWWEE\nNWNWS\n\n\nOutput\n\n\n15\n6\n16\n12\n25", "testcase": ["5\nNNM\nNS\nWWEN\nWWEE\nNWNWC", "5\nNNN\nNP\nWYEN\nWWEE\nNWNWS", "5\nUNN\nNV\nWWEN\nWWEE\nNWNWS", "5\nNNN\nNS\nWWEN\nKFEE\nNWNWS", "5\nNNN\nKS\nWWEN\nWOEE\nNWNWS", "5\nNNT\nNS\nEWEN\nWWEE\nNWNWS", "5\nNNF\nNS\nWWEN\nWMEE\nNWNWS", "5\nMNN\nNS\nWWFN\nWWEE\nNWNWS", "5\nNTN\nNS\nWWCN\nWWEE\nNWNWS", "5\nNNN\nNS\nWWXN\nWWIE\nNWNWS"], "output": ["15\n6\n16\n12\n25\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1352_C. K-th Not Divisible by n", "description": "You are given two positive integers n and k. Print the k-th positive integer that is not divisible by n.\n\nFor example, if n=3, and k=7, then all numbers that are not divisible by 3 are: 1, 2, 4, 5, 7, 8, 10, 11, 13 .... The 7-th number among them is 10.\n\nInput\n\nThe first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 ≤ n ≤ 10^9) and k (1 ≤ k ≤ 10^9).\n\nOutput\n\nFor each test case print the k-th positive integer that is not divisible by n.\n\nExample\n\nInput\n\n\n6\n3 7\n4 12\n2 1000000000\n7 97\n1000000000 1000000000\n2 1\n\n\nOutput\n\n\n10\n15\n1999999999\n113\n1000000001\n1", "testcase": ["6\n3 7\n5 12\n2 999999999\n6 97\n1000000000 1000000000\n1 1", "6\n3 7\n5 12\n2 1000000001\n7 97\n1000000000 999999999\n2 2", "6\n3 7\n4 13\n2 1000000000\n7 97\n1000000001 1000000000\n2 1", "6\n4 7\n4 12\n1 1000000000\n7 97\n1000000000 1000000000\n2 1", "6\n3 7\n3 12\n3 1000000000\n6 97\n1000000000 1000000000\n3 1", "6\n2 7\n5 11\n2 1000000000\n8 97\n1000000000 1000000000\n2 1", "6\n3 6\n3 13\n2 1000000001\n7 97\n1000000000 1000000000\n2 1", "6\n3 7\n4 12\n3 1000000000\n7 97\n1000000001 1000000000\n2 1", "6\n3 6\n4 14\n2 1000000000\n7 98\n1000000000 1000000000\n2 1", "6\n4 8\n3 12\n2 1000000000\n7 97\n1000000001 1000000000\n2 1"], "output": ["10\n15\n1999999999\n113\n1000000001\n1\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1353_B. Two Arrays And Swaps", "description": "You are given two arrays a and b both consisting of n positive (greater than zero) integers. You are also given an integer k.\n\nIn one move, you can choose two indices i and j (1 ≤ i, j ≤ n) and swap a_i and b_j (i.e. a_i becomes b_j and vice versa). Note that i and j can be equal or different (in particular, swap a_2 with b_2 or swap a_3 and b_9 both are acceptable moves).\n\nYour task is to find the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k such moves (swaps).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 200) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 ≤ n ≤ 30; 0 ≤ k ≤ n) — the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 ≤ b_i ≤ 30), where b_i is the i-th element of b.\n\nOutput\n\nFor each test case, print the answer — the maximum possible sum you can obtain in the array a if you can do no more than (i.e. at most) k swaps.\n\nExample\n\nInput\n\n\n5\n2 1\n1 2\n3 4\n5 5\n5 5 6 6 5\n1 2 5 4 3\n5 3\n1 2 3 4 5\n10 9 10 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 1\n4 4 5 4\n\n\nOutput\n\n\n6\n27\n39\n11\n17\n\nNote\n\nIn the first test case of the example, you can swap a_1 = 1 and b_2 = 4, so a=[4, 2] and b=[3, 1].\n\nIn the second test case of the example, you don't need to swap anything.\n\nIn the third test case of the example, you can swap a_1 = 1 and b_1 = 10, a_3 = 3 and b_3 = 10 and a_2 = 2 and b_4 = 10, so a=[10, 10, 10, 4, 5] and b=[1, 9, 3, 2, 9].\n\nIn the fourth test case of the example, you cannot swap anything.\n\nIn the fifth test case of the example, you can swap arrays a and b, so a=[4, 4, 5, 4] and b=[1, 2, 2, 1].", "testcase": ["5\n2 1\n1 2\n2 4\n5 4\n4 5 6 6 5\n1 1 5 4 4\n5 3\n1 2 3 4 5\n10 7 11 11 9\n5 0\n2 2 6 3\n2 3 1 4\n4 4\n1 2 2 1\n4 4 4 4", "5\n2 0\n1 2\n3 3\n5 5\n5 4 6 5 5\n1 1 5 4 3\n7 2\n2 2 3 4 5\n10 8 11 10 9\n4 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 2 2\n4 4 4 5", "5\n2 2\n1 2\n4 4\n5 6\n5 5 6 5 5\n1 1 5 5 3\n6 4\n1 2 3 3 5\n10 8 10 10 10\n3 0\n2 2 4 3\n2 4 2 3\n4 4\n1 2 3 1\n5 4 5 4", "5\n2 1\n1 1\n3 4\n6 6\n5 5 5 7 5\n1 2 5 4 3\n5 3\n2 2 3 5 5\n10 9 11 9 9\n5 1\n2 2 4 4\n2 4 2 3\n4 4\n1 3 2 0\n4 4 5 4", "5\n2 2\n1 1\n3 4\n6 5\n5 5 7 6 4\n0 0 6 4 3\n5 4\n1 2 3 4 5\n10 9 10 9 9\n4 0\n2 2 3 3\n2 4 2 3\n4 3\n1 3 2 1\n3 3 5 4", "5\n2 1\n1 2\n2 4\n5 5\n5 4 7 6 5\n1 2 5 4 3\n5 3\n1 3 3 4 5\n11 9 11 10 9\n4 0\n2 1 5 3\n2 5 2 3\n4 4\n1 1 3 1\n4 4 4 4", "5\n2 0\n0 2\n3 3\n5 5\n6 6 6 6 5\n1 2 5 5 4\n5 2\n1 3 2 3 5\n10 9 10 10 9\n4 0\n2 3 4 3\n1 4 2 3\n5 5\n1 2 2 1\n4 5 5 4", "5\n2 0\n1 2\n3 4\n5 5\n5 5 6 7 5\n2 3 5 4 3\n5 3\n1 2 3 4 5\n10 9 11 10 10\n4 0\n2 2 3 3\n2 3 1 3\n4 4\n1 1 2 1\n4 4 7 4", "5\n2 1\n0 2\n3 4\n5 5\n5 4 6 6 5\n1 2 5 4 2\n5 4\n2 3 3 5 5\n10 9 10 10 8\n4 0\n2 1 5 3\n1 4 2 2\n4 3\n1 1 2 1\n4 5 5 5", "5\n1 1\n1 2\n3 4\n3 6\n6 5 6 6 5\n1 2 5 4 4\n5 2\n2 3 3 4 5\n10 10 10 10 9\n5 0\n2 2 4 3\n2 4 2 3\n5 4\n1 3 3 1\n4 4 5 4"], "output": ["6\n27\n39\n11\n17\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1353_D. Constructing the Array", "description": "You are given an array a of length n consisting of zeros. You perform n actions with this array: during the i-th action, the following sequence of operations appears:\n\n  1. Choose the maximum by length subarray (continuous subsegment) consisting only of zeros, among all such segments choose the leftmost one; \n  2. Let this segment be [l; r]. If r-l+1 is odd (not divisible by 2) then assign (set) a[(l+r)/(2)] := i (where i is the number of the current action), otherwise (if r-l+1 is even) assign (set) a[(l+r-1)/(2)] := i. \n\n\n\nConsider the array a of length 5 (initially a=[0, 0, 0, 0, 0]). Then it changes as follows:\n\n  1. Firstly, we choose the segment [1; 5] and assign a[3] := 1, so a becomes [0, 0, 1, 0, 0]; \n  2. then we choose the segment [1; 2] and assign a[1] := 2, so a becomes [2, 0, 1, 0, 0]; \n  3. then we choose the segment [4; 5] and assign a[4] := 3, so a becomes [2, 0, 1, 3, 0]; \n  4. then we choose the segment [2; 2] and assign a[2] := 4, so a becomes [2, 4, 1, 3, 0]; \n  5. and at last we choose the segment [5; 5] and assign a[5] := 5, so a becomes [2, 4, 1, 3, 5]. \n\n\n\nYour task is to find the array a of length n after performing all n actions. Note that the answer exists and unique.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).\n\nOutput\n\nFor each test case, print the answer — the array a of length n after performing n actions described in the problem statement. Note that the answer exists and unique.\n\nExample\n\nInput\n\n\n6\n1\n2\n3\n4\n5\n6\n\n\nOutput\n\n\n1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6 ", "testcase": ["6\n1\n2\n3\n3\n5\n6", "6\n-1\n1\n3\n4\n5\n6", "6\n1\n3\n3\n4\n5\n6", "6\n1\n3\n4\n4\n4\n6", "6\n1\n3\n4\n5\n5\n6", "6\n2\n2\n3\n4\n3\n6", "6\n1\n2\n2\n4\n6\n7", "6\n1\n1\n3\n4\n4\n7", "6\n1\n2\n2\n4\n4\n7", "6\n1\n2\n3\n4\n5\n7"], "output": ["1 \n1 2 \n2 1 3 \n3 1 2 4 \n2 4 1 3 5 \n3 4 1 5 2 6 \n"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1358_A. Park Lighting", "description": "Due to the coronavirus pandemic, city authorities obligated citizens to keep a social distance. The mayor of the city Semyon wants to light up Gluharniki park so that people could see each other even at night to keep the social distance.\n\nThe park is a rectangular table with n rows and m columns, where the cells of the table are squares, and the boundaries between the cells are streets. External borders are also streets. Every street has length 1. For example, park with n=m=2 has 12 streets.\n\nYou were assigned to develop a plan for lighting the park. You can put lanterns in the middle of the streets. The lamp lights two squares near it (or only one square if it stands on the border of the park).\n\n<image> The park sizes are: n=4, m=5. The lighted squares are marked yellow. Please note that all streets have length 1. Lanterns are placed in the middle of the streets. In the picture not all the squares are lit.\n\nSemyon wants to spend the least possible amount of money on lighting but also wants people throughout the park to keep a social distance. So he asks you to find the minimum number of lanterns that are required to light all the squares.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 ≤ n, m ≤ 10^4) — park sizes.\n\nOutput\n\nPrint t answers to the test cases. Each answer must be a single integer — the minimum number of lanterns that are required to light all the squares.\n\nExample\n\nInput\n\n\n5\n1 1\n1 3\n2 2\n3 3\n5 3\n\n\nOutput\n\n\n1\n2\n2\n5\n8\n\nNote\n\nPossible optimal arrangement of the lanterns for the 2-nd test case of input data example: <image>\n\nPossible optimal arrangement of the lanterns for the 3-rd test case of input data example: <image>", "testcase": ["5\n1 1\n1 3\n2 2\n2 3\n6 1", "5\n1 1\n1 3\n3 3\n3 4\n6 3", "5\n1 1\n1 3\n2 2\n2 4\n3 3", "5\n1 1\n1 2\n2 2\n3 3\n4 3", "5\n1 0\n2 4\n2 2\n3 2\n5 3", "5\n2 0\n1 4\n2 3\n3 3\n5 3", "5\n1 1\n0 3\n2 3\n3 3\n5 3", "5\n2 1\n0 3\n1 1\n3 3\n5 3", "5\n2 1\n1 2\n2 1\n3 2\n5 3", "5\n2 1\n1 3\n2 2\n3 3\n4 3"], "output": ["1\n2\n2\n5\n8\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Johnny has recently found an ancient, broken computer. The machine has only one register, which allows one to put in there one variable. Then in one operation, you can shift its bits left or right by at most three positions. The right shift is forbidden if it cuts off some ones. So, in fact, in one operation, you can multiply or divide your number by 2, 4 or 8, and division is only allowed if the number is divisible by the chosen divisor. \n\nFormally, if the register contains a positive integer x, in one operation it can be replaced by one of the following: \n\n  * x ⋅ 2 \n  * x ⋅ 4 \n  * x ⋅ 8 \n  * x / 2, if x is divisible by 2 \n  * x / 4, if x is divisible by 4 \n  * x / 8, if x is divisible by 8 \n\n\n\nFor example, if x = 6, in one operation it can be replaced by 12, 24, 48 or 3. Value 6 isn't divisible by 4 or 8, so there're only four variants of replacement.\n\nNow Johnny wonders how many operations he needs to perform if he puts a in the register and wants to get b at the end.\n\nInput\n\nThe input consists of multiple test cases. The first line contains an integer t (1 ≤ t ≤ 1000) — the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 ≤ a, b ≤ 10^{18}) — the initial and target value of the variable, respectively.\n\nOutput\n\nOutput t lines, each line should contain one integer denoting the minimum number of operations Johnny needs to perform. If Johnny cannot get b at the end, then write -1.\n\nExample\n\nInput\n\n\n10\n10 5\n11 44\n17 21\n1 1\n96 3\n2 128\n1001 1100611139403776\n1000000000000000000 1000000000000000000\n7 1\n10 8\n\n\nOutput\n\n\n1\n1\n-1\n0\n2\n2\n14\n0\n-1\n-1\n\nNote\n\nIn the first test case, Johnny can reach 5 from 10 by using the shift to the right by one (i.e. divide by 2).\n\nIn the second test case, Johnny can reach 44 from 11 by using the shift to the left by two (i.e. multiply by 4).\n\nIn the third test case, it is impossible for Johnny to reach 21 from 17.\n\nIn the fourth test case, initial and target values are equal, so Johnny has to do 0 operations.\n\nIn the fifth test case, Johnny can reach 3 from 96 by using two shifts to the right: one by 2, and another by 3 (i.e. divide by 4 and by 8).", "testcase": ["10\n10 5\n11 43\n18 21\n1 1\n96 3\n2 127\n1003 1100611139403776\n999999999999999999 1000000000000000000\n6 1\n10 8", "10\n11 5\n11 44\n17 21\n1 1\n96 3\n3 128\n1001 1100611139403776\n999999999999999999 1000000000000000001\n7 2\n10 8", "10\n10 6\n11 44\n17 21\n1 1\n97 3\n2 127\n1001 1100611139403776\n1000000000000000000 1000000000000000001\n6 0\n11 8", "10\n10 4\n9 44\n18 21\n1 1\n96 3\n2 127\n1001 1100611139403776\n1000000000000000002 1000000000000000000\n7 1\n10 8", "10\n10 5\n10 44\n16 21\n1 0\n96 2\n2 129\n1000 1100611139403776\n1000000000000000000 1000000000000000000\n7 1\n11 8", "10\n9 5\n11 44\n17 21\n1 2\n97 3\n3 128\n1001 1100611139403776\n1000000000000000001 1000000000000000000\n7 2\n10 9", "10\n10 5\n11 43\n17 21\n0 1\n96 3\n2 128\n1000 1100611139403776\n1000000000000000000 1000000000000000000\n7 1\n11 7", "10\n11 5\n11 44\n16 21\n1 0\n95 3\n1 128\n1002 1100611139403776\n1000000000000000000 1000000000000000000\n6 1\n10 8", "10\n10 5\n12 43\n17 21\n1 0\n96 3\n2 128\n1003 1100611139403776\n1000000000000000000 1000000000000000000\n7 1\n10 8", "10\n10 5\n11 45\n17 21\n1 1\n97 3\n3 129\n999 1100611139403776\n1000000000000000000 1000000000000000000\n7 1\n11 8"], "output": ["1\n1\n-1\n0\n2\n2\n14\n0\n-1\n-1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1366_A. Shovels and Swords", "description": "Polycarp plays a well-known computer game (we won't mention its name). In this game, he can craft tools of two types — shovels and swords. To craft a shovel, Polycarp spends two sticks and one diamond; to craft a sword, Polycarp spends two diamonds and one stick.\n\nEach tool can be sold for exactly one emerald. How many emeralds can Polycarp earn, if he has a sticks and b diamonds?\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 ≤ a, b ≤ 10^9) — the number of sticks and the number of diamonds, respectively.\n\nOutput\n\nFor each test case print one integer — the maximum number of emeralds Polycarp can earn.\n\nExample\n\nInput\n\n\n4\n4 4\n1000000000 0\n7 15\n8 7\n\n\nOutput\n\n\n2\n0\n7\n5\n\nNote\n\nIn the first test case Polycarp can earn two emeralds as follows: craft one sword and one shovel.\n\nIn the second test case Polycarp does not have any diamonds, so he cannot craft anything.", "testcase": ["4\n4 5\n1000000000 0\n7 15\n8 9", "4\n5 4\n1000000001 0\n7 15\n7 7", "4\n3 3\n1000000000 0\n7 15\n7 7", "4\n5 4\n1000000000 0\n6 14\n8 7", "4\n4 4\n1000000000 -1\n7 15\n7 8", "4\n4 4\n1000000000 -1\n7 14\n8 6", "4\n4 4\n1000000001 0\n7 16\n8 8", "4\n4 4\n1000000000 0\n7 16\n8 7", "4\n4 3\n1000000000 0\n6 16\n8 7", "4\n4 4\n1000000001 0\n7 14\n8 8"], "output": ["2\n0\n7\n5\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "136_B. Ternary Logic", "description": "Little Petya very much likes computers. Recently he has received a new \"Ternatron IV\" as a gift from his mother. Unlike other modern computers, \"Ternatron IV\" operates with ternary and not binary logic. Petya immediately wondered how the xor operation is performed on this computer (and whether there is anything like it).\n\nIt turned out that the operation does exist (however, it is called tor) and it works like this. Suppose that we need to calculate the value of the expression a tor b. Both numbers a and b are written in the ternary notation one under the other one (b under a). If they have a different number of digits, then leading zeroes are added to the shorter number until the lengths are the same. Then the numbers are summed together digit by digit. The result of summing each two digits is calculated modulo 3. Note that there is no carry between digits (i. e. during this operation the digits aren't transferred). For example: 1410 tor 5010 = 01123 tor 12123 = 10213 = 3410.\n\nPetya wrote numbers a and c on a piece of paper. Help him find such number b, that a tor b = c. If there are several such numbers, print the smallest one.\n\nInput\n\nThe first line contains two integers a and c (0 ≤ a, c ≤ 109). Both numbers are written in decimal notation.\n\nOutput\n\nPrint the single integer b, such that a tor b = c. If there are several possible numbers b, print the smallest one. You should print the number in decimal notation.\n\nExamples\n\nInput\n\n14 34\n\n\nOutput\n\n50\n\n\nInput\n\n50 34\n\n\nOutput\n\n14\n\n\nInput\n\n387420489 225159023\n\n\nOutput\n\n1000000001\n\n\nInput\n\n5 5\n\n\nOutput\n\n0", "testcase": ["5 6", "5 6", "387420489 225159024", "5 6", "50 35", "5 4", "387420489 225159022", "14 35", "387420489 225159022", "5 6"], "output": ["1000000001\n", "50\n", "14\n", "0\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1371_D. Grid-00100", "description": "A mad scientist Dr.Jubal has made a competitive programming task. Try to solve it!\n\nYou are given integers n,k. Construct a grid A with size n × n consisting of integers 0 and 1. The very important condition should be satisfied: the sum of all elements in the grid is exactly k. In other words, the number of 1 in the grid is equal to k.\n\nLet's define:\n\n  * A_{i,j} as the integer in the i-th row and the j-th column. \n  * R_i = A_{i,1}+A_{i,2}+...+A_{i,n} (for all 1 ≤ i ≤ n). \n  * C_j = A_{1,j}+A_{2,j}+...+A_{n,j} (for all 1 ≤ j ≤ n). \n  * In other words, R_i are row sums and C_j are column sums of the grid A. \n  * For the grid A let's define the value f(A) = (max(R)-min(R))^2 + (max(C)-min(C))^2 (here for an integer sequence X we define max(X) as the maximum value in X and min(X) as the minimum value in X). \n\n\n\nFind any grid A, which satisfies the following condition. Among such grids find any, for which the value f(A) is the minimum possible. Among such tables, you can find any.\n\nInput\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 ≤ n ≤ 300, 0 ≤ k ≤ n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, firstly print the minimum possible value of f(A) among all tables, for which the condition is satisfied.\n\nAfter that, print n lines contain n characters each. The j-th character in the i-th line should be equal to A_{i,j}.\n\nIf there are multiple answers you can print any.\n\nExample\n\nInput\n\n\n4\n2 2\n3 8\n1 0\n4 16\n\n\nOutput\n\n\n0\n10\n01\n2\n111\n111\n101\n0\n0\n0\n1111\n1111\n1111\n1111\n\nNote\n\nIn the first test case, the sum of all elements in the grid is equal to 2, so the condition is satisfied. R_1 = 1, R_2 = 1 and C_1 = 1, C_2 = 1. Then, f(A) = (1-1)^2 + (1-1)^2 = 0, which is the minimum possible value of f(A).\n\nIn the second test case, the sum of all elements in the grid is equal to 8, so the condition is satisfied. R_1 = 3, R_2 = 3, R_3 = 2 and C_1 = 3, C_2 = 2, C_3 = 3. Then, f(A) = (3-2)^2 + (3-2)^2 = 2. It can be proven, that it is the minimum possible value of f(A).", "testcase": ["4\n3 2\n3 7\n1 0\n4 15", "4\n1 2\n2 8\n1 0\n5 16", "4\n2 1\n2 7\n1 0\n4 16", "4\n3 2\n2 8\n1 0\n4 17", "4\n2 2\n2 9\n1 0\n4 15", "4\n3 2\n3 8\n0 0\n5 16", "4\n2 2\n3 9\n2 0\n4 17", "4\n2 3\n3 8\n1 0\n4 16", "4\n2 3\n2 8\n1 0\n3 16", "4\n2 2\n3 8\n1 0\n4 17"], "output": ["0\n10\n01\n2\n111\n111\n101\n0\n0\n0\n1111\n1111\n1111\n1111\n"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1373_B. 01 Game", "description": "Alica and Bob are playing a game.\n\nInitially they have a binary string s consisting of only characters 0 and 1.\n\nAlice and Bob make alternating moves: Alice makes the first move, Bob makes the second move, Alice makes the third one, and so on. During each move, the current player must choose two different adjacent characters of string s and delete them. For example, if s = 1011001 then the following moves are possible: \n\n  1. delete s_1 and s_2: 1011001 → 11001; \n  2. delete s_2 and s_3: 1011001 → 11001; \n  3. delete s_4 and s_5: 1011001 → 10101; \n  4. delete s_6 and s_7: 1011001 → 10110. \n\n\n\nIf a player can't make any move, they lose. Both players play optimally. You have to determine if Alice can win.\n\nInput\n\nFirst line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nOnly line of each test case contains one string s (1 ≤ |s| ≤ 100), consisting of only characters 0 and 1.\n\nOutput\n\nFor each test case print answer in the single line.\n\nIf Alice can win print DA (YES in Russian) in any register. Otherwise print NET (NO in Russian) in any register.\n\nExample\n\nInput\n\n\n3\n01\n1111\n0011\n\n\nOutput\n\n\nDA\nNET\nNET\n\nNote\n\nIn the first test case after Alice's move string s become empty and Bob can not make any move.\n\nIn the second test case Alice can not make any move initially.\n\nIn the third test case after Alice's move string s turn into 01. Then, after Bob's move string s become empty and Alice can not make any move.", "testcase": ["3\n2\n1111\n10", "3\n2\n1110\n0011", "3\n01\n1110\n10", "3\n2\n1110\n0011", "3\n01\n1111\n11", "3\n3\n1111\n0011", "3\n01\n1109\n0011", "3\n0\n1112\n0011", "3\n0\n1111\n10", "3\n01\n1111\n0011"], "output": ["DA\nNET\nNET\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "You are given an array a consisting of n integers. Indices of the array start from zero (i. e. the first element is a_0, the second one is a_1, and so on).\n\nYou can reverse at most one subarray (continuous subsegment) of this array. Recall that the subarray of a with borders l and r is a[l; r] = a_l, a_{l + 1}, ..., a_{r}.\n\nYour task is to reverse such a subarray that the sum of elements on even positions of the resulting array is maximized (i. e. the sum of elements a_0, a_2, ..., a_{2k} for integer k = ⌊(n-1)/(2)⌋ should be maximum possible).\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 ≤ n ≤ 2 ⋅ 10^5) — the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 ≤ a_i ≤ 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 ⋅ 10^5 (∑ n ≤ 2 ⋅ 10^5).\n\nOutput\n\nFor each test case, print the answer on the separate line — the maximum possible sum of elements on even positions after reversing at most one subarray (continuous subsegment) of a.\n\nExample\n\nInput\n\n\n4\n8\n1 7 3 4 7 6 2 9\n5\n1 2 1 2 1\n10\n7 8 4 5 7 6 8 9 7 3\n4\n3 1 2 1\n\n\nOutput\n\n\n26\n5\n37\n5", "testcase": ["4\n8\n1 5 3 4 7 6 2 9\n5\n1 2 1 2 2\n9\n7 8 4 4 8 5 8 8 7 2\n4\n3 0 2 1", "4\n8\n1 7 3 5 8 6 3 9\n6\n1 2 1 2 1\n11\n7 8 4 4 7 4 8 9 7 3\n4\n3 1 2 1", "4\n7\n1 7 3 5 7 5 2 9\n6\n1 3 1 1 1\n9\n7 8 4 5 7 5 8 8 7 2\n4\n3 1 2 1", "4\n8\n1 6 2 3 7 6 2 9\n6\n3 2 1 2 1\n10\n7 8 3 5 7 8 8 9 7 3\n4\n3 1 2 2", "4\n8\n0 7 3 4 7 6 1 9\n5\n1 2 0 3 1\n11\n6 8 4 6 7 6 8 9 8 3\n4\n3 1 1 2", "4\n8\n1 7 3 4 7 6 2 9\n5\n1 2 1 2 1\n10\n7 8 4 5 8 6 9 9 8 4\n4\n4 2 2 1", "4\n8\n1 6 3 3 7 7 2 9\n5\n1 2 1 2 1\n11\n7 8 5 5 6 7 8 9 7 2\n4\n3 1 3 2", "4\n8\n1 7 3 3 6 6 3 10\n5\n1 3 1 2 1\n10\n7 8 4 4 7 6 8 9 7 3\n4\n3 1 2 1", "4\n8\n1 8 3 4 7 6 2 9\n6\n1 2 1 2 1\n9\n7 8 4 4 7 7 8 11 7 3\n5\n3 1 2 1", "4\n8\n1 7 3 4 7 6 2 10\n5\n1 2 1 1 1\n9\n7 8 4 5 6 6 8 8 7 3\n4\n3 1 2 0"], "output": ["26\n5\n37\n5\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "You are given an integer n. In one move, you can either multiply n by two or divide n by 6 (if it is divisible by 6 without the remainder).\n\nYour task is to find the minimum number of moves needed to obtain 1 from n or determine if it's impossible to do that.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 ≤ n ≤ 10^9).\n\nOutput\n\nFor each test case, print the answer — the minimum number of moves needed to obtain 1 from n if it's possible to do that or -1 if it's impossible to obtain 1 from n.\n\nExample\n\nInput\n\n\n7\n1\n2\n3\n12\n12345\n15116544\n387420489\n\n\nOutput\n\n\n0\n-1\n2\n-1\n-1\n12\n36\n\nNote\n\nConsider the sixth test case of the example. The answer can be obtained by the following sequence of moves from the given integer 15116544:\n\n  1. Divide by 6 and get 2519424; \n  2. divide by 6 and get 419904; \n  3. divide by 6 and get 69984; \n  4. divide by 6 and get 11664; \n  5. multiply by 2 and get 23328; \n  6. divide by 6 and get 3888; \n  7. divide by 6 and get 648; \n  8. divide by 6 and get 108; \n  9. multiply by 2 and get 216; \n  10. divide by 6 and get 36; \n  11. divide by 6 and get 6; \n  12. divide by 6 and get 1. ", "testcase": ["7\n2\n2\n3\n12\n12345\n15116544\n387420489", "7\n1\n2\n3\n13\n12345\n15116543\n387420488", "7\n1\n2\n3\n12\n12346\n15116543\n387420490", "7\n1\n3\n3\n12\n12344\n15116544\n387420490", "7\n2\n1\n2\n12\n12345\n15116544\n387420489", "7\n1\n1\n3\n11\n12345\n15116543\n387420489", "7\n1\n2\n3\n12\n12345\n15116544\n387420490", "7\n1\n1\n4\n12\n12345\n15116544\n387420490", "7\n2\n1\n2\n12\n12345\n15116544\n387420489", "7\n1\n1\n3\n13\n12346\n15116544\n387420489"], "output": ["0\n-1\n2\n-1\n-1\n12\n36\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1391_C. Cyclic Permutations ", "description": "A permutation of length n is an array consisting of n distinct integers from 1 to n in arbitrary order. For example, [2,3,1,5,4] is a permutation, but [1,2,2] is not a permutation (2 appears twice in the array) and [1,3,4] is also not a permutation (n=3 but there is 4 in the array).\n\nConsider a permutation p of length n, we build a graph of size n using it as follows: \n\n  * For every 1 ≤ i ≤ n, find the largest j such that 1 ≤ j < i and p_j > p_i, and add an undirected edge between node i and node j \n  * For every 1 ≤ i ≤ n, find the smallest j such that i < j ≤ n and p_j > p_i, and add an undirected edge between node i and node j \n\n\n\nIn cases where no such j exists, we make no edges. Also, note that we make edges between the corresponding indices, not the values at those indices.\n\nFor clarity, consider as an example n = 4, and p = [3,1,4,2]; here, the edges of the graph are (1,3),(2,1),(2,3),(4,3).\n\nA permutation p is cyclic if the graph built using p has at least one simple cycle. \n\nGiven n, find the number of cyclic permutations of length n. Since the number may be very large, output it modulo 10^9+7.\n\nPlease refer to the Notes section for the formal definition of a simple cycle\n\nInput\n\nThe first and only line contains a single integer n (3 ≤ n ≤ 10^6).\n\nOutput\n\nOutput a single integer 0 ≤ x < 10^9+7, the number of cyclic permutations of length n modulo 10^9+7.\n\nExamples\n\nInput\n\n\n4\n\n\nOutput\n\n\n16\n\nInput\n\n\n583291\n\n\nOutput\n\n\n135712853\n\nNote\n\nThere are 16 cyclic permutations for n = 4. [4,2,1,3] is one such permutation, having a cycle of length four: 4 → 3 → 2 → 1 → 4.\n\nNodes v_1, v_2, …, v_k form a simple cycle if the following conditions hold: \n\n  * k ≥ 3. \n  * v_i ≠ v_j for any pair of indices i and j. (1 ≤ i < j ≤ k) \n  * v_i and v_{i+1} share an edge for all i (1 ≤ i < k), and v_1 and v_k share an edge. ", "testcase": ["583290", "583290", "3", "3", "583292", "5", "3", "583290", "3", "3"], "output": ["16\n", "135712853\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "One evening Rainbow Dash and Fluttershy have come up with a game. Since the ponies are friends, they have decided not to compete in the game but to pursue a common goal. \n\nThe game starts on a square flat grid, which initially has the outline borders built up. Rainbow Dash and Fluttershy have flat square blocks with size 1×1, Rainbow Dash has an infinite amount of light blue blocks, Fluttershy has an infinite amount of yellow blocks. \n\nThe blocks are placed according to the following rule: each newly placed block must touch the built on the previous turns figure by a side (note that the outline borders of the grid are built initially). At each turn, one pony can place any number of blocks of her color according to the game rules.\n\nRainbow and Fluttershy have found out that they can build patterns on the grid of the game that way. They have decided to start with something simple, so they made up their mind to place the blocks to form a chess coloring. Rainbow Dash is well-known for her speed, so she is interested in the minimum number of turns she and Fluttershy need to do to get a chess coloring, covering the whole grid with blocks. Please help her find that number!\n\nSince the ponies can play many times on different boards, Rainbow Dash asks you to find the minimum numbers of turns for several grids of the games.\n\nThe chess coloring in two colors is the one in which each square is neighbor by side only with squares of different colors.\n\nInput\n\nThe first line contains a single integer T (1 ≤ T ≤ 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 ≤ n ≤ 10^9): the size of the side of the grid of the game. \n\nOutput\n\nFor each grid of the game print the minimum number of turns required to build a chess coloring pattern out of blocks on it.\n\nExample\n\nInput\n\n\n2\n3\n4\n\n\nOutput\n\n\n2\n3\n\nNote\n\nFor 3×3 grid ponies can make two following moves: <image>", "testcase": ["2\n4\n4", "2\n3\n3", "2\n3\n3", "2\n3\n3", "2\n3\n3", "2\n3\n5", "2\n2\n4", "2\n3\n3", "2\n3\n5", "2\n4\n4"], "output": ["2\n3\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "139_D. Digits Permutations", "description": "Andrey's favourite number is n. Andrey's friends gave him two identical numbers n as a New Year present. He hung them on a wall and watched them adoringly.\n\nThen Andrey got bored from looking at the same number and he started to swap digits first in one, then in the other number, then again in the first number and so on (arbitrary number of changes could be made in each number). At some point it turned out that if we sum the resulting numbers, then the number of zeroes with which the sum will end would be maximum among the possible variants of digit permutations in those numbers.\n\nGiven number n, can you find the two digit permutations that have this property?\n\nInput\n\nThe first line contains a positive integer n — the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.\n\nOutput\n\nPrint two permutations of digits of number n, such that the sum of these numbers ends with the maximum number of zeroes. The permutations can have leading zeroes (if they are present, they all should be printed). The permutations do not have to be different. If there are several answers, print any of them.\n\nExamples\n\nInput\n\n198\n\n\nOutput\n\n981\n819\n\n\nInput\n\n500\n\n\nOutput\n\n500\n500", "testcase": ["197", "199", "501", "499", "199", "199", "499", "199", "499", "199"], "output": ["500\n500", "981\n819"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1401_A. Distance and Axis", "description": "We have a point A with coordinate x = n on OX-axis. We'd like to find an integer point B (also on OX-axis), such that the absolute difference between the distance from O to B and the distance from A to B is equal to k.\n\n<image> The description of the first test case.\n\nSince sometimes it's impossible to find such point B, we can, in one step, increase or decrease the coordinate of A by 1. What is the minimum number of steps we should do to make such point B exist?\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 6000) — the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 ≤ n, k ≤ 10^6) — the initial position of point A and desirable absolute difference.\n\nOutput\n\nFor each test case, print the minimum number of steps to make point B exist.\n\nExample\n\nInput\n\n\n6\n4 0\n5 8\n0 1000000\n0 0\n1 0\n1000000 1000000\n\n\nOutput\n\n\n0\n3\n1000000\n0\n1\n0\n\nNote\n\nIn the first test case (picture above), if we set the coordinate of B as 2 then the absolute difference will be equal to |(2 - 0) - (4 - 2)| = 0 and we don't have to move A. So the answer is 0.\n\nIn the second test case, we can increase the coordinate of A by 3 and set the coordinate of B as 0 or 8. The absolute difference will be equal to |8 - 0| = 8, so the answer is 3.\n\n<image>", "testcase": ["6\n3 0\n5 9\n0 1000000\n-1 0\n1 0\n1000001 1000000", "6\n4 0\n5 8\n0 1000000\n0 0\n1 0\n1000001 999999", "6\n4 0\n5 7\n0 999999\n0 0\n0 0\n1000000 1000001", "6\n3 0\n5 8\n0 999999\n0 0\n2 0\n1000000 999999", "6\n4 0\n4 8\n1 1000000\n0 0\n0 1\n1000000 1000000", "6\n4 0\n6 9\n0 999999\n0 0\n2 0\n1000000 1000000", "6\n3 0\n4 8\n0 1000000\n0 1\n1 0\n1000000 999999", "6\n4 0\n5 8\n-1 999999\n0 0\n1 0\n1000000 1000000", "6\n4 1\n5 9\n0 1000000\n0 1\n1 0\n1000000 1000001", "6\n4 1\n5 8\n0 1000001\n0 1\n1 0\n1000001 1000000"], "output": ["0\n3\n1000000\n0\n1\n0\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1409_B. Minimum Product", "description": "You are given four integers a, b, x and y. Initially, a ≥ x and b ≥ y. You can do the following operation no more than n times:\n\n  * Choose either a or b and decrease it by one. However, as a result of this operation, value of a cannot become less than x, and value of b cannot become less than y. \n\n\n\nYour task is to find the minimum possible product of a and b (a ⋅ b) you can achieve by applying the given operation no more than n times.\n\nYou have to answer t independent test cases.\n\nInput\n\nThe first line of the input contains one integer t (1 ≤ t ≤ 2 ⋅ 10^4) — the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 ≤ a, b, x, y, n ≤ 10^9). Additional constraint on the input: a ≥ x and b ≥ y always holds.\n\nOutput\n\nFor each test case, print one integer: the minimum possible product of a and b (a ⋅ b) you can achieve by applying the given operation no more than n times.\n\nExample\n\nInput\n\n\n7\n10 10 8 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 9 1 10\n\n\nOutput\n\n\n70\n77\n177177\n999999999000000000\n999999999\n55\n10\n\nNote\n\nIn the first test case of the example, you need to decrease b three times and obtain 10 ⋅ 7 = 70.\n\nIn the second test case of the example, you need to decrease a one time, b one time and obtain 11 ⋅ 7 = 77.\n\nIn the sixth test case of the example, you need to decrease a five times and obtain 5 ⋅ 11 = 55.\n\nIn the seventh test case of the example, you need to decrease b ten times and obtain 10 ⋅ 1 = 10.", "testcase": ["7\n10 10 7 5 3\n12 8 9 7 2\n12344 43 4543 39 123212\n1000000000 1000000000 2 4 1\n1000000001 1000000000 1 1 1000000000\n10 11 1 2 5\n10 11 9 0 10", "7\n10 10 6 5 3\n12 8 8 7 3\n12343 43 4543 39 123212\n1000000000 999999999 1 1 2\n1000000000 1000000000 1 1 1000000000\n10 12 2 1 5\n10 11 7 2 10", "7\n10 10 7 5 3\n12 8 8 7 2\n12343 43 4544 40 123212\n1000000001 1000000000 2 1 1\n1000000001 1000000000 2 0 1000000000\n8 11 2 1 5\n10 11 9 1 11", "7\n10 9 8 5 2\n12 9 7 7 2\n12343 43 4543 40 123212\n1000000000 1000000000 2 1 3\n1000000000 1000000000 1 1 1000000000\n10 10 2 1 5\n10 11 9 3 10", "7\n10 9 7 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000001 0 2 1\n1000000000 1000000000 1 1 999999999\n11 10 2 1 5\n10 12 9 1 10", "7\n9 9 8 5 3\n12 8 7 8 2\n12343 43 4543 39 123213\n1000000000 1000000001 0 1 1\n999999999 1000000000 1 1 999999999\n9 11 2 1 5\n10 11 9 0 10", "7\n10 9 8 5 3\n12 8 9 7 2\n12343 43 4543 40 123212\n1000000000 1000000000 1 1 2\n1000000000 1000000000 1 1 999999999\n10 10 2 1 5\n11 11 9 1 10", "7\n10 10 7 5 3\n12 8 8 7 2\n12343 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 999999999\n10 11 1 1 4\n10 11 9 1 11", "7\n9 9 8 5 3\n12 8 8 7 2\n12343 43 4543 40 123212\n1000000000 1000000000 2 1 1\n1000000000 999999999 1 0 1000000001\n11 12 2 1 5\n10 11 8 2 10", "7\n9 10 8 5 4\n12 8 10 7 2\n12342 43 4543 39 123212\n1000000000 1000000000 1 1 1\n1000000000 1000000000 1 1 1000000000\n10 11 2 1 5\n10 11 8 1 11"], "output": ["70\n77\n177177\n999999999000000000\n999999999\n55\n10\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1419_A. Digit Game", "description": "Everyone knows that agents in Valorant decide, who will play as attackers, and who will play as defenders. To do that Raze and Breach decided to play t matches of a digit game...\n\nIn each of t matches of the digit game, a positive integer is generated. It consists of n digits. The digits of this integer are numerated from 1 to n from the highest-order digit to the lowest-order digit. After this integer is announced, the match starts.\n\nAgents play in turns. Raze starts. In one turn an agent can choose any unmarked digit and mark it. Raze can choose digits on odd positions, but can not choose digits on even positions. Breach can choose digits on even positions, but can not choose digits on odd positions. The match ends, when there is only one unmarked digit left. If the single last digit is odd, then Raze wins, else Breach wins.\n\nIt can be proved, that before the end of the match (for every initial integer with n digits) each agent has an ability to make a turn, i.e. there is at least one unmarked digit, that stands on a position of required parity.\n\nFor each of t matches find out, which agent wins, if both of them want to win and play optimally.\n\nInput\n\nFirst line of input contains an integer t (1 ≤ t ≤ 100) — the number of matches.\n\nThe first line of each match description contains an integer n (1 ≤ n ≤ 10^3) — the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.\n\nOutput\n\nFor each match print 1, if Raze wins, and 2, if Breach wins.\n\nExample\n\nInput\n\n\n4\n1\n2\n1\n3\n3\n102\n4\n2069\n\n\nOutput\n\n\n2\n1\n1\n2\n\nNote\n\nIn the first match no one can make a turn, the only digit left is 2, it's even, so Breach wins.\n\nIn the second match the only digit left is 3, it's odd, so Raze wins.\n\nIn the third match Raze can mark the last digit, after that Breach can only mark 0. 1 will be the last digit left, it's odd, so Raze wins.\n\nIn the fourth match no matter how Raze plays, Breach can mark 9, and in the end there will be digit 0. It's even, so Breach wins.", "testcase": ["4\n0\n2\n0\n2\n3\n102\n4\n2069", "4\n1\n1\n1\n3\n3\n102\n4\n2069", "4\n1\n2\n1\n3\n3\n102\n3\n2069", "4\n2\n3\n1\n3\n2\n102\n4\n2069", "4\n1\n2\n1\n1\n3\n102\n4\n2068", "4\n1\n3\n1\n3\n3\n102\n4\n2069", "4\n1\n2\n1\n2\n3\n102\n6\n2069", "4\n1\n2\n1\n3\n3\n101\n5\n2068", "4\n1\n1\n0\n3\n2\n102\n4\n2069", "4\n1\n2\n1\n3\n3\n103\n4\n2069"], "output": ["2\n1\n1\n2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1420_A. Cubes Sorting", "description": "For god's sake, you're boxes with legs! It is literally your only purpose! Walking onto buttons! How can you not do the one thing you were designed for?\n\nOh, that's funny, is it? Oh it's funny? Because we've been at this for twelve hours and you haven't solved it either, so I don't know why you're laughing. You've got one hour! Solve it! \n\nWheatley decided to try to make a test chamber. He made a nice test chamber, but there was only one detail absent — cubes.\n\nFor completing the chamber Wheatley needs n cubes. i-th cube has a volume a_i.\n\nWheatley has to place cubes in such a way that they would be sorted in a non-decreasing order by their volume. Formally, for each i>1, a_{i-1} ≤ a_i must hold.\n\nTo achieve his goal, Wheatley can exchange two neighbouring cubes. It means that for any i>1 you can exchange cubes on positions i-1 and i.\n\nBut there is a problem: Wheatley is very impatient. If Wheatley needs more than (n ⋅ (n-1))/(2)-1 exchange operations, he won't do this boring work.\n\nWheatly wants to know: can cubes be sorted under this conditions?\n\nInput\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 ≤ t ≤ 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 ≤ n ≤ 5 ⋅ 10^4) — number of cubes.\n\nThe second line contains n positive integers a_i (1 ≤ a_i ≤ 10^9) — volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case, print a word in a single line: \"YES\" (without quotation marks) if the cubes can be sorted and \"NO\" (without quotation marks) otherwise.\n\nExample\n\nInput\n\n\n3\n5\n5 3 2 1 4\n6\n2 2 2 2 2 2\n2\n2 1\n\n\nOutput\n\n\nYES\nYES\nNO\n\nNote\n\nIn the first test case it is possible to sort all the cubes in 7 exchanges.\n\nIn the second test case the cubes are already sorted.\n\nIn the third test case we can make 0 exchanges, but the cubes are not sorted yet, so the answer is \"NO\".", "testcase": ["3\n5\n4 3 2 2 4\n7\n2 3 3 3 2 2\n2\n2 1", "3\n5\n5 3 2 1 4\n6\n2 2 2 2 3 2\n4\n2 2", "3\n6\n5 3 1 1 4\n6\n2 1 3 2 1 2\n2\n3 1", "3\n6\n5 3 3 1 4\n6\n1 3 3 2 2 2\n2\n2 2", "3\n5\n3 4 2 1 4\n6\n3 2 2 3 3 2\n2\n2 1", "3\n5\n6 4 1 1 4\n6\n2 2 2 2 2 1\n2\n2 1", "3\n5\n4 3 1 0 4\n6\n2 2 2 3 1 2\n3\n2 1", "3\n6\n5 3 2 1 4\n6\n3 2 2 1 3 2\n2\n2 1", "3\n5\n5 3 2 1 4\n4\n2 1 1 2 1 2\n2\n3 1", "3\n5\n5 3 2 1 3\n5\n2 2 1 2 2 3\n2\n2 1"], "output": ["YES\nYES\nNO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "142_A. Help Farmer", "description": "Once upon a time in the Kingdom of Far Far Away lived Sam the Farmer. Sam had a cow named Dawn and he was deeply attached to her. Sam would spend the whole summer stocking hay to feed Dawn in winter. Sam scythed hay and put it into haystack. As Sam was a bright farmer, he tried to make the process of storing hay simpler and more convenient to use. He collected the hay into cubical hay blocks of the same size. Then he stored the blocks in his barn. After a summer spent in hard toil Sam stored A·B·C hay blocks and stored them in a barn as a rectangular parallelepiped A layers high. Each layer had B rows and each row had C blocks.\n\nAt the end of the autumn Sam came into the barn to admire one more time the hay he'd been stacking during this hard summer. Unfortunately, Sam was horrified to see that the hay blocks had been carelessly scattered around the barn. The place was a complete mess. As it turned out, thieves had sneaked into the barn. They completely dissembled and took away a layer of blocks from the parallelepiped's front, back, top and sides. As a result, the barn only had a parallelepiped containing (A - 1) × (B - 2) × (C - 2) hay blocks. To hide the evidence of the crime, the thieves had dissembled the parallelepiped into single 1 × 1 × 1 blocks and scattered them around the barn. After the theft Sam counted n hay blocks in the barn but he forgot numbers A, B и C.\n\nGiven number n, find the minimally possible and maximally possible number of stolen hay blocks.\n\nInput\n\nThe only line contains integer n from the problem's statement (1 ≤ n ≤ 109).\n\nOutput\n\nPrint space-separated minimum and maximum number of hay blocks that could have been stolen by the thieves.\n\nNote that the answer to the problem can be large enough, so you must use the 64-bit integer type for calculations. Please, do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specificator.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n28 41\n\n\nInput\n\n7\n\n\nOutput\n\n47 65\n\n\nInput\n\n12\n\n\nOutput\n\n48 105\n\nNote\n\nLet's consider the first sample test. If initially Sam has a parallelepiped consisting of 32 = 2 × 4 × 4 hay blocks in his barn, then after the theft the barn has 4 = (2 - 1) × (4 - 2) × (4 - 2) hay blocks left. Thus, the thieves could have stolen 32 - 4 = 28 hay blocks. If Sam initially had a parallelepiped consisting of 45 = 5 × 3 × 3 hay blocks in his barn, then after the theft the barn has 4 = (5 - 1) × (3 - 2) × (3 - 2) hay blocks left. Thus, the thieves could have stolen 45 - 4 = 41 hay blocks. No other variants of the blocks' initial arrangement (that leave Sam with exactly 4 blocks after the theft) can permit the thieves to steal less than 28 or more than 41 blocks.", "testcase": ["6", "13", "11", "13", "6", "3", "8", "11", "6", "5"], "output": ["48 105\n", "28 41\n", "47 65\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1430_B. Barrels", "description": "You have n barrels lined up in a row, numbered from left to right from one. Initially, the i-th barrel contains a_i liters of water.\n\nYou can pour water from one barrel to another. In one act of pouring, you can choose two different barrels x and y (the x-th barrel shouldn't be empty) and pour any possible amount of water from barrel x to barrel y (possibly, all water). You may assume that barrels have infinite capacity, so you can pour any amount of water in each of them. \n\nCalculate the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times.\n\nSome examples: \n\n  * if you have four barrels, each containing 5 liters of water, and k = 1, you may pour 5 liters from the second barrel into the fourth, so the amounts of water in the barrels are [5, 0, 5, 10], and the difference between the maximum and the minimum is 10; \n  * if all barrels are empty, you can't make any operation, so the difference between the maximum and the minimum amount is still 0. \n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 1000) — the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 ≤ k < n ≤ 2 ⋅ 10^5) — the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 ≤ a_i ≤ 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, print the maximum possible difference between the maximum and the minimum amount of water in the barrels, if you can pour water at most k times.\n\nExample\n\nInput\n\n\n2\n4 1\n5 5 5 5\n3 2\n0 0 0\n\n\nOutput\n\n\n10\n0", "testcase": ["2\n4 1\n4 5 6 5\n3 2\n-1 -1 0", "2\n5 2\n5 5 5 5\n3 2\n-1 0 1", "2\n3 1\n6 6 5 5\n3 2\n0 0 -1", "2\n5 1\n5 6 5 5\n3 2\n1 -1 0", "2\n4 1\n5 5 6 5\n3 2\n0 0 -1", "2\n5 1\n4 5 5 5\n2 2\n-1 0 0", "2\n5 1\n6 5 5 4\n3 2\n0 0 1", "2\n5 1\n5 4 5 5\n3 2\n0 -1 1", "2\n3 3\n5 5 5 5\n3 2\n0 0 1", "2\n4 1\n5 5 4 6\n1 2\n0 0 0"], "output": ["10\n0\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1436_A. Reorder", "description": "For a given array a consisting of n integers and a given integer m find if it is possible to reorder elements of the array a in such a way that ∑_{i=1}^{n}{∑_{j=i}^{n}{(a_j)/(j)}} equals m? It is forbidden to delete elements as well as insert new elements. Please note that no rounding occurs during division, for example, 5/2=2.5.\n\nInput\n\nThe first line contains a single integer t — the number of test cases (1 ≤ t ≤ 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 ≤ n ≤ 100, 0 ≤ m ≤ 10^6). The second line contains integers a_1, a_2, …, a_n (0 ≤ a_i ≤ 10^6) — the elements of the array.\n\nOutput\n\nFor each test case print \"YES\", if it is possible to reorder the elements of the array in such a way that the given formula gives the given value, and \"NO\" otherwise.\n\nExample\n\nInput\n\n\n2\n3 8\n2 5 1\n4 4\n0 1 2 3\n\n\nOutput\n\n\nYES\nNO\n\nNote\n\nIn the first test case one of the reorders could be [1, 2, 5]. The sum is equal to (1/1 + 2/2 + 5/3) + (2/2 + 5/3) + (5/3) = 8. The brackets denote the inner sum ∑_{j=i}^{n}{(a_j)/(j)}, while the summation of brackets corresponds to the sum over i.", "testcase": ["2\n3 8\n2 4 1\n5 4\n0 1 2 3", "2\n3 7\n3 5 2\n4 5\n0 1 2 3", "2\n4 8\n2 5 1\n4 4\n0 0 3 4", "2\n3 8\n2 5 2\n4 4\n0 1 2 4", "2\n4 7\n2 4 1\n3 4\n0 1 2 3", "2\n3 9\n2 6 1\n5 4\n0 1 3 3", "2\n3 7\n2 5 -1\n4 4\n0 1 2 2", "2\n3 7\n2 5 1\n3 4\n0 2 1 3", "2\n3 6\n2 5 1\n3 4\n0 1 2 4", "2\n3 8\n2 5 1\n4 4\n-1 1 1 3"], "output": ["YES\nNO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1451_D. Circle Game", "description": "Utkarsh is forced to play yet another one of Ashish's games. The game progresses turn by turn and as usual, Ashish moves first.\n\nConsider the 2D plane. There is a token which is initially at (0,0). In one move a player must increase either the x coordinate or the y coordinate of the token by exactly k. In doing so, the player must ensure that the token stays within a (Euclidean) distance d from (0,0).\n\nIn other words, if after a move the coordinates of the token are (p,q), then p^2 + q^2 ≤ d^2 must hold.\n\nThe game ends when a player is unable to make a move. It can be shown that the game will end in a finite number of moves. If both players play optimally, determine who will win.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 ≤ d ≤ 10^5) and k (1 ≤ k ≤ d).\n\nOutput\n\nFor each test case, if Ashish wins the game, print \"Ashish\", otherwise print \"Utkarsh\" (without the quotes).\n\nExample\n\nInput\n\n\n5\n2 1\n5 2\n10 3\n25 4\n15441 33\n\n\nOutput\n\n\nUtkarsh\nAshish\nUtkarsh\nUtkarsh\nAshish\n\nNote\n\nIn the first test case, one possible sequence of moves can be\n\n(0, 0) \\xrightarrow{Ashish } (0, 1) \\xrightarrow{Utkarsh } (0, 2).\n\nAshish has no moves left, so Utkarsh wins.\n\n<image>", "testcase": ["5\n2 0\n4 2\n10 4\n25 4\n15442 33", "5\n3 0\n5 2\n10 3\n25 3\n15440 33", "5\n3 2\n4 1\n10 3\n25 4\n15441 33", "5\n2 3\n5 2\n11 3\n25 4\n15440 33", "5\n2 1\n6 2\n10 3\n25 6\n15441 34", "5\n2 1\n5 2\n10 2\n26 4\n15443 33", "5\n2 1\n5 4\n10 2\n25 4\n15442 33", "5\n2 1\n4 2\n10 3\n26 4\n15441 33", "5\n2 1\n5 3\n10 2\n25 4\n15441 33", "5\n2 1\n6 2\n10 3\n25 6\n15441 34"], "output": ["\nUtkarsh\nAshish\nUtkarsh\nUtkarsh\nAshish\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1466_C. Canine poetry", "description": "After his wife's tragic death, Eurydice, Orpheus descended to the realm of death to see her. Reaching its gates was uneasy, but passing through them proved to be even more challenging. Mostly because of Cerberus, the three-headed hound of Hades. \n\nOrpheus, a famous poet, and musician plans to calm Cerberus with his poetry and safely walk past him. He created a very peculiar poem for Cerberus. It consists only of lowercase English letters. \n\nWe call a poem's substring a palindrome if and only if it reads the same backwards and forwards. A string a is a substring of a string b if a can be obtained from b by deleting several (possibly zero or all) characters from the beginning and several (possibly zero or all) characters from the end.\n\nUnfortunately, Cerberus dislikes palindromes of length greater than 1. For example in the poem abaa the hound of Hades wouldn't like substrings aba and aa.\n\nOrpheus can only calm Cerberus if the hound likes his poetry. That's why he wants to change his poem so that it does not contain any palindrome substrings of length greater than 1.\n\nOrpheus can modify the poem by replacing a letter at any position with any lowercase English letter. He can use this operation arbitrarily many times (possibly zero). Since there can be many palindromes in his poem, he may have to make some corrections. But how many, exactly? Given the poem, determine the minimal number of letters that have to be changed so that the poem does not contain any palindromes of length greater than 1.\n\nInput\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.\n\nOutput\n\nYou should output t lines, i-th line should contain a single integer, answer to the i-th test case.\n\nExample\n\nInput\n\n\n7\nbabba\nabaac\ncodeforces\nzeroorez\nabcdcba\nbbbbbbb\na\n\n\nOutput\n\n\n1\n1\n0\n1\n1\n4\n0\n\nNote\n\nIn the first test case, we can replace the third character with c and obtain a palindrome-less poem bacba.\n\nIn the second test case, we can replace the third character with d and obtain a palindrome-less poem abdac.\n\nIn the third test case, the initial poem already doesn't contain any palindromes, so Orpheus doesn't need to change anything there.", "testcase": ["7\nbabbs\nabaat\ncodefoices\nzeroorez\nabcdcba\nbbbbbbb\na", "7\nbabba\nabaac\ncodeforces\nzeroorez\nabbdzba\nbbbbbjb\na", "7\naabba\nabaau\ncodeforces\nzerooreu\nabcdcba\nbbbbbbb\na", "7\nbabba\nabaac\ncodeforces\nzeroorez\nancdcba\nbbrbbbb\nn", "7\nbabba\nabaxg\ncodeforces\nseroorez\nabcdcba\nbbbbbbb\na", "7\nbabba\naiaac\ncodeformes\nzeroorez\nabydcba\nbbbbbbb\na", "7\nbabqa\nabgac\ncodeforces\nzeroorez\nabcdcba\nbbbbbbb\nr", "7\nbabra\nabaac\ncodeforces\nzeroorez\nabcdcbl\nabbbbbb\na", "7\nbabba\nabaap\ncodeforces\nzerokrez\nabcdcba\nbbbbbbb\na", "7\nbabja\nabaac\ncodeforces\nzeroorez\nabcdcka\nbbebbbb\na"], "output": ["\n1\n1\n0\n1\n1\n4\n0\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "146_D. Lucky Number 2", "description": "Petya loves lucky numbers very much. Everybody knows that lucky numbers are positive integers whose decimal record contains only the lucky digits 4 and 7. For example, numbers 47, 744, 4 are lucky and 5, 17, 467 are not.\n\nPetya loves long lucky numbers very much. He is interested in the minimum lucky number d that meets some condition. Let cnt(x) be the number of occurrences of number x in number d as a substring. For example, if d = 747747, then cnt(4) = 2, cnt(7) = 4, cnt(47) = 2, cnt(74) = 2. Petya wants the following condition to fulfil simultaneously: cnt(4) = a1, cnt(7) = a2, cnt(47) = a3, cnt(74) = a4. Petya is not interested in the occurrences of other numbers. Help him cope with this task.\n\nInput\n\nThe single line contains four integers a1, a2, a3 and a4 (1 ≤ a1, a2, a3, a4 ≤ 106).\n\nOutput\n\nOn the single line print without leading zeroes the answer to the problem — the minimum lucky number d such, that cnt(4) = a1, cnt(7) = a2, cnt(47) = a3, cnt(74) = a4. If such number does not exist, print the single number \"-1\" (without the quotes).\n\nExamples\n\nInput\n\n2 2 1 1\n\n\nOutput\n\n4774\n\n\nInput\n\n4 7 3 1\n\n\nOutput\n\n-1", "testcase": ["2 2 0 2", "4 7 3 1", "4 8 3 0", "4 7 3 1", "4 8 3 2", "2 2 1 1", "4 6 4 1", "2 2 1 1", "2 2 1 -1", "4 8 3 2"], "output": ["4774\n", "-1\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1471_A. Strange Partition", "description": "You are given an array a of length n, and an integer x. You can perform the following operation as many times as you would like (possibly zero): replace two adjacent elements of the array by their sum. For example, if the initial array was [3, 6, 9], in a single operation one can replace the last two elements by their sum, yielding an array [3, 15], or replace the first two elements to get an array [9, 9]. Note that the size of the array decreases after each operation.\n\nThe beauty of an array b=[b_1, …, b_k] is defined as ∑_{i=1}^k \\left⌈ (b_i)/(x) \\right⌉, which means that we divide each element by x, round it up to the nearest integer, and sum up the resulting values. For example, if x = 3, and the array is [4, 11, 6], the beauty of the array is equal to \\left⌈ 4/3 \\right⌉ + \\left⌈ 11/3 \\right⌉ + \\left⌈ 6/3 \\right⌉ = 2 + 4 + 2 = 8.\n\nPlease determine the minimum and the maximum beauty you can get by performing some operations on the original array.\n\nInput\n\nThe first input line contains a single integer t — the number of test cases (1 ≤ t ≤ 1000).\n\nThe first line of each test case contains two integers n and x (1 ≤ n ≤ 10^5, 1 ≤ x ≤ 10^9).\n\nThe next line contains n integers a_1, a_2, …, a_n (1 ≤ a_i ≤ 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.\n\nOutput\n\nFor each test case output two integers — the minimal and the maximal possible beauty.\n\nExample\n\nInput\n\n\n2\n3 3\n3 6 9\n3 3\n6 4 11\n\n\nOutput\n\n\n6 6\n7 8\n\nNote\n\nIn the first test case the beauty of the array does not change if we perform any operations.\n\nIn the second example we can leave the array unchanged to attain the maximum beauty, and to get the minimum beauty one can replace two elements 4 and 11 with their sum, yielding an array [6, 15], which has its beauty equal to 7.", "testcase": ["2\n3 2\n4 6 9\n3 3\n6 4 11", "2\n3 3\n3 6 9\n3 3\n6 4 11", "2\n2 4\n3 7 8\n3 3\n6 4 11", "2\n3 3\n3 7 10\n3 2\n5 4 11", "2\n3 3\n1 6 9\n2 3\n5 4 11", "2\n3 3\n4 6 10\n3 4\n6 3 11", "2\n4 3\n3 6 9\n3 3\n6 5 11", "2\n3 3\n4 6 9\n3 4\n7 5 11", "2\n3 3\n3 6 8\n3 2\n6 4 11", "2\n3 3\n3 6 9\n3 3\n6 4 13"], "output": ["\n6 6\n7 8\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1480_A. Yet Another String Game", "description": "Homer has two friends Alice and Bob. Both of them are string fans. \n\nOne day, Alice and Bob decide to play a game on a string s = s_1 s_2 ... s_n of length n consisting of lowercase English letters. They move in turns alternatively and Alice makes the first move.\n\nIn a move, a player must choose an index i (1 ≤ i ≤ n) that has not been chosen before, and change s_i to any other lowercase English letter c that c ≠ s_i.\n\nWhen all indices have been chosen, the game ends. \n\nThe goal of Alice is to make the final string lexicographically as small as possible, while the goal of Bob is to make the final string lexicographically as large as possible. Both of them are game experts, so they always play games optimally. Homer is not a game expert, so he wonders what the final string will be.\n\nA string a is lexicographically smaller than a string b if and only if one of the following holds: \n\n  * a is a prefix of b, but a ≠ b; \n  * in the first position where a and b differ, the string a has a letter that appears earlier in the alphabet than the corresponding letter in b. \n\nInput\n\nEach test contains multiple test cases. The first line contains t (1 ≤ t ≤ 1000) — the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 ≤ |s| ≤ 50) consisting of lowercase English letters.\n\nOutput\n\nFor each test case, print the final string in a single line.\n\nExample\n\nInput\n\n\n3\na\nbbbb\naz\n\n\nOutput\n\n\nb\nazaz\nby\n\nNote\n\nIn the first test case: Alice makes the first move and must change the only letter to a different one, so she changes it to 'b'.\n\nIn the second test case: Alice changes the first letter to 'a', then Bob changes the second letter to 'z', Alice changes the third letter to 'a' and then Bob changes the fourth letter to 'z'.\n\nIn the third test case: Alice changes the first letter to 'b', and then Bob changes the second letter to 'y'.", "testcase": ["3\na\ngdbb\naz", "3\nm\nbbbs\naz", "3\na\nbbbb\nab", "3\na\nbbbn\nhz", "3\ns\nmbbb\naz", "3\na\nbbbh\nlz", "3\ng\nbbbb\naz", "3\ni\nbbbb\noz", "3\nr\nblbb\naz", "3\nk\nbbbb\nao"], "output": ["\nb\nazaz\nby\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1485_A. Add and Divide", "description": "You have two positive integers a and b.\n\nYou can perform two kinds of operations:\n\n  * a = ⌊ a/b ⌋ (replace a with the integer part of the division between a and b) \n  * b=b+1 (increase b by 1) \n\n\n\nFind the minimum number of operations required to make a=0.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 100) — the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 ≤ a,b ≤ 10^9).\n\nOutput\n\nFor each test case, print a single integer: the minimum number of operations required to make a=0.\n\nExample\n\nInput\n\n\n6\n9 2\n1337 1\n1 1\n50000000 4\n991026972 997\n1234 5678\n\n\nOutput\n\n\n4\n9\n2\n12\n3\n1\n\nNote\n\nIn the first test case, one of the optimal solutions is:\n\n  1. Divide a by b. After this operation a = 4 and b = 2. \n  2. Divide a by b. After this operation a = 2 and b = 2. \n  3. Increase b. After this operation a = 2 and b = 3. \n  4. Divide a by b. After this operation a = 0 and b = 3. ", "testcase": ["6\n8 2\n1337 1\n0 1\n50000001 4\n991026972 997\n1233 5678", "6\n10 2\n1336 1\n0 1\n50000000 4\n991026972 996\n1234 5678", "6\n9 2\n1336 1\n0 0\n50000000 4\n991026972 998\n1234 5678", "6\n8 2\n1336 1\n1 1\n50000001 4\n991026972 997\n1234 5677", "6\n9 2\n1338 3\n0 1\n50000000 4\n991026972 997\n1234 5678", "6\n9 2\n1337 2\n1 1\n50000001 4\n991026971 998\n1234 5678", "6\n9 -1\n1337 1\n1 1\n50000000 5\n991026972 997\n1234 5678", "6\n9 3\n1337 1\n1 1\n50000000 3\n991026972 996\n1234 5679", "6\n9 2\n1337 1\n1 2\n50000000 5\n991026971 998\n1234 5678", "6\n9 2\n1337 1\n0 1\n49999999 5\n991026972 998\n1234 5678"], "output": ["\n4\n9\n2\n12\n3\n1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "148_A. Insomnia cure", "description": "«One dragon. Two dragon. Three dragon», — the princess was counting. She had trouble falling asleep, and she got bored of counting lambs when she was nine.\n\nHowever, just counting dragons was boring as well, so she entertained herself at best she could. Tonight she imagined that all dragons were here to steal her, and she was fighting them off. Every k-th dragon got punched in the face with a frying pan. Every l-th dragon got his tail shut into the balcony door. Every m-th dragon got his paws trampled with sharp heels. Finally, she threatened every n-th dragon to call her mom, and he withdrew in panic.\n\nHow many imaginary dragons suffered moral or physical damage tonight, if the princess counted a total of d dragons?\n\nInput\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 ≤ k, l, m, n ≤ 10, 1 ≤ d ≤ 105).\n\nOutput\n\nOutput the number of damaged dragons.\n\nExamples\n\nInput\n\n1\n2\n3\n4\n12\n\n\nOutput\n\n12\n\n\nInput\n\n2\n3\n4\n5\n24\n\n\nOutput\n\n17\n\nNote\n\nIn the first case every first dragon got punched with a frying pan. Some of the dragons suffered from other reasons as well, but the pan alone would be enough.\n\nIn the second case dragons 1, 7, 11, 13, 17, 19 and 23 escaped unharmed.", "testcase": ["1\n2\n4\n3\n12", "2\n3\n4\n5\n26", "2\n3\n3\n5\n25", "1\n2\n3\n3\n11", "1\n2\n3\n4\n12", "1\n1\n2\n4\n12", "1\n2\n3\n4\n14", "2\n4\n4\n4\n24", "1\n1\n4\n4\n12", "2\n3\n6\n5\n24"], "output": ["17\n", "12\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1490_C. Sum of Cubes", "description": "You are given a positive integer x. Check whether the number x is representable as the sum of the cubes of two positive integers.\n\nFormally, you need to check if there are two integers a and b (1 ≤ a, b) such that a^3+b^3=x.\n\nFor example, if x = 35, then the numbers a=2 and b=3 are suitable (2^3+3^3=8+27=35). If x=4, then no pair of numbers a and b is suitable.\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 100) — the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 ≤ x ≤ 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.\n\nOutput\n\nFor each test case, output on a separate line: \n\n  * \"YES\" if x is representable as the sum of the cubes of two positive integers. \n  * \"NO\" otherwise. \n\n\n\nYou can output \"YES\" and \"NO\" in any case (for example, the strings yEs, yes, Yes and YES will be recognized as positive).\n\nExample\n\nInput\n\n\n7\n1\n2\n4\n34\n35\n16\n703657519796\n\n\nOutput\n\n\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n\nNote\n\nThe number 1 is not representable as the sum of two cubes.\n\nThe number 2 is represented as 1^3+1^3.\n\nThe number 4 is not representable as the sum of two cubes.\n\nThe number 34 is not representable as the sum of two cubes.\n\nThe number 35 is represented as 2^3+3^3.\n\nThe number 16 is represented as 2^3+2^3.\n\nThe number 703657519796 is represented as 5779^3+7993^3.", "testcase": ["7\n1\n2\n4\n35\n34\n16\n703657519795", "7\n1\n1\n4\n35\n35\n16\n703657519797", "7\n1\n1\n3\n34\n35\n16\n703657519795", "7\n1\n2\n4\n34\n34\n16\n703657519798", "7\n1\n3\n4\n34\n37\n16\n703657519796", "7\n1\n2\n4\n33\n36\n15\n703657519796", "7\n0\n2\n4\n32\n35\n16\n703657519796", "7\n1\n1\n4\n35\n35\n15\n703657519796", "7\n0\n2\n4\n33\n35\n17\n703657519796", "7\n1\n3\n5\n35\n35\n16\n703657519796"], "output": ["\nNO\nYES\nNO\nNO\nYES\nYES\nYES\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1498_A. GCD Sum", "description": "The \\text{gcdSum} of a positive integer is the gcd of that integer with its sum of digits. Formally, \\text{gcdSum}(x) = gcd(x,  sum of digits of  x) for a positive integer x. gcd(a, b) denotes the greatest common divisor of a and b — the largest integer d such that both integers a and b are divisible by d.\n\nFor example: \\text{gcdSum}(762) = gcd(762, 7 + 6 + 2)=gcd(762,15) = 3.\n\nGiven an integer n, find the smallest integer x ≥ n such that \\text{gcdSum}(x) > 1.\n\nInput\n\nThe first line of input contains one integer t (1 ≤ t ≤ 10^4) — the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 ≤ n ≤ 10^{18}).\n\nAll test cases in one test are different.\n\nOutput\n\nOutput t lines, where the i-th line is a single integer containing the answer to the i-th test case.\n\nExample\n\nInput\n\n\n3\n11\n31\n75\n\n\nOutput\n\n\n12\n33\n75\n\nNote\n\nLet us explain the three test cases in the sample.\n\nTest case 1: n = 11: \n\n\\text{gcdSum}(11) = gcd(11, 1 + 1) = gcd(11,\\ 2) = 1.\n\n\\text{gcdSum}(12) = gcd(12, 1 + 2) = gcd(12,\\ 3) = 3.\n\nSo the smallest number ≥ 11 whose gcdSum > 1 is 12.\n\nTest case 2: n = 31: \n\n\\text{gcdSum}(31) = gcd(31, 3 + 1) = gcd(31,\\ 4) = 1.\n\n\\text{gcdSum}(32) = gcd(32, 3 + 2) = gcd(32,\\ 5) = 1.\n\n\\text{gcdSum}(33) = gcd(33, 3 + 3) = gcd(33,\\ 6) = 3.\n\nSo the smallest number ≥ 31 whose gcdSum > 1 is 33.\n\nTest case 3: \\ n = 75: \n\n\\text{gcdSum}(75) = gcd(75, 7 + 5) = gcd(75,\\ 12) = 3.\n\nThe \\text{gcdSum} of 75 is already > 1. Hence, it is the answer.", "testcase": ["3\n12\n30\n75", "3\n11\n31\n75", "3\n12\n30\n75", "3\n12\n30\n75", "3\n11\n29\n75", "3\n10\n30\n75", "3\n12\n31\n76", "3\n11\n32\n76", "3\n12\n32\n75", "3\n10\n32\n75"], "output": ["\n12\n33\n75\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "1506_G. Maximize the Remaining String", "description": "You are given a string s, consisting of lowercase Latin letters. While there is at least one character in the string s that is repeated at least twice, you perform the following operation: \n\n  * you choose the index i (1 ≤ i ≤ |s|) such that the character at position i occurs at least two times in the string s, and delete the character at position i, that is, replace s with s_1 s_2 … s_{i-1} s_{i+1} s_{i+2} … s_n. \n\n\n\nFor example, if s=\"codeforces\", then you can apply the following sequence of operations: \n\n  * i=6 ⇒ s=\"codefrces\"; \n  * i=1 ⇒ s=\"odefrces\"; \n  * i=7 ⇒ s=\"odefrcs\"; \n\n\n\nGiven a given string s, find the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique.\n\nA string a of length n is lexicographically less than a string b of length m, if: \n\n  * there is an index i (1 ≤ i ≤ min(n, m)) such that the first i-1 characters of the strings a and b are the same, and the i-th character of the string a is less than i-th character of string b; \n  * or the first min(n, m) characters in the strings a and b are the same and n < m. \n\n\n\nFor example, the string a=\"aezakmi\" is lexicographically less than the string b=\"aezus\".\n\nInput\n\nThe first line contains one integer t (1 ≤ t ≤ 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 ≤ |s| ≤ 2 ⋅ 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, output the lexicographically maximum string that can be obtained after applying a certain sequence of operations after which all characters in the string become unique.\n\nExample\n\nInput\n\n\n6\ncodeforces\naezakmi\nabacaba\nconvexhull\nswflldjgpaxs\nmyneeocktxpqjpz\n\n\nOutput\n\n\nodfrces\nezakmi\ncba\nconvexhul\nwfldjgpaxs\nmyneocktxqjpz", "testcase": ["6\ncodeforces\naezakqi\nabpcaba\nconvexhull\nswflldjgpaxs\nmyneeochtxpqjpz", "6\ncodeforces\naezakmi\naoacaba\nconvexhull\nsvflldjgpaxs\nmyneeockqxpqjpz", "6\ncodeforces\naezakmi\nabafaba\nconvexhull\nswflldjgtaxs\nmlneeocktxpqjpz", "6\nrodeforces\naezakmi\nabakaba\nconvexhull\nswflldjupaxs\nmyneeocktxpqjpz", "6\ncodeforces\naezakmi\nafacaba\nconvexwull\nswflldjgpaxs\nmyneeocktxpqjtz", "6\ncodefokces\naizakmi\nabucaba\nconvexhull\nswflldjgpaxs\nmyneeocktxpqjpz", "6\ncodeforces\naezukmi\nabacaba\nconvexhula\nswflldjgpaxs\nmyneeockkxpqjpz", "6\ncodeforces\naezakmi\nabacabm\nconvexhull\nszflldjgnaxs\nmyneeocktxpqjpz", "6\ncodeforces\naezakmi\nabacaba\ncwmvexhull\nswfllojgpaxs\nmyneeocktxpqjpz", "6\ncodeforces\naezakmi\nablcaba\noonvexhull\nswflldjgpaxy\nmyneeocktxpqjpz"], "output": ["\nodfrces\nezakmi\ncba\nconvexhul\nwfldjgpaxs\nmyneocktxqjpz\n"], "difficulty": 13, "time_limit": {"seconds": 2, "nanos": 500000000}}
{"name": "151_C. Win or Freeze", "description": "You can't possibly imagine how cold our friends are this winter in Nvodsk! Two of them play the following game to warm up: initially a piece of paper has an integer q. During a move a player should write any integer number that is a non-trivial divisor of the last written number. Then he should run this number of circles around the hotel. Let us remind you that a number's divisor is called non-trivial if it is different from one and from the divided number itself. \n\nThe first person who can't make a move wins as he continues to lie in his warm bed under three blankets while the other one keeps running. Determine which player wins considering that both players play optimally. If the first player wins, print any winning first move.\n\nInput\n\nThe first line contains the only integer q (1 ≤ q ≤ 1013).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.\n\nOutput\n\nIn the first line print the number of the winning player (1 or 2). If the first player wins then the second line should contain another integer — his first move (if the first player can't even make the first move, print 0). If there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n6\n\n\nOutput\n\n2\n\n\nInput\n\n30\n\n\nOutput\n\n1\n6\n\n\nInput\n\n1\n\n\nOutput\n\n1\n0\n\nNote\n\nNumber 6 has only two non-trivial divisors: 2 and 3. It is impossible to make a move after the numbers 2 and 3 are written, so both of them are winning, thus, number 6 is the losing number. A player can make a move and write number 6 after number 30; 6, as we know, is a losing number. Thus, this move will bring us the victory.", "testcase": ["5", "5", "5", "2", "7", "5", "0", "0", "29", "31"], "output": ["1\n0", "2", "1\n6"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1526_D. Kill Anton", "description": "After rejecting 10^{100} data structure problems, Errorgorn is very angry at Anton and decided to kill him.\n\nAnton's DNA can be represented as a string a which only contains the characters \"ANTON\" (there are only 4 distinct characters). \n\nErrorgorn can change Anton's DNA into string b which must be a permutation of a. However, Anton's body can defend against this attack. In 1 second, his body can swap 2 adjacent characters of his DNA to transform it back to a. Anton's body is smart and will use the minimum number of moves.\n\nTo maximize the chance of Anton dying, Errorgorn wants to change Anton's DNA the string that maximizes the time for Anton's body to revert his DNA. But since Errorgorn is busy making more data structure problems, he needs your help to find the best string B. Can you help him?\n\nInput\n\nThe first line of input contains a single integer t (1 ≤ t ≤ 100000) — the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 ≤ |a| ≤ 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.\n\nOutput\n\nFor each testcase, print a single string, b. If there are multiple answers, you can output any one of them. b must be a permutation of the string a.\n\nExample\n\nInput\n\n\n4\nANTON\nNAAN\nAAAAAA\nOAANTTON\n\n\nOutput\n\n\nNNOTA\nAANN\nAAAAAA\nTNNTAOOA\n\nNote\n\nFor the first testcase, it takes 7 seconds for Anton's body to transform NNOTA to ANTON: \n\nNNOTA → NNOAT → NNAOT → NANOT → NANTO → ANNTO → ANTNO → ANTON. \n\nNote that you cannot output strings such as AANTON, ANTONTRYGUB, AAAAA and anton as it is not a permutation of ANTON.\n\nFor the second testcase, it takes 2 seconds for Anton's body to transform AANN to NAAN. Note that other strings such as NNAA and ANNA will also be accepted.", "testcase": ["4\nANTON\nQAAN\nAAAAAA\nONANTTON", "4\nANTRN\nNAAN\nAAAAAA\nOEANTTON", "4\nANTOY\nNANN\nAAAAAA\nOAANTTON", "4\nANTON\nNAAJ\nAAAAAA\nOAANTTOB", "4\nLNTON\nNAAN\nATAAAA\nOAANTTON", "4\nAUTON\nNAAV\nAAAAAA\nOAANTTON", "4\nANTOK\nNAAN\nAAAOAA\nOAANTTON", "4\nANTTN\nNAAN\nAAAAAH\nOAANTTON", "4\nAITON\nNAAQ\nAAAAAA\nOAANTTON", "4\nANTBN\nRAAN\nAAAAAA\nOAANTTON"], "output": ["\nNNOTA\nAANN\nAAAAAA\nTNNTAOOA\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "1535_C. Unstable String", "description": "You are given a string s consisting of the characters 0, 1, and ?.\n\nLet's call a string unstable if it consists of the characters 0 and 1 and any two adjacent characters are different (i. e. it has the form 010101... or 101010...).\n\nLet's call a string beautiful if it consists of the characters 0, 1, and ?, and you can replace the characters ? to 0 or 1 (for each character, the choice is independent), so that the string becomes unstable.\n\nFor example, the strings 0??10, 0, and ??? are beautiful, and the strings 00 and ?1??1 are not.\n\nCalculate the number of beautiful contiguous substrings of the string s.\n\nInput\n\nThe first line contains a single integer t (1 ≤ t ≤ 10^4) — number of test cases.\n\nThe first and only line of each test case contains the string s (1 ≤ |s| ≤ 2 ⋅ 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 ⋅ 10^5.\n\nOutput\n\nFor each test case, output a single integer — the number of beautiful substrings of the string s.\n\nExample\n\nInput\n\n\n3\n0?10\n???\n?10??1100\n\n\nOutput\n\n\n8\n6\n25", "testcase": ["3\n0?10\n???\n1?00011??", "3\n0?10\n???\n11?000??1", "3\n?010\n???\n?10??1100", "3\n?100\n???\n?10??1100", "3\n00?1\n???\n?10??1100", "3\n1?00\n???\n?011??001", "3\n001?\n???\n??0110?10", "3\n0?10\n???\n1???00011", "3\n00?1\n???\n?10??1100", "3\n100?\n???\n?00101??1"], "output": ["\n8\n6\n25\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "161_C. Abracadabra", "description": "Polycarpus analyzes a string called abracadabra. This string is constructed using the following algorithm: \n\n  * On the first step the string consists of a single character \"a\". \n  * On the k-th step Polycarpus concatenates two copies of the string obtained on the (k - 1)-th step, while inserting the k-th character of the alphabet between them. Polycarpus uses the alphabet that consists of lowercase Latin letters and digits (a total of 36 characters). The alphabet characters are numbered like this: the 1-st character is \"a\", the 2-nd — \"b\", ..., the 26-th — \"z\", the 27-th — \"0\", the 28-th — \"1\", ..., the 36-th — \"9\". \n\n\n\nLet's have a closer look at the algorithm. On the second step Polycarpus will concatenate two strings \"a\" and insert the character \"b\" between them, resulting in \"aba\" string. The third step will transform it into \"abacaba\", and the fourth one - into \"abacabadabacaba\". Thus, the string constructed on the k-th step will consist of 2k - 1 characters. \n\nPolycarpus wrote down the string he got after 30 steps of the given algorithm and chose two non-empty substrings of it. Your task is to find the length of the longest common substring of the two substrings selected by Polycarpus.\n\nA substring s[i... j] (1 ≤ i ≤ j ≤ |s|) of string s = s1s2... s|s| is a string sisi + 1... sj. For example, substring s[2...4] of string s = \"abacaba\" equals \"bac\". The string is its own substring.\n\nThe longest common substring of two strings s and t is the longest string that is a substring of both s and t. For example, the longest common substring of \"contest\" and \"systemtesting\" is string \"test\". There can be several common substrings of maximum length.\n\nInput\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 ≤ li ≤ ri ≤ 109, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.\n\nOutput\n\nPrint a single number — the length of the longest common substring of the given strings. If there are no common substrings, print 0.\n\nExamples\n\nInput\n\n3 6 1 4\n\n\nOutput\n\n2\n\n\nInput\n\n1 1 4 4\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample the first substring is \"acab\", the second one is \"abac\". These two substrings have two longest common substrings \"ac\" and \"ab\", but we are only interested in their length — 2.\n\nIn the second sample the first substring is \"a\", the second one is \"c\". These two substrings don't have any common characters, so the length of their longest common substring is 0.", "testcase": ["1 1 4 4", "3 6 -1 4", "3 5 0 4", "1 0 5 4", "3 7 1 3", "1 2 4 3", "1 1 4 4", "1 0 3 4", "3 7 2 4", "3 5 1 3"], "output": ["2\n", "0\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "166_A. Rank List", "description": "Another programming contest is over. You got hold of the contest's final results table. The table has the following data. For each team we are shown two numbers: the number of problems and the total penalty time. However, for no team we are shown its final place.\n\nYou know the rules of comparing the results of two given teams very well. Let's say that team a solved pa problems with total penalty time ta and team b solved pb problems with total penalty time tb. Team a gets a higher place than team b in the end, if it either solved more problems on the contest, or solved the same number of problems but in less total time. In other words, team a gets a higher place than team b in the final results' table if either pa > pb, or pa = pb and ta < tb. \n\nIt is considered that the teams that solve the same number of problems with the same penalty time share all corresponding places. More formally, let's say there is a group of x teams that solved the same number of problems with the same penalty time. Let's also say that y teams performed better than the teams from this group. In this case all teams from the group share places y + 1, y + 2, ..., y + x. The teams that performed worse than the teams from this group, get their places in the results table starting from the y + x + 1-th place.\n\nYour task is to count what number of teams from the given list shared the k-th place. \n\nInput\n\nThe first line contains two integers n and k (1 ≤ k ≤ n ≤ 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 ≤ pi, ti ≤ 50) — the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces. \n\nOutput\n\nIn the only line print the sought number of teams that got the k-th place in the final results' table.\n\nExamples\n\nInput\n\n7 2\n4 10\n4 10\n4 10\n3 20\n2 1\n2 1\n1 10\n\n\nOutput\n\n3\n\n\nInput\n\n5 4\n3 1\n3 1\n5 3\n3 1\n3 1\n\n\nOutput\n\n4\n\nNote\n\nThe final results' table for the first sample is: \n\n  * 1-3 places — 4 solved problems, the penalty time equals 10 \n  * 4 place — 3 solved problems, the penalty time equals 20 \n  * 5-6 places — 2 solved problems, the penalty time equals 1 \n  * 7 place — 1 solved problem, the penalty time equals 10 \n\n\n\nThe table shows that the second place is shared by the teams that solved 4 problems with penalty time 10. There are 3 such teams.\n\nThe final table for the second sample is:\n\n  * 1 place — 5 solved problems, the penalty time equals 3 \n  * 2-5 places — 3 solved problems, the penalty time equals 1 \n\n\n\nThe table shows that the fourth place is shared by the teams that solved 3 problems with penalty time 1. There are 4 such teams.", "testcase": ["7 3\n5 10\n4 10\n3 11\n3 20\n2 1\n1 1\n1 10", "7 2\n4 10\n4 10\n4 10\n3 22\n1 1\n1 1\n1 11", "5 4\n3 0\n3 1\n4 2\n4 1\n3 1", "5 4\n3 1\n3 1\n5 3\n4 1\n3 0", "7 2\n4 10\n4 10\n6 11\n4 20\n2 0\n2 1\n1 10", "5 4\n4 0\n3 1\n4 3\n3 1\n4 1", "7 2\n2 10\n4 10\n4 10\n3 19\n3 1\n2 0\n1 10", "5 3\n2 1\n3 2\n5 3\n3 1\n4 1", "7 2\n3 10\n5 10\n4 9\n3 20\n4 1\n2 1\n1 10", "7 2\n5 9\n4 10\n4 10\n3 20\n2 1\n2 1\n1 9"], "output": ["4\n", "3\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "168_A. Wizards and Demonstration", "description": "Some country is populated by wizards. They want to organize a demonstration.\n\nThere are n people living in the city, x of them are the wizards who will surely go to the demonstration. Other city people (n - x people) do not support the wizards and aren't going to go to the demonstration. We know that the city administration will react only to the demonstration involving at least y percent of the city people. Having considered the matter, the wizards decided to create clone puppets which can substitute the city people on the demonstration. \n\nSo all in all, the demonstration will involve only the wizards and their puppets. The city administration cannot tell the difference between a puppet and a person, so, as they calculate the percentage, the administration will consider the city to be consisting of only n people and not containing any clone puppets. \n\nHelp the wizards and find the minimum number of clones to create to that the demonstration had no less than y percent of the city people.\n\nInput\n\nThe first line contains three space-separated integers, n, x, y (1 ≤ n, x, y ≤ 104, x ≤ n) — the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).\n\nOutput\n\nPrint a single integer — the answer to the problem, the minimum number of clones to create, so that the demonstration involved no less than y percent of n (the real total city population). \n\nExamples\n\nInput\n\n10 1 14\n\n\nOutput\n\n1\n\n\nInput\n\n20 10 50\n\n\nOutput\n\n0\n\n\nInput\n\n1000 352 146\n\n\nOutput\n\n1108\n\nNote\n\nIn the first sample it is necessary that at least 14% of 10 people came to the demonstration. As the number of people should be integer, then at least two people should come. There is only one wizard living in the city and he is going to come. That isn't enough, so he needs to create one clone. \n\nIn the second sample 10 people should come to the demonstration. The city has 10 wizards. They will all come to the demonstration, so nobody has to create any clones.", "testcase": ["10 1 15", "10 0 14", "20 10 51", "1000 352 145", "1000 352 145", "20 11 50", "20 11 50", "1000 353 146", "10 1 13", "1000 351 146"], "output": ["1108\n", "1\n", "0\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "171_D. Broken checker", "description": "\"This problem is rubbish! There is not statement, and there are only 5 test cases. The problemsetter took liberties with this problem!\" — people complained in the comments to one round on Codeforces. And even more... No, wait, the checker for the problem was alright, that's a mercy.\n\nInput\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.\n\nOutput\n\nThe only line of the output contains an integer between 1 and 3, inclusive.\n\nExamples\n\nNote\n\nThis problem has no samples, since there so few test cases.", "testcase": [], "output": [], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "195_A. Let's Watch Football", "description": "Valeric and Valerko missed the last Euro football game, so they decided to watch the game's key moments on the Net. They want to start watching as soon as possible but the connection speed is too low. If they turn on the video right now, it will \"hang up\" as the size of data to watch per second will be more than the size of downloaded data per second.\n\nThe guys want to watch the whole video without any pauses, so they have to wait some integer number of seconds for a part of the video to download. After this number of seconds passes, they can start watching. Waiting for the whole video to download isn't necessary as the video can download after the guys started to watch.\n\nLet's suppose that video's length is c seconds and Valeric and Valerko wait t seconds before the watching. Then for any moment of time t0, t ≤ t0 ≤ c + t, the following condition must fulfill: the size of data received in t0 seconds is not less than the size of data needed to watch t0 - t seconds of the video.\n\nOf course, the guys want to wait as little as possible, so your task is to find the minimum integer number of seconds to wait before turning the video on. The guys must watch the video without pauses.\n\nInput\n\nThe first line contains three space-separated integers a, b and c (1 ≤ a, b, c ≤ 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.\n\nOutput\n\nPrint a single number — the minimum integer number of seconds that Valeric and Valerko must wait to watch football without pauses.\n\nExamples\n\nInput\n\n4 1 1\n\n\nOutput\n\n3\n\n\nInput\n\n10 3 2\n\n\nOutput\n\n5\n\n\nInput\n\n13 12 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample video's length is 1 second and it is necessary 4 units of data for watching 1 second of video, so guys should download 4 · 1 = 4 units of data to watch the whole video. The most optimal way is to wait 3 seconds till 3 units of data will be downloaded and then start watching. While guys will be watching video 1 second, one unit of data will be downloaded and Valerik and Valerko will have 4 units of data by the end of watching. Also every moment till the end of video guys will have more data then necessary for watching.\n\nIn the second sample guys need 2 · 10 = 20 units of data, so they have to wait 5 seconds and after that they will have 20 units before the second second ends. However, if guys wait 4 seconds, they will be able to watch first second of video without pauses, but they will download 18 units of data by the end of second second and it is less then necessary.", "testcase": ["13 12 2", "4 1 0", "10 4 2", "10 3 1", "13 12 2", "13 12 2", "4 1 0", "10 2 2", "10 2 2", "10 4 2"], "output": ["5\n", "1\n", "3\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "199_C. About Bacteria", "description": "Qwerty the Ranger took up a government job and arrived on planet Mars. He should stay in the secret lab and conduct some experiments on bacteria that have funny and abnormal properties. The job isn't difficult, but the salary is high.\n\nAt the beginning of the first experiment there is a single bacterium in the test tube. Every second each bacterium in the test tube divides itself into k bacteria. After that some abnormal effects create b more bacteria in the test tube. Thus, if at the beginning of some second the test tube had x bacteria, then at the end of the second it will have kx + b bacteria.\n\nThe experiment showed that after n seconds there were exactly z bacteria and the experiment ended at this point.\n\nFor the second experiment Qwerty is going to sterilize the test tube and put there t bacteria. He hasn't started the experiment yet but he already wonders, how many seconds he will need to grow at least z bacteria. The ranger thinks that the bacteria will divide by the same rule as in the first experiment. \n\nHelp Qwerty and find the minimum number of seconds needed to get a tube with at least z bacteria in the second experiment.\n\nInput\n\nThe first line contains four space-separated integers k, b, n and t (1 ≤ k, b, n, t ≤ 106) — the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.\n\nOutput\n\nPrint a single number — the minimum number of seconds Qwerty needs to grow at least z bacteria in the tube.\n\nExamples\n\nInput\n\n3 1 3 5\n\n\nOutput\n\n2\n\nInput\n\n1 4 4 7\n\n\nOutput\n\n3\n\nInput\n\n2 2 4 100\n\n\nOutput\n\n0", "testcase": ["1 3 5 7", "2 2 3 99", "2 2 3 99", "2 2 4 100", "1 4 4 7", "3 1 4 6", "2 2 3 101", "2 2 5 99", "3 0 3 6", "1 4 4 7"], "output": ["0\n", "2\n", "3\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "204_A. Little Elephant and Interval", "description": "The Little Elephant very much loves sums on intervals.\n\nThis time he has a pair of integers l and r (l ≤ r). The Little Elephant has to find the number of such integers x (l ≤ x ≤ r), that the first digit of integer x equals the last one (in decimal notation). For example, such numbers as 101, 477474 or 9 will be included in the answer and 47, 253 or 1020 will not.\n\nHelp him and count the number of described numbers x for a given pair l and r.\n\nInput\n\nThe single line contains a pair of integers l and r (1 ≤ l ≤ r ≤ 1018) — the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.\n\nOutput\n\nOn a single line print a single integer — the answer to the problem.\n\nExamples\n\nInput\n\n2 47\n\n\nOutput\n\n12\n\n\nInput\n\n47 1024\n\n\nOutput\n\n98\n\nNote\n\nIn the first sample the answer includes integers 2, 3, 4, 5, 6, 7, 8, 9, 11, 22, 33, 44. ", "testcase": ["47 1025", "2 48", "47 1025", "47 1023", "47 1025", "2 48", "47 1025", "47 1025", "2 46", "2 48"], "output": ["98\n", "12\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "209_B. Pixels", "description": "Flatland is inhabited by pixels of three colors: red, green and blue. We know that if two pixels of different colors meet in a violent fight, only one of them survives the fight (that is, the total number of pixels decreases by one). Besides, if pixels of colors x and y (x ≠ y) meet in a violent fight, then the pixel that survives the fight immediately changes its color to z (z ≠ x; z ≠ y). Pixels of the same color are friends, so they don't fight.\n\nThe King of Flatland knows that his land will be peaceful and prosperous when the pixels are of the same color. For each of the three colors you know the number of pixels of this color that inhabit Flatland. Help the king and determine whether fights can bring peace and prosperity to the country and if it is possible, find the minimum number of fights needed to make the land peaceful and prosperous. \n\nInput\n\nThe first line contains three space-separated integers a, b and c (0 ≤ a, b, c ≤ 231; a + b + c > 0) — the number of red, green and blue pixels, correspondingly.\n\nOutput\n\nPrint a single number — the minimum number of pixel fights before the country becomes peaceful and prosperous. If making the country peaceful and prosperous is impossible, print -1.\n\nExamples\n\nInput\n\n1 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n3 1 0\n\n\nOutput\n\n3\n\nNote\n\nIn the first test sample the country needs only one fight to achieve peace and prosperity. Besides, it can be any fight whatsoever. For example, let's assume that the green and the blue pixels fight, then the surviving pixel will be red. As a result, after the fight there are two red pixels. There won't be other pixels.\n\nIn the second sample the following sequence of fights is possible: red and blue, green and red, red and blue. As a result, after all fights there is one green pixel left.", "testcase": ["1 0 1", "3 2 0", "1 2 1", "1 2 1", "3 2 0", "3 1 -1", "1 0 1", "3 1 -1", "1 0 1", "3 0 0"], "output": ["                                                               1\n", "                                                               3\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "221_A. Little Elephant and Function", "description": "The Little Elephant enjoys recursive functions.\n\nThis time he enjoys the sorting function. Let a is a permutation of an integers from 1 to n, inclusive, and ai denotes the i-th element of the permutation. The Little Elephant's recursive function f(x), that sorts the first x permutation's elements, works as follows:\n\n  * If x = 1, exit the function. \n  * Otherwise, call f(x - 1), and then make swap(ax - 1, ax) (swap the x-th and (x - 1)-th elements of a). \n\n\n\nThe Little Elephant's teacher believes that this function does not work correctly. But that-be do not get an F, the Little Elephant wants to show the performance of its function. Help him, find a permutation of numbers from 1 to n, such that after performing the Little Elephant's function (that is call f(n)), the permutation will be sorted in ascending order.\n\nInput\n\nA single line contains integer n (1 ≤ n ≤ 1000) — the size of permutation.\n\nOutput\n\nIn a single line print n distinct integers from 1 to n — the required permutation. Numbers in a line should be separated by spaces.\n\nIt is guaranteed that the answer exists.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1 \n\nInput\n\n2\n\n\nOutput\n\n2 1 ", "testcase": ["2", "2", "1", "0", "1", "3", "1", "2", "1", "0"], "output": ["1\n", "2 1\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "221_C. Little Elephant and Problem", "description": "The Little Elephant has got a problem — somebody has been touching his sorted by non-decreasing array a of length n and possibly swapped some elements of the array.\n\nThe Little Elephant doesn't want to call the police until he understands if he could have accidentally changed the array himself. He thinks that he could have accidentally changed array a, only if array a can be sorted in no more than one operation of swapping elements (not necessarily adjacent). That is, the Little Elephant could have accidentally swapped some two elements.\n\nHelp the Little Elephant, determine if he could have accidentally changed the array a, sorted by non-decreasing, himself.\n\nInput\n\nThe first line contains a single integer n (2 ≤ n ≤ 105) — the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, — array a.\n\nNote that the elements of the array are not necessarily distinct numbers.\n\nOutput\n\nIn a single line print \"YES\" (without the quotes) if the Little Elephant could have accidentally changed the array himself, and \"NO\" (without the quotes) otherwise.\n\nExamples\n\nInput\n\n2\n1 2\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n3 2 1\n\n\nOutput\n\nYES\n\n\nInput\n\n4\n4 3 2 1\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample the array has already been sorted, so to sort it, we need 0 swap operations, that is not more than 1. Thus, the answer is \"YES\".\n\nIn the second sample we can sort the array if we swap elements 1 and 3, so we need 1 swap operation to sort the array. Thus, the answer is \"YES\".\n\nIn the third sample we can't sort the array in more than one swap operation, so the answer is \"NO\".", "testcase": ["2\n1 3", "2\n1 3", "3\n2 2 0", "2\n1 1", "4\n5 4 2 1", "3\n3 1 0", "3\n3 2 1", "3\n4 2 0", "4\n4 3 3 0", "4\n2 3 2 1"], "output": ["YES", "NO", "YES"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "223_C. Partial Sums", "description": "You've got an array a, consisting of n integers. The array elements are indexed from 1 to n. Let's determine a two step operation like that:\n\n  1. First we build by the array a an array s of partial sums, consisting of n elements. Element number i (1 ≤ i ≤ n) of array s equals <image>. The operation x mod y means that we take the remainder of the division of number x by number y. \n  2. Then we write the contents of the array s to the array a. Element number i (1 ≤ i ≤ n) of the array s becomes the i-th element of the array a (ai = si). \n\n\n\nYou task is to find array a after exactly k described operations are applied.\n\nInput\n\nThe first line contains two space-separated integers n and k (1 ≤ n ≤ 2000, 0 ≤ k ≤ 109). The next line contains n space-separated integers a1, a2, ..., an — elements of the array a (0 ≤ ai ≤ 109).\n\nOutput\n\nPrint n integers — elements of the array a after the operations are applied to it. Print the elements in the order of increasing of their indexes in the array a. Separate the printed numbers by spaces.\n\nExamples\n\nInput\n\n3 1\n1 2 3\n\n\nOutput\n\n1 3 6\n\n\nInput\n\n5 0\n3 14 15 92 6\n\n\nOutput\n\n3 14 15 92 6", "testcase": ["5 0\n4 14 15 92 6", "3 2\n2 2 3", "5 -1\n2 14 14 92 6", "5 0\n3 13 16 91 6", "3 1\n2 1 3", "3 1\n-1 2 3", "3 0\n0 2 3", "3 1\n0 2 2", "3 1\n1 2 3", "3 1\n1 4 3"], "output": ["3 14 15 92 6 ", "1 3 6 "], "difficulty": 9, "time_limit": {"seconds": 4, "nanos": 0}}
{"name": "230_A. Dragons", "description": "Kirito is stuck on a level of the MMORPG he is playing now. To move on in the game, he's got to defeat all n dragons that live on this level. Kirito and the dragons have strength, which is represented by an integer. In the duel between two opponents the duel's outcome is determined by their strength. Initially, Kirito's strength equals s.\n\nIf Kirito starts duelling with the i-th (1 ≤ i ≤ n) dragon and Kirito's strength is not greater than the dragon's strength xi, then Kirito loses the duel and dies. But if Kirito's strength is greater than the dragon's strength, then he defeats the dragon and gets a bonus strength increase by yi.\n\nKirito can fight the dragons in any order. Determine whether he can move on to the next level of the game, that is, defeat all dragons without a single loss.\n\nInput\n\nThe first line contains two space-separated integers s and n (1 ≤ s ≤ 104, 1 ≤ n ≤ 103). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 ≤ xi ≤ 104, 0 ≤ yi ≤ 104) — the i-th dragon's strength and the bonus for defeating it.\n\nOutput\n\nOn a single line print \"YES\" (without the quotes), if Kirito can move on to the next level and print \"NO\" (without the quotes), if he can't.\n\nExamples\n\nInput\n\n2 2\n1 99\n100 0\n\n\nOutput\n\nYES\n\n\nInput\n\n10 1\n100 100\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample Kirito's strength initially equals 2. As the first dragon's strength is less than 2, Kirito can fight it and defeat it. After that he gets the bonus and his strength increases to 2 + 99 = 101. Now he can defeat the second dragon and move on to the next level.\n\nIn the second sample Kirito's strength is too small to defeat the only dragon and win.", "testcase": ["2 1\n1 98\n100 0", "10 3\n100 100", "10 3\n100 100", "10 1\n100 100", "2 2\n0 99\n100 1", "10 0\n101 100", "2 2\n1 99\n100 0", "10 0\n101 100", "10 2\n101 100", "10 0\n101 100"], "output": ["YES\n", "NO\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "235_A. LCM Challenge", "description": "Some days ago, I learned the concept of LCM (least common multiple). I've played with it for several times and I want to make a big number with it.\n\nBut I also don't want to use many numbers, so I'll choose three positive integers (they don't have to be distinct) which are not greater than n. Can you help me to find the maximum possible least common multiple of these three integers?\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 106) — the n mentioned in the statement.\n\nOutput\n\nPrint a single integer — the maximum possible LCM of three not necessarily distinct positive integers that are not greater than n.\n\nExamples\n\nInput\n\n9\n\n\nOutput\n\n504\n\n\nInput\n\n7\n\n\nOutput\n\n210\n\nNote\n\nThe least common multiple of some positive integers is the least positive integer which is multiple for each of them.\n\nThe result may become very large, 32-bit integer won't be enough. So using 64-bit integers is recommended.\n\nFor the last example, we can chose numbers 7, 6, 5 and the LCM of them is 7·6·5 = 210. It is the maximum value we can get.", "testcase": ["8", "8", "8", "10", "10", "10", "8", "8", "8", "6"], "output": ["210\n", "504\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "239_A. Two Bags of Potatoes", "description": "Valera had two bags of potatoes, the first of these bags contains x (x ≥ 1) potatoes, and the second — y (y ≥ 1) potatoes. Valera — very scattered boy, so the first bag of potatoes (it contains x potatoes) Valera lost. Valera remembers that the total amount of potatoes (x + y) in the two bags, firstly, was not gerater than n, and, secondly, was divisible by k.\n\nHelp Valera to determine how many potatoes could be in the first bag. Print all such possible numbers in ascending order.\n\nInput\n\nThe first line of input contains three integers y, k, n (1 ≤ y, k, n ≤ 109; <image> ≤ 105).\n\nOutput\n\nPrint the list of whitespace-separated integers — all possible values of x in ascending order. You should print each possible value of x exactly once.\n\nIf there are no such values of x print a single integer -1.\n\nExamples\n\nInput\n\n10 1 10\n\n\nOutput\n\n-1\n\n\nInput\n\n10 6 40\n\n\nOutput\n\n2 8 14 20 26 ", "testcase": ["10 1 9", "10 5 40", "10 1 11", "10 1 11", "10 6 39", "10 1 9", "10 6 39", "10 7 40", "10 1 9", "10 6 41"], "output": ["2 8 14 20 26\n", "-1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "255_B. Code Parsing", "description": "Little Vitaly loves different algorithms. Today he has invented a new algorithm just for you. Vitaly's algorithm works with string s, consisting of characters \"x\" and \"y\", and uses two following operations at runtime:\n\n  1. Find two consecutive characters in the string, such that the first of them equals \"y\", and the second one equals \"x\" and swap them. If there are several suitable pairs of characters, we choose the pair of characters that is located closer to the beginning of the string. \n  2. Find in the string two consecutive characters, such that the first of them equals \"x\" and the second one equals \"y\". Remove these characters from the string. If there are several suitable pairs of characters, we choose the pair of characters that is located closer to the beginning of the string. \n\n\n\nThe input for the new algorithm is string s, and the algorithm works as follows:\n\n  1. If you can apply at least one of the described operations to the string, go to step 2 of the algorithm. Otherwise, stop executing the algorithm and print the current string. \n  2. If you can apply operation 1, then apply it. Otherwise, apply operation 2. After you apply the operation, go to step 1 of the algorithm. \n\n\n\nNow Vitaly wonders, what is going to be printed as the result of the algorithm's work, if the input receives string s.\n\nInput\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.\n\nOutput\n\nIn the only line print the string that is printed as the result of the algorithm's work, if the input of the algorithm input receives string s.\n\nExamples\n\nInput\n\nx\n\n\nOutput\n\nx\n\n\nInput\n\nyxyxy\n\n\nOutput\n\ny\n\n\nInput\n\nxxxxxy\n\n\nOutput\n\nxxxx\n\nNote\n\nIn the first test the algorithm will end after the first step of the algorithm, as it is impossible to apply any operation. Thus, the string won't change.\n\nIn the second test the transformation will be like this:\n\n  1. string \"yxyxy\" transforms into string \"xyyxy\"; \n  2. string \"xyyxy\" transforms into string \"xyxyy\"; \n  3. string \"xyxyy\" transforms into string \"xxyyy\"; \n  4. string \"xxyyy\" transforms into string \"xyy\"; \n  5. string \"xyy\" transforms into string \"y\". \n\n\n\nAs a result, we've got string \"y\". \n\nIn the third test case only one transformation will take place: string \"xxxxxy\" transforms into string \"xxxx\". Thus, the answer will be string \"xxxx\".", "testcase": ["xxyxy", "xxixxy", "h", "yxyxv", "yfyxy", "xxxxxg", "xxxxsy", "v", "b", "xxxxey"], "output": ["x", "y", "xxxx"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "275_A. Lights Out", "description": "Lenny is playing a game on a 3 × 3 grid of lights. In the beginning of the game all lights are switched on. Pressing any of the lights will toggle it and all side-adjacent lights. The goal of the game is to switch all the lights off. We consider the toggling as follows: if the light was switched on then it will be switched off, if it was switched off then it will be switched on.\n\nLenny has spent some time playing with the grid and by now he has pressed each light a certain number of times. Given the number of times each light is pressed, you have to print the current state of each light.\n\nInput\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.\n\nOutput\n\nPrint three lines, each containing three characters. The j-th character of the i-th line is \"1\" if and only if the corresponding light is switched on, otherwise it's \"0\".\n\nExamples\n\nInput\n\n1 0 0\n0 0 0\n0 0 1\n\n\nOutput\n\n001\n010\n100\n\n\nInput\n\n1 0 1\n8 8 8\n2 0 3\n\n\nOutput\n\n010\n011\n100", "testcase": ["1 1 0\n8 9 8\n2 0 3", "1 0 1\n8 9 8\n2 0 3", "1 0 1\n8 8 8\n2 1 3", "1 0 0\n0 -1 1\n0 1 1", "1 0 0\n1 1 0\n0 0 0", "1 0 0\n0 2 0\n0 0 0", "1 0 0\n0 0 0\n1 0 1", "1 0 0\n-1 1 0\n0 1 1", "1 0 0\n1 1 0\n0 1 1", "1 -1 1\n8 9 8\n1 0 3"], "output": ["001\n010\n100\n", "010\n011\n100\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "285_D. Permutation Sum", "description": "Permutation p is an ordered set of integers p1, p2, ..., pn, consisting of n distinct positive integers, each of them doesn't exceed n. We'll denote the i-th element of permutation p as pi. We'll call number n the size or the length of permutation p1, p2, ..., pn.\n\nPetya decided to introduce the sum operation on the set of permutations of length n. Let's assume that we are given two permutations of length n: a1, a2, ..., an and b1, b2, ..., bn. Petya calls the sum of permutations a and b such permutation c of length n, where ci = ((ai - 1 + bi - 1) mod n) + 1 (1 ≤ i ≤ n).\n\nOperation <image> means taking the remainder after dividing number x by number y.\n\nObviously, not for all permutations a and b exists permutation c that is sum of a and b. That's why Petya got sad and asked you to do the following: given n, count the number of such pairs of permutations a and b of length n, that exists permutation c that is sum of a and b. The pair of permutations x, y (x ≠ y) and the pair of permutations y, x are considered distinct pairs.\n\nAs the answer can be rather large, print the remainder after dividing it by 1000000007 (109 + 7).\n\nInput\n\nThe single line contains integer n (1 ≤ n ≤ 16).\n\nOutput\n\nIn the single line print a single non-negative integer — the number of such pairs of permutations a and b, that exists permutation c that is sum of a and b, modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n18\n\n\nInput\n\n5\n\n\nOutput\n\n1800", "testcase": ["2", "4", "6", "4", "2", "2", "4", "4", "6", "4"], "output": ["18\n", "1800\n"], "difficulty": 10, "time_limit": {"seconds": 3, "nanos": 0}}
{"name": "287_B. Pipeline", "description": "Vova, the Ultimate Thule new shaman, wants to build a pipeline. As there are exactly n houses in Ultimate Thule, Vova wants the city to have exactly n pipes, each such pipe should be connected to the water supply. A pipe can be connected to the water supply if there's water flowing out of it. Initially Vova has only one pipe with flowing water. Besides, Vova has several splitters.\n\nA splitter is a construction that consists of one input (it can be connected to a water pipe) and x output pipes. When a splitter is connected to a water pipe, water flows from each output pipe. You can assume that the output pipes are ordinary pipes. For example, you can connect water supply to such pipe if there's water flowing out from it. At most one splitter can be connected to any water pipe.\n\n<image> The figure shows a 4-output splitter\n\nVova has one splitter of each kind: with 2, 3, 4, ..., k outputs. Help Vova use the minimum number of splitters to build the required pipeline or otherwise state that it's impossible.\n\nVova needs the pipeline to have exactly n pipes with flowing out water. Note that some of those pipes can be the output pipes of the splitters.\n\nInput\n\nThe first line contains two space-separated integers n and k (1 ≤ n ≤ 1018, 2 ≤ k ≤ 109).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.\n\nOutput\n\nPrint a single integer — the minimum number of splitters needed to build the pipeline. If it is impossible to build a pipeline with the given splitters, print -1.\n\nExamples\n\nInput\n\n4 3\n\n\nOutput\n\n2\n\n\nInput\n\n5 5\n\n\nOutput\n\n1\n\n\nInput\n\n8 4\n\n\nOutput\n\n-1", "testcase": ["4 4", "4 4", "5 6", "5 4", "4 2", "8 5", "8 3", "5 6", "8 5", "4 2"], "output": ["2\n", "-1\n", "1\n"], "difficulty": 8, "time_limit": {"seconds": 0, "nanos": 400000000}}
{"name": "306_C. White, Black and White Again", "description": "Polycarpus is sure that his life fits the description: \"first there is a white stripe, then a black one, then a white one again\". So, Polycarpus is sure that this rule is going to fulfill during the next n days. Polycarpus knows that he is in for w good events and b not-so-good events. At least one event is going to take place during each day. As each day is unequivocally characterizes as a part of a white or a black stripe, then each day is going to have events of the same type only (ether good or not-so-good).\n\nWhat is the number of distinct ways this scenario can develop over the next n days if Polycarpus is in for a white stripe (a stripe that has good events only, the stripe's length is at least 1 day), the a black stripe (a stripe that has not-so-good events only, the stripe's length is at least 1 day) and a white stripe again (a stripe that has good events only, the stripe's length is at least 1 day). Each of n days will belong to one of the three stripes only.\n\nNote that even the events of the same type are distinct from each other. Even if some events occur on the same day, they go in some order (there are no simultaneous events).\n\nWrite a code that prints the number of possible configurations to sort the events into days. See the samples for clarifications on which scenarios should be considered distinct. Print the answer modulo 1000000009 (109 + 9).\n\nInput\n\nThe single line of the input contains integers n, w and b (3 ≤ n ≤ 4000, 2 ≤ w ≤ 4000, 1 ≤ b ≤ 4000) — the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b ≥ n.\n\nOutput\n\nPrint the required number of ways modulo 1000000009 (109 + 9).\n\nExamples\n\nInput\n\n3 2 1\n\n\nOutput\n\n2\n\n\nInput\n\n4 2 2\n\n\nOutput\n\n4\n\n\nInput\n\n3 2 2\n\n\nOutput\n\n4\n\nNote\n\nWe'll represent the good events by numbers starting from 1 and the not-so-good events — by letters starting from 'a'. Vertical lines separate days.\n\nIn the first sample the possible ways are: \"1|a|2\" and \"2|a|1\". In the second sample the possible ways are: \"1|a|b|2\", \"2|a|b|1\", \"1|b|a|2\" and \"2|b|a|1\". In the third sample the possible ways are: \"1|ab|2\", \"2|ab|1\", \"1|ba|2\" and \"2|ba|1\".", "testcase": ["3 1 2", "3 3 1", "3 1 2", "3 1 2", "4 3 2", "3 2 2", "4 3 2", "4 3 2", "3 3 2", "4 1 2"], "output": ["2\n", "4\n", "4\n"], "difficulty": 9, "time_limit": {"seconds": 3, "nanos": 0}}
{"name": "32_D. Constellation", "description": "A star map in Berland is a checked field n × m squares. In each square there is or there is not a star. The favourite constellation of all Berland's astronomers is the constellation of the Cross. This constellation can be formed by any 5 stars so, that for some integer x (radius of the constellation) the following is true: \n\n  * the 2nd is on the same vertical line as the 1st, but x squares up \n  * the 3rd is on the same vertical line as the 1st, but x squares down \n  * the 4th is on the same horizontal line as the 1st, but x squares left \n  * the 5th is on the same horizontal line as the 1st, but x squares right \n\n\n\nSuch constellations can be very numerous, that's why they are numbered with integers from 1 on the following principle: when two constellations are compared, the one with a smaller radius gets a smaller index; if their radii are equal — the one, whose central star if higher than the central star of the other one; if their central stars are at the same level — the one, whose central star is to the left of the central star of the other one.\n\nYour task is to find the constellation with index k by the given Berland's star map.\n\nInput\n\nThe first line contains three integers n, m and k (1 ≤ n, m ≤ 300, 1 ≤ k ≤ 3·107) — height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right — (n, m). Then there follow n lines, m characters each — description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.\n\nOutput\n\nIf the number of the constellations is less than k, output -1. Otherwise output 5 lines, two integers each — coordinates of the required constellation. Output the stars in the following order: central, upper, lower, left, right.\n\nExamples\n\nInput\n\n5 6 1\n....*.\n...***\n....*.\n..*...\n.***..\n\n\nOutput\n\n2 5\n1 5\n3 5\n2 4\n2 6\n\n\nInput\n\n5 6 2\n....*.\n...***\n....*.\n..*...\n.***..\n\n\nOutput\n\n-1\n\n\nInput\n\n7 7 2\n...*...\n.......\n...*...\n*.***.*\n...*...\n.......\n...*...\n\n\nOutput\n\n4 4\n1 4\n7 4\n4 1\n4 7", "testcase": ["5 6 2\n....*.\n...***\n.....*\n..*...\n..***.", "5 5 2\n....*.\n...***\n.*....\n..*...\n**...*", "7 6 2\n...*...\n.......\n...*...\n.***.**\n...*...\n.......\n...*...", "7 7 2\n...*...\n.......\n...*...\n**.*.**\n...*...\n.......\n.*.....", "5 6 2\n....*.\n...***\n....*.\n..*...\n.***..", "5 6 1\n....*.\n...***\n....*.\n.....*\n.***..", "5 6 2\n....*.\n...***\n..*...\n.*....\n.***..", "5 6 1\n.....*\n.**..*\n....*.\n..*...\n.***..", "5 6 2\n....*.\n...***\n..*...\n..*...\n*..**.", "5 7 1\n.*....\n...***\n...*..\n..*...\n.***.."], "output": ["2 5\n1 5\n3 5\n2 4\n2 6\n", "4 4\n1 4\n7 4\n4 1\n4 7\n", "-1\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "342_C. Cupboard and Balloons", "description": "A girl named Xenia has a cupboard that looks like an arc from ahead. The arc is made of a semicircle with radius r (the cupboard's top) and two walls of height h (the cupboard's sides). The cupboard's depth is r, that is, it looks like a rectangle with base r and height h + r from the sides. The figure below shows what the cupboard looks like (the front view is on the left, the side view is on the right).\n\n<image>\n\nXenia got lots of balloons for her birthday. The girl hates the mess, so she wants to store the balloons in the cupboard. Luckily, each balloon is a sphere with radius <image>. Help Xenia calculate the maximum number of balloons she can put in her cupboard. \n\nYou can say that a balloon is in the cupboard if you can't see any part of the balloon on the left or right view. The balloons in the cupboard can touch each other. It is not allowed to squeeze the balloons or deform them in any way. You can assume that the cupboard's walls are negligibly thin.\n\nInput\n\nThe single line contains two integers r, h (1 ≤ r, h ≤ 107).\n\nOutput\n\nPrint a single integer — the maximum number of balloons Xenia can put in the cupboard.\n\nExamples\n\nInput\n\n1 1\n\n\nOutput\n\n3\n\n\nInput\n\n1 2\n\n\nOutput\n\n5\n\n\nInput\n\n2 1\n\n\nOutput\n\n2", "testcase": ["1 2", "1 1", "2 2", "1 2", "1 0", "2 2", "1 3", "1 3", "1 3", "1 3"], "output": ["3", "2", "5"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "343_B. Alternating Current", "description": "Mad scientist Mike has just finished constructing a new device to search for extraterrestrial intelligence! He was in such a hurry to launch it for the first time that he plugged in the power wires without giving it a proper glance and started experimenting right away. After a while Mike observed that the wires ended up entangled and now have to be untangled again.\n\nThe device is powered by two wires \"plus\" and \"minus\". The wires run along the floor from the wall (on the left) to the device (on the right). Both the wall and the device have two contacts in them on the same level, into which the wires are plugged in some order. The wires are considered entangled if there are one or more places where one wire runs above the other one. For example, the picture below has four such places (top view):\n\n<image>\n\nMike knows the sequence in which the wires run above each other. Mike also noticed that on the left side, the \"plus\" wire is always plugged into the top contact (as seen on the picture). He would like to untangle the wires without unplugging them and without moving the device. Determine if it is possible to do that. A wire can be freely moved and stretched on the floor, but cannot be cut.\n\nTo understand the problem better please read the notes to the test samples.\n\nInput\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 ≤ n ≤ 100000). The i-th (1 ≤ i ≤ n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.\n\nOutput\n\nPrint either \"Yes\" (without the quotes) if the wires can be untangled or \"No\" (without the quotes) if the wires cannot be untangled.\n\nExamples\n\nInput\n\n-++-\n\n\nOutput\n\nYes\n\n\nInput\n\n+-\n\n\nOutput\n\nNo\n\n\nInput\n\n++\n\n\nOutput\n\nYes\n\n\nInput\n\n-\n\n\nOutput\n\nNo\n\nNote\n\nThe first testcase corresponds to the picture in the statement. To untangle the wires, one can first move the \"plus\" wire lower, thus eliminating the two crosses in the middle, and then draw it under the \"minus\" wire, eliminating also the remaining two crosses.\n\nIn the second testcase the \"plus\" wire makes one full revolution around the \"minus\" wire. Thus the wires cannot be untangled: \n\n<image>\n\nIn the third testcase the \"plus\" wire simply runs above the \"minus\" wire twice in sequence. The wires can be untangled by lifting \"plus\" and moving it higher: \n\n<image>\n\nIn the fourth testcase the \"minus\" wire runs above the \"plus\" wire once. The wires cannot be untangled without moving the device itself: \n\n<image>", "testcase": ["-+", "-+-+", "-", "-+", "++", "-", "-", "++--", "-+", "++"], "output": ["YES\n", "YES\n", "NO\n", "NO\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "365_A. Good Number", "description": "Let's call a number k-good if it contains all digits not exceeding k (0, ..., k). You've got a number k and an array a containing n numbers. Find out how many k-good numbers are in a (count each number every time it occurs in array a).\n\nInput\n\nThe first line contains integers n and k (1 ≤ n ≤ 100, 0 ≤ k ≤ 9). The i-th of the following n lines contains integer ai without leading zeroes (1 ≤ ai ≤ 109).\n\nOutput\n\nPrint a single integer — the number of k-good numbers in a.\n\nExamples\n\nInput\n\n10 6\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n1234560\n\n\nOutput\n\n10\n\n\nInput\n\n2 1\n1\n10\n\n\nOutput\n\n1", "testcase": ["10 6\n1234560\n1234560\n1234560\n1234560\n1234559\n1234559\n1234560\n1234560\n1234560\n1234560", "10 7\n1234560\n1234560\n1234559\n1234560\n1234560\n1234562\n1234560\n1234560\n1234560\n1234560", "2 1\n2\n9", "2 2\n1\n11", "2 2\n1\n9", "10 6\n1234559\n1234560\n1234560\n1234560\n1234561\n1234560\n1234560\n1234560\n1234560\n1234560", "2 1\n1\n8", "10 6\n1234560\n1234560\n1234561\n1234560\n1234559\n1234560\n1234560\n1234561\n1234560\n1234559", "2 1\n0\n11", "10 6\n1234560\n1234559\n1234560\n1234561\n1234560\n1234560\n1234560\n1234559\n1234560\n1234561"], "output": ["1\n", "10\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "373_A. Collecting Beats is Fun", "description": "Cucumber boy is fan of Kyubeat, a famous music game.\n\nKyubeat has 16 panels for playing arranged in 4 × 4 table. When a panel lights up, he has to press that panel.\n\nEach panel has a timing to press (the preffered time when a player should press it), and Cucumber boy is able to press at most k panels in a time with his one hand. Cucumber boy is trying to press all panels in perfect timing, that is he wants to press each panel exactly in its preffered time. If he cannot press the panels with his two hands in perfect timing, his challenge to press all the panels in perfect timing will fail.\n\nYou are given one scene of Kyubeat's panel from the music Cucumber boy is trying. Tell him is he able to press all the panels in perfect timing.\n\nInput\n\nThe first line contains a single integer k (1 ≤ k ≤ 5) — the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) — table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.\n\nOutput\n\nOutput \"YES\" (without quotes), if he is able to press all the panels in perfect timing. If not, output \"NO\" (without quotes).\n\nExamples\n\nInput\n\n1\n.135\n1247\n3468\n5789\n\n\nOutput\n\nYES\n\n\nInput\n\n5\n..1.\n1111\n..1.\n..1.\n\n\nOutput\n\nYES\n\n\nInput\n\n1\n....\n12.1\n.2..\n.2..\n\n\nOutput\n\nNO\n\nNote\n\nIn the third sample boy cannot press all panels in perfect timing. He can press all the panels in timing in time 1, but he cannot press the panels in time 2 in timing with his two hands.", "testcase": ["5\n..1.\n1111\n.1..\n..1.", "1\n.135\n1246\n3468\n5788", "1\n....\n12.1\n.2..\n.2..", "5\n...1\n1111\n.1..\n..1.", "1\n....\n12.077860593131446\n.2..\n2...", "5\n..1.\n1110\n.1..\n..1.", "1\n....\n13.129623833481281\n.2..\n.2..", "1\n513.\n1247\n3467\n5789", "1\n.135\n1248\n3468\n5790", "1\n....\n12.1\n2...\n.2.."], "output": ["YES\n", "YES\n", "NO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "374_A. Inna and Pink Pony", "description": "Dima and Inna are doing so great! At the moment, Inna is sitting on the magic lawn playing with a pink pony. Dima wanted to play too. He brought an n × m chessboard, a very tasty candy and two numbers a and b.\n\nDima put the chessboard in front of Inna and placed the candy in position (i, j) on the board. The boy said he would give the candy if it reaches one of the corner cells of the board. He's got one more condition. There can only be actions of the following types:\n\n  * move the candy from position (x, y) on the board to position (x - a, y - b); \n  * move the candy from position (x, y) on the board to position (x + a, y - b); \n  * move the candy from position (x, y) on the board to position (x - a, y + b); \n  * move the candy from position (x, y) on the board to position (x + a, y + b). \n\n\n\nNaturally, Dima doesn't allow to move the candy beyond the chessboard borders.\n\nInna and the pony started shifting the candy around the board. They wonder what is the minimum number of allowed actions that they need to perform to move the candy from the initial position (i, j) to one of the chessboard corners. Help them cope with the task! \n\nInput\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 ≤ n, m ≤ 106; 1 ≤ i ≤ n; 1 ≤ j ≤ m; 1 ≤ a, b ≤ 106).\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).\n\nOutput\n\nIn a single line print a single integer — the minimum number of moves needed to get the candy.\n\nIf Inna and the pony cannot get the candy playing by Dima's rules, print on a single line \"Poor Inna and pony!\" without the quotes.\n\nExamples\n\nInput\n\n5 7 1 3 2 2\n\n\nOutput\n\n2\n\n\nInput\n\n5 5 2 3 1 1\n\n\nOutput\n\nPoor Inna and pony!\n\nNote\n\nNote to sample 1:\n\nInna and the pony can move the candy to position (1 + 2, 3 + 2) = (3, 5), from there they can move it to positions (3 - 2, 5 + 2) = (1, 7) and (3 + 2, 5 + 2) = (5, 7). These positions correspond to the corner squares of the chess board. Thus, the answer to the test sample equals two.", "testcase": ["5 6 3 3 1 1", "5 5 2 4 0 1", "5 5 2 3 0 2", "5 7 -1 3 2 2", "5 5 1 4 1 1", "5 7 2 2 2 2", "5 7 1 3 2 2", "5 7 1 3 1 1", "5 5 2 4 2 1", "5 8 1 3 2 3"], "output": ["Poor Inna and pony!\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "379_A. New Year Candles", "description": "Vasily the Programmer loves romance, so this year he decided to illuminate his room with candles.\n\nVasily has a candles.When Vasily lights up a new candle, it first burns for an hour and then it goes out. Vasily is smart, so he can make b went out candles into a new candle. As a result, this new candle can be used like any other new candle.\n\nNow Vasily wonders: for how many hours can his candles light up the room if he acts optimally well? Help him find this number.\n\nInput\n\nThe single line contains two integers, a and b (1 ≤ a ≤ 1000; 2 ≤ b ≤ 1000).\n\nOutput\n\nPrint a single integer — the number of hours Vasily can light up the room for.\n\nExamples\n\nInput\n\n4 2\n\n\nOutput\n\n7\n\n\nInput\n\n6 3\n\n\nOutput\n\n8\n\nNote\n\nConsider the first sample. For the first four hours Vasily lights up new candles, then he uses four burned out candles to make two new ones and lights them up. When these candles go out (stop burning), Vasily can make another candle. Overall, Vasily can light up the room for 7 hours.", "testcase": ["4 1", "4 3", "4 3", "4 1", "6 4", "4 1", "4 1", "6 4", "6 4", "6 4"], "output": ["7\n", "8\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "393_C. Blocked Points", "description": "Imagine you have an infinite 2D plane with Cartesian coordinate system. Some of the integral points are blocked, and others are not. Two integral points A and B on the plane are 4-connected if and only if:\n\n  * the Euclidean distance between A and B is one unit and neither A nor B is blocked; \n  * or there is some integral point C, such that A is 4-connected with C, and C is 4-connected with B. \n\n\n\nLet's assume that the plane doesn't contain blocked points. Consider all the integral points of the plane whose Euclidean distance from the origin is no more than n, we'll name these points special. Chubby Yang wants to get the following property: no special point is 4-connected to some non-special point. To get the property she can pick some integral points of the plane and make them blocked. What is the minimum number of points she needs to pick?\n\nInput\n\nThe first line contains an integer n (0 ≤ n ≤ 4·107).\n\nOutput\n\nPrint a single integer — the minimum number of points that should be blocked.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n4\n\n\nInput\n\n2\n\n\nOutput\n\n8\n\n\nInput\n\n3\n\n\nOutput\n\n16", "testcase": ["1", "2", "1", "4", "2", "1", "0", "0", "4", "2"], "output": ["8\n", "16\n", "4\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "39_H. Multiplication Table", "description": "Petya studies positional notations. He has already learned to add and subtract numbers in the systems of notations with different radices and has moved on to a more complicated action — multiplication. To multiply large numbers one has to learn the multiplication table. Unfortunately, in the second grade students learn only the multiplication table of decimals (and some students even learn it in the first grade). Help Petya make a multiplication table for numbers in the system of notations with the radix k.\n\nInput\n\nThe first line contains a single integer k (2 ≤ k ≤ 10) — the radix of the system.\n\nOutput\n\nOutput the multiplication table for the system of notations with the radix k. The table must contain k - 1 rows and k - 1 columns. The element on the crossing of the i-th row and the j-th column is equal to the product of i and j in the system of notations with the radix k. Each line may have any number of spaces between the numbers (the extra spaces in the samples are put for clarity).\n\nExamples\n\nInput\n\n10\n\n\nOutput\n\n1  2  3  4  5  6  7  8  9\n2  4  6  8 10 12 14 16 18\n3  6  9 12 15 18 21 24 27\n4  8 12 16 20 24 28 32 36\n5 10 15 20 25 30 35 40 45\n6 12 18 24 30 36 42 48 54\n7 14 21 28 35 42 49 56 63\n8 16 24 32 40 48 56 64 72\n9 18 27 36 45 54 63 72 81\n\n\nInput\n\n3\n\n\nOutput\n\n1  2\n2 11", "testcase": ["4", "2", "4", "2", "9", "2", "4", "11", "2", "9"], "output": ["1  2  3  4  5  6  7  8  9 \n2  4  6  8 10 12 14 16 18 \n3  6  9 12 15 18 21 24 27 \n4  8 12 16 20 24 28 32 36 \n5 10 15 20 25 30 35 40 45 \n6 12 18 24 30 36 42 48 54 \n7 14 21 28 35 42 49 56 63 \n8 16 24 32 40 48 56 64 72 \n9 18 27 36 45 54 63 72 81 \n", "1  2 \n2 11 \n"], "difficulty": 14, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "404_D. Minesweeper 1D", "description": "Game \"Minesweeper 1D\" is played on a line of squares, the line's height is 1 square, the line's width is n squares. Some of the squares contain bombs. If a square doesn't contain a bomb, then it contains a number from 0 to 2 — the total number of bombs in adjacent squares.\n\nFor example, the correct field to play looks like that: 001*2***101*. The cells that are marked with \"*\" contain bombs. Note that on the correct field the numbers represent the number of bombs in adjacent cells. For example, field 2* is not correct, because cell with value 2 must have two adjacent cells with bombs.\n\nValera wants to make a correct field to play \"Minesweeper 1D\". He has already painted a squared field with width of n cells, put several bombs on the field and wrote numbers into some cells. Now he wonders how many ways to fill the remaining cells with bombs and numbers are there if we should get a correct field in the end.\n\nInput\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 ≤ n ≤ 106), containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.\n\nOutput\n\nPrint a single integer — the number of ways Valera can fill the empty cells and get a correct field.\n\nAs the answer can be rather large, print it modulo 1000000007 (109 + 7).\n\nExamples\n\nInput\n\n?01???\n\n\nOutput\n\n4\n\n\nInput\n\n?\n\n\nOutput\n\n2\n\n\nInput\n\n**12\n\n\nOutput\n\n0\n\n\nInput\n\n1\n\n\nOutput\n\n0\n\nNote\n\nIn the first test sample you can get the following correct fields: 001**1, 001***, 001*2*, 001*10.", "testcase": ["??0?1?", "0", "???10?", "0", "?", "*1*2", "2", "?1???0", "12**", "*21*"], "output": ["4\n", "0\n", "0\n", "2\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "405_A. Gravity Flip", "description": "Little Chris is bored during his physics lessons (too easy), so he has built a toy box to keep himself occupied. The box is special, since it has the ability to change gravity.\n\nThere are n columns of toy cubes in the box arranged in a line. The i-th column contains ai cubes. At first, the gravity in the box is pulling the cubes downwards. When Chris switches the gravity, it begins to pull all the cubes to the right side of the box. The figure shows the initial and final configurations of the cubes in the box: the cubes that have changed their position are highlighted with orange.\n\n<image>\n\nGiven the initial configuration of the toy cubes in the box, find the amounts of cubes in each of the n columns after the gravity switch!\n\nInput\n\nThe first line of input contains an integer n (1 ≤ n ≤ 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 ≤ ai ≤ 100) denotes the number of cubes in the i-th column.\n\nOutput\n\nOutput n integer numbers separated by spaces, where the i-th number is the amount of cubes in the i-th column after the gravity switch.\n\nExamples\n\nInput\n\n4\n3 2 1 2\n\n\nOutput\n\n1 2 2 3 \n\n\nInput\n\n3\n2 3 8\n\n\nOutput\n\n2 3 8 \n\nNote\n\nThe first example case is shown on the figure. The top cube of the first column falls to the top of the last column; the top cube of the second column falls to the top of the third column; the middle cube of the first column falls to the top of the second column.\n\nIn the second example case the gravity switch does not change the heights of the columns.", "testcase": ["4\n3 1 1 3", "3\n2 3 8", "3\n1 4 8", "4\n3 2 2 3", "4\n4 2 2 2", "3\n2 4 9", "4\n3 2 1 4", "3\n2 4 7", "3\n3 3 7", "4\n2 2 1 1"], "output": ["2 3 8 ", "1 2 2 3 "], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "40_C. Berland Square", "description": "Last year the world's largest square was built in Berland. It is known that the square can be represented as an infinite plane with an introduced Cartesian system of coordinates. On that square two sets of concentric circles were painted. Let's call the set of concentric circles with radii 1, 2, ..., K and the center in the point (z, 0) a (K, z)-set. Thus, on the square were painted a (N, x)-set and a (M, y)-set. You have to find out how many parts those sets divided the square into.\n\nInput\n\nThe first line contains integers N, x, M, y. (1 ≤ N, M ≤ 100000, - 100000 ≤ x, y ≤ 100000, x ≠ y).\n\nOutput\n\nPrint the sought number of parts.\n\nExamples\n\nInput\n\n1 0 1 1\n\n\nOutput\n\n4\n\n\nInput\n\n1 0 1 2\n\n\nOutput\n\n3\n\n\nInput\n\n3 3 4 7\n\n\nOutput\n\n17\n\nNote\n\nPicture for the third sample:\n\n<image>", "testcase": ["3 4 5 7", "3 3 5 6", "1 -1 1 0", "1 2 1 2", "1 0 1 1", "1 0 -1 2", "1 0 0 2", "1 0 0 0", "3 4 4 6", "3 3 5 8"], "output": ["                                                              17\n", "                                                               3\n", "                                                               4\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "420_A. Start Up", "description": "Recently, a start up by two students of a state university of city F gained incredible popularity. Now it's time to start a new company. But what do we call it?\n\nThe market analysts came up with a very smart plan: the name of the company should be identical to its reflection in a mirror! In other words, if we write out the name of the company on a piece of paper in a line (horizontally, from left to right) with large English letters, then put this piece of paper in front of the mirror, then the reflection of the name in the mirror should perfectly match the line written on the piece of paper.\n\nThere are many suggestions for the company name, so coming up to the mirror with a piece of paper for each name wouldn't be sensible. The founders of the company decided to automatize this process. They asked you to write a program that can, given a word, determine whether the word is a 'mirror' word or not.\n\nInput\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>\n\nOutput\n\nPrint 'YES' (without the quotes), if the given name matches its mirror reflection. Otherwise, print 'NO' (without the quotes).\n\nExamples\n\nInput\n\nAHA\n\n\nOutput\n\nYES\n\n\nInput\n\nZ\n\n\nOutput\n\nNO\n\n\nInput\n\nXO\n\n\nOutput\n\nNO", "testcase": ["AHX", "AHC", "H", "V", "XU", "XA", "UO", "O", "K", "AFA"], "output": ["YES\n", "NO\n", "NO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "425_A. Sereja and Swaps", "description": "As usual, Sereja has array a, its elements are integers: a[1], a[2], ..., a[n]. Let's introduce notation:\n\n<image>\n\nA swap operation is the following sequence of actions:\n\n  * choose two indexes i, j (i ≠ j); \n  * perform assignments tmp = a[i], a[i] = a[j], a[j] = tmp. \n\n\n\nWhat maximum value of function m(a) can Sereja get if he is allowed to perform at most k swap operations?\n\nInput\n\nThe first line contains two integers n and k (1 ≤ n ≤ 200; 1 ≤ k ≤ 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 ≤ a[i] ≤ 1000).\n\nOutput\n\nIn a single line print the maximum value of m(a) that Sereja can get if he is allowed to perform at most k swap operations.\n\nExamples\n\nInput\n\n10 2\n10 -1 2 2 2 2 2 2 -1 10\n\n\nOutput\n\n32\n\n\nInput\n\n5 10\n-1 -1 -1 -1 -1\n\n\nOutput\n\n-1", "testcase": ["10 2\n9 -1 3 2 1 1 2 2 -1 10", "10 2\n10 -1 3 1 2 3 2 2 -2 10", "5 10\n-1 0 -1 -1 -1", "10 2\n11 -1 2 2 2 3 2 2 0 9", "10 0\n10 -1 2 2 2 2 3 1 -1 10", "10 1\n10 -1 2 2 2 2 3 2 -1 10", "5 9\n-1 -1 -1 -2 -2", "5 10\n-1 0 -2 -2 -1", "5 11\n-1 -1 0 -1 0", "10 1\n10 -1 2 2 2 2 2 3 -2 11"], "output": ["-1\n", "32\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Devu is a renowned classical singer. He is invited to many big functions/festivals. Recently he was invited to \"All World Classical Singing Festival\". Other than Devu, comedian Churu was also invited.\n\nDevu has provided organizers a list of the songs and required time for singing them. He will sing n songs, ith song will take ti minutes exactly. \n\nThe Comedian, Churu will crack jokes. All his jokes are of 5 minutes exactly.\n\nPeople have mainly come to listen Devu. But you know that he needs rest of 10 minutes after each song. On the other hand, Churu being a very active person, doesn't need any rest.\n\nYou as one of the organizers should make an optimal sсhedule for the event. For some reasons you must follow the conditions:\n\n  * The duration of the event must be no more than d minutes; \n  * Devu must complete all his songs; \n  * With satisfying the two previous conditions the number of jokes cracked by Churu should be as many as possible. \n\n\n\nIf it is not possible to find a way to conduct all the songs of the Devu, output -1. Otherwise find out maximum number of jokes that Churu can crack in the grand event.\n\nInput\n\nThe first line contains two space separated integers n, d (1 ≤ n ≤ 100; 1 ≤ d ≤ 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 ≤ ti ≤ 100).\n\nOutput\n\nIf there is no way to conduct all the songs of Devu, output -1. Otherwise output the maximum number of jokes that Churu can crack in the grand event.\n\nExamples\n\nInput\n\n3 30\n2 2 1\n\n\nOutput\n\n5\n\n\nInput\n\n3 20\n2 1 1\n\n\nOutput\n\n-1\n\nNote\n\nConsider the first example. The duration of the event is 30 minutes. There could be maximum 5 jokes in the following way:\n\n  * First Churu cracks a joke in 5 minutes. \n  * Then Devu performs the first song for 2 minutes. \n  * Then Churu cracks 2 jokes in 10 minutes. \n  * Now Devu performs second song for 2 minutes. \n  * Then Churu cracks 2 jokes in 10 minutes. \n  * Now finally Devu will perform his last song in 1 minutes. \n\n\n\nTotal time spent is 5 + 2 + 10 + 2 + 10 + 1 = 30 minutes.\n\nConsider the second example. There is no way of organizing Devu's all songs. Hence the answer is -1. ", "testcase": ["3 30\n2 3 2", "3 20\n2 2 2", "3 30\n2 3 0", "3 19\n2 2 1", "3 21\n2 2 1", "3 29\n3 2 1", "3 31\n1 2 1", "3 30\n3 1 1", "3 21\n1 1 1", "3 30\n2 2 1"], "output": ["-1\n", "5\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "439_B. Devu, the Dumb Guy", "description": "Devu is a dumb guy, his learning curve is very slow. You are supposed to teach him n subjects, the ith subject has ci chapters. When you teach him, you are supposed to teach all the chapters of a subject continuously.\n\nLet us say that his initial per chapter learning power of a subject is x hours. In other words he can learn a chapter of a particular subject in x hours.\n\nWell Devu is not complete dumb, there is a good thing about him too. If you teach him a subject, then time required to teach any chapter of the next subject will require exactly 1 hour less than previously required (see the examples to understand it more clearly). Note that his per chapter learning power can not be less than 1 hour.\n\nYou can teach him the n subjects in any possible order. Find out minimum amount of time (in hours) Devu will take to understand all the subjects and you will be free to do some enjoying task rather than teaching a dumb guy.\n\nPlease be careful that answer might not fit in 32 bit data type.\n\nInput\n\nThe first line will contain two space separated integers n, x (1 ≤ n, x ≤ 105). The next line will contain n space separated integers: c1, c2, ..., cn (1 ≤ ci ≤ 105).\n\nOutput\n\nOutput a single integer representing the answer to the problem.\n\nExamples\n\nInput\n\n2 3\n4 1\n\n\nOutput\n\n11\n\n\nInput\n\n4 2\n5 1 2 1\n\n\nOutput\n\n10\n\n\nInput\n\n3 3\n1 1 1\n\n\nOutput\n\n6\n\nNote\n\nLook at the first example. Consider the order of subjects: 1, 2. When you teach Devu the first subject, it will take him 3 hours per chapter, so it will take 12 hours to teach first subject. After teaching first subject, his per chapter learning time will be 2 hours. Now teaching him second subject will take 2 × 1 = 2 hours. Hence you will need to spend 12 + 2 = 14 hours.\n\nConsider the order of subjects: 2, 1. When you teach Devu the second subject, then it will take him 3 hours per chapter, so it will take 3 × 1 = 3 hours to teach the second subject. After teaching the second subject, his per chapter learning time will be 2 hours. Now teaching him the first subject will take 2 × 4 = 8 hours. Hence you will need to spend 11 hours.\n\nSo overall, minimum of both the cases is 11 hours.\n\nLook at the third example. The order in this example doesn't matter. When you teach Devu the first subject, it will take him 3 hours per chapter. When you teach Devu the second subject, it will take him 2 hours per chapter. When you teach Devu the third subject, it will take him 1 hours per chapter. In total it takes 6 hours.", "testcase": ["4 2\n4 1 2 0", "2 3\n5 0", "4 1\n5 0 2 1", "4 2\n4 0 2 1", "3 2\n1 1 2", "2 3\n3 2", "2 4\n5 1", "2 4\n3 1", "3 3\n1 0 0", "2 3\n5 2"], "output": ["6\n", "10\n", "11\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "442_C. Artem and Array ", "description": "Artem has an array of n positive integers. Artem decided to play with it. The game consists of n moves. Each move goes like this. Artem chooses some element of the array and removes it. For that, he gets min(a, b) points, where a and b are numbers that were adjacent with the removed number. If the number doesn't have an adjacent number to the left or right, Artem doesn't get any points. \n\nAfter the element is removed, the two parts of the array glue together resulting in the new array that Artem continues playing with. Borya wondered what maximum total number of points Artem can get as he plays this game.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 5·105) — the number of elements in the array. The next line contains n integers ai (1 ≤ ai ≤ 106) — the values of the array elements.\n\nOutput\n\nIn a single line print a single integer — the maximum number of points Artem can get.\n\nExamples\n\nInput\n\n5\n3 1 5 2 6\n\n\nOutput\n\n11\n\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\n6\n\n\nInput\n\n5\n1 100 101 100 1\n\n\nOutput\n\n102", "testcase": ["5\n1 101 101 100 0", "5\n2 100 100 100 1", "5\n1 101 101 101 1", "5\n3 1 6 2 7", "5\n1 2 3 3 4", "5\n1 101 102 100 1", "5\n3 1 4 2 5", "5\n1 2 2 3 5", "5\n1 3 4 4 5", "5\n2 2 3 5 5"], "output": ["6", "102", "11"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "443_A. Anton and Letters", "description": "Recently, Anton has found a set. The set consists of small English letters. Anton carefully wrote out all the letters from the set in one line, separated by a comma. He also added an opening curved bracket at the beginning of the line and a closing curved bracket at the end of the line. \n\nUnfortunately, from time to time Anton would forget writing some letter and write it again. He asks you to count the total number of distinct letters in his set.\n\nInput\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.\n\nOutput\n\nPrint a single number — the number of distinct letters in Anton's set.\n\nExamples\n\nInput\n\n{a, b, c}\n\n\nOutput\n\n3\n\n\nInput\n\n{b, a, b, a}\n\n\nOutput\n\n2\n\n\nInput\n\n{}\n\n\nOutput\n\n0", "testcase": ["{}", "{a, j, c}", "{v, b, p}", "{b, r, b, a}", "{}", "{a, b, f}", "{b, y, b, z}", "{b, a, b, a}", "{a, b, c}", "{b, a, d, a}"], "output": ["3\n", "2\n", "0\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "44_B. Cola", "description": "To celebrate the opening of the Winter Computer School the organizers decided to buy in n liters of cola. However, an unexpected difficulty occurred in the shop: it turned out that cola is sold in bottles 0.5, 1 and 2 liters in volume. At that, there are exactly a bottles 0.5 in volume, b one-liter bottles and c of two-liter ones. The organizers have enough money to buy any amount of cola. What did cause the heated arguments was how many bottles of every kind to buy, as this question is pivotal for the distribution of cola among the participants (and organizers as well).\n\nThus, while the organizers are having the argument, discussing different variants of buying cola, the Winter School can't start. Your task is to count the number of all the possible ways to buy exactly n liters of cola and persuade the organizers that this number is too large, and if they keep on arguing, then the Winter Computer School will have to be organized in summer.\n\nAll the bottles of cola are considered indistinguishable, i.e. two variants of buying are different from each other only if they differ in the number of bottles of at least one kind.\n\nInput\n\nThe first line contains four integers — n, a, b, c (1 ≤ n ≤ 10000, 0 ≤ a, b, c ≤ 5000).\n\nOutput\n\nPrint the unique number — the solution to the problem. If it is impossible to buy exactly n liters of cola, print 0. \n\nExamples\n\nInput\n\n10 5 5 5\n\n\nOutput\n\n9\n\n\nInput\n\n3 0 0 2\n\n\nOutput\n\n0", "testcase": ["3 0 0 2", "10 5 4 4", "3 0 1 3", "10 5 5 5", "10 5 5 5", "10 4 5 6", "3 0 1 3", "10 5 4 4", "3 0 0 2", "10 5 4 6"], "output": ["9\n", "0\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "44_I. Toys", "description": "Little Masha loves arranging her toys into piles on the floor. And she also hates it when somebody touches her toys. One day Masha arranged all her n toys into several piles and then her elder brother Sasha came and gathered all the piles into one. Having seen it, Masha got very upset and started crying. Sasha still can't calm Masha down and mom is going to come home soon and punish Sasha for having made Masha crying. That's why he decides to restore the piles' arrangement. However, he doesn't remember at all the way the toys used to lie. Of course, Masha remembers it, but she can't talk yet and can only help Sasha by shouting happily when he arranges the toys in the way they used to lie. That means that Sasha will have to arrange the toys in every possible way until Masha recognizes the needed arrangement. The relative position of the piles and toys in every pile is irrelevant, that's why the two ways of arranging the toys are considered different if can be found two such toys that when arranged in the first way lie in one and the same pile and do not if arranged in the second way. Sasha is looking for the fastest way of trying all the ways because mom will come soon. With every action Sasha can take a toy from any pile and move it to any other pile (as a result a new pile may appear or the old one may disappear). Sasha wants to find the sequence of actions as a result of which all the pile arrangement variants will be tried exactly one time each. Help Sasha. As we remember, initially all the toys are located in one pile. \n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 10) — the number of toys.\n\nOutput\n\nIn the first line print the number of different variants of arrangement of toys into piles. Then print all the ways of arranging toys into piles in the order in which Sasha should try them (i.e. every next way must result from the previous one through the operation described in the statement). Every way should be printed in the following format. In every pile the toys should be arranged in ascending order of the numbers. Then the piles should be sorted in ascending order of the numbers of the first toys there. Output every way on a single line. Cf. the example to specify the output data format. If the solution is not unique, output any of them.\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n5\n{1,2,3}\n{1,2},{3}\n{1},{2,3}\n{1},{2},{3}\n{1,3},{2}", "testcase": ["4", "4", "4", "4", "2", "4", "2", "4", "2", "2"], "output": ["5\n{1,2,3}\n{1,2},{3}\n{1},{2},{3}\n{1},{2,3}\n{1,3},{2}\n"], "difficulty": 15, "time_limit": {"seconds": 5, "nanos": 0}}
{"name": "453_E. Little Pony and Lord Tirek", "description": "Lord Tirek is a centaur and the main antagonist in the season four finale episodes in the series \"My Little Pony: Friendship Is Magic\". In \"Twilight's Kingdom\" (Part 1), Tirek escapes from Tartarus and drains magic from ponies to grow stronger.\n\n<image>\n\nThe core skill of Tirek is called Absorb Mana. It takes all mana from a magic creature and gives them to the caster.\n\nNow to simplify the problem, assume you have n ponies (numbered from 1 to n). Each pony has three attributes:\n\n  * si : amount of mana that the pony has at time 0; \n  * mi : maximum mana that the pony can have; \n  * ri : mana regeneration per unit time. \n\n\n\nLord Tirek will do m instructions, each of them can be described with three integers: ti, li, ri. The instruction means that at time ti, Tirek will use Absorb Mana on ponies with numbers from li to ri (both borders inclusive). We'll give you all the m instructions in order, count how much mana Tirek absorbs for each instruction.\n\nInput\n\nThe first line contains an integer n (1 ≤ n ≤ 105) — the number of ponies. Each of the next n lines contains three integers si, mi, ri (0 ≤ si ≤ mi ≤ 105; 0 ≤ ri ≤ 105), describing a pony. \n\nThe next line contains an integer m (1 ≤ m ≤ 105) — the number of instructions. Each of the next m lines contains three integers ti, li, ri (0 ≤ ti ≤ 109; 1 ≤ li ≤ ri ≤ n), describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti (all ti are distinct).\n\nOutput\n\nFor each instruction, output a single line which contains a single integer, the total mana absorbed in this instruction.\n\nExamples\n\nInput\n\n5\n0 10 1\n0 12 1\n0 20 1\n0 12 1\n0 10 1\n2\n5 1 5\n19 1 5\n\n\nOutput\n\n25\n58\n\nNote\n\nEvery pony starts with zero mana. For the first instruction, each pony has 5 mana, so you get 25 mana in total and each pony has 0 mana after the first instruction.\n\nFor the second instruction, pony 3 has 14 mana and other ponies have mana equal to their mi.", "testcase": ["5\n0 10 1\n0 13 1\n0 20 1\n-1 12 1\n0 10 1\n3\n4 1 5\n18 1 5", "5\n0 11 1\n0 12 1\n0 20 1\n0 12 2\n-1 10 0\n2\n4 1 5\n19 1 5", "5\n0 10 1\n0 12 1\n-1 20 1\n0 13 1\n-1 10 1\n2\n5 2 5\n19 1 4", "5\n-1 10 1\n0 12 0\n0 20 1\n0 12 1\n0 10 1\n2\n5 1 5\n19 0 5", "5\n0 10 1\n0 11 1\n0 20 1\n0 11 1\n1 9 1\n2\n6 1 5\n19 3 5", "5\n0 10 1\n-1 12 -1\n0 20 1\n0 12 1\n0 10 1\n2\n5 1 5\n19 1 5", "5\n0 10 1\n0 12 1\n0 22 1\n0 12 2\n0 10 1\n2\n4 1 5\n20 1 7", "5\n1 9 1\n0 12 1\n0 20 2\n0 12 0\n0 10 0\n2\n5 1 5\n19 1 5", "5\n0 10 1\n-1 13 1\n0 19 1\n0 12 1\n0 10 1\n2\n4 1 5\n18 1 5", "5\n0 10 2\n1 12 2\n0 20 0\n0 11 1\n0 10 1\n2\n5 1 5\n19 1 5"], "output": ["25\n58\n"], "difficulty": 11, "time_limit": {"seconds": 3, "nanos": 0}}
{"name": "469_A. I Wanna Be the Guy", "description": "There is a game called \"I Wanna Be the Guy\", consisting of n levels. Little X and his friend Little Y are addicted to the game. Each of them wants to pass the whole game.\n\nLittle X can pass only p levels of the game. And Little Y can pass only q levels of the game. You are given the indices of levels Little X can pass and the indices of levels Little Y can pass. Will Little X and Little Y pass the whole game, if they cooperate each other?\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 100). \n\nThe next line contains an integer p (0 ≤ p ≤ n) at first, then follows p distinct integers a1, a2, ..., ap (1 ≤ ai ≤ n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.\n\nOutput\n\nIf they can pass all the levels, print \"I become the guy.\". If it's impossible, print \"Oh, my keyboard!\" (without the quotes).\n\nExamples\n\nInput\n\n4\n3 1 2 3\n2 2 4\n\n\nOutput\n\nI become the guy.\n\n\nInput\n\n4\n3 1 2 3\n2 2 3\n\n\nOutput\n\nOh, my keyboard!\n\nNote\n\nIn the first sample, Little X can pass levels [1 2 3], and Little Y can pass level [2 4], so they can pass all the levels both.\n\nIn the second sample, no one can pass level 4.", "testcase": ["4\n3 1 0 3\n3 2 3", "4\n3 0 2 3\n2 3 3", "4\n2 1 3 3\n1 2 3", "4\n3 1 2 2\n2 1 5", "4\n4 1 2 3\n3 3 3", "4\n3 1 3 5\n2 2 4", "4\n3 1 1 3\n3 1 4", "4\n4 1 2 3\n2 2 3", "4\n4 2 2 3\n3 2 3", "4\n3 0 2 3\n1 2 2"], "output": ["Oh, my keyboard!\n", "I become the guy.\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "476_A. Dreamoon and Stairs", "description": "Dreamoon wants to climb up a stair of n steps. He can climb 1 or 2 steps at each move. Dreamoon wants the number of moves to be a multiple of an integer m. \n\nWhat is the minimal number of moves making him climb to the top of the stairs that satisfies his condition?\n\nInput\n\nThe single line contains two space separated integers n, m (0 < n ≤ 10000, 1 < m ≤ 10).\n\nOutput\n\nPrint a single integer — the minimal number of moves being a multiple of m. If there is no way he can climb satisfying condition print  - 1 instead.\n\nExamples\n\nInput\n\n10 2\n\n\nOutput\n\n6\n\n\nInput\n\n3 5\n\n\nOutput\n\n-1\n\nNote\n\nFor the first sample, Dreamoon could climb in 6 moves with following sequence of steps: {2, 2, 2, 2, 1, 1}.\n\nFor the second sample, there are only three valid sequence of steps {2, 1}, {1, 2}, {1, 1, 1} with 2, 2, and 3 steps respectively. All these numbers are not multiples of 5.", "testcase": ["10 1", "10 3", "10 3", "10 3", "10 1", "10 1", "10 1", "3 6", "3 6", "10 3"], "output": ["6\n", "-1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "476_C. Dreamoon and Sums", "description": "Dreamoon loves summing up something for no reason. One day he obtains two integers a and b occasionally. He wants to calculate the sum of all nice integers. Positive integer x is called nice if <image> and <image>, where k is some integer number in range [1, a].\n\nBy <image> we denote the quotient of integer division of x and y. By <image> we denote the remainder of integer division of x and y. You can read more about these operations here: http://goo.gl/AcsXhT.\n\nThe answer may be large, so please print its remainder modulo 1 000 000 007 (109 + 7). Can you compute it faster than Dreamoon?\n\nInput\n\nThe single line of the input contains two integers a, b (1 ≤ a, b ≤ 107).\n\nOutput\n\nPrint a single integer representing the answer modulo 1 000 000 007 (109 + 7).\n\nExamples\n\nInput\n\n1 1\n\n\nOutput\n\n0\n\n\nInput\n\n2 2\n\n\nOutput\n\n8\n\nNote\n\nFor the first sample, there are no nice integers because <image> is always zero.\n\nFor the second sample, the set of nice integers is {3, 5}.", "testcase": ["1 0", "1 0", "1 0", "1 2", "2 1", "2 1", "1 2", "2 1", "2 1", "2 1"], "output": ["8\n", "0\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 500000000}}
{"name": "478_A. Initial Bet", "description": "There are five people playing a game called \"Generosity\". Each person gives some non-zero number of coins b as an initial bet. After all players make their bets of b coins, the following operation is repeated for several times: a coin is passed from one player to some other player.\n\nYour task is to write a program that can, given the number of coins each player has at the end of the game, determine the size b of the initial bet or find out that such outcome of the game cannot be obtained for any positive number of coins b in the initial bet.\n\nInput\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 — the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 ≤ c1, c2, c3, c4, c5 ≤ 100).\n\nOutput\n\nPrint the only line containing a single positive integer b — the number of coins in the initial bet of each player. If there is no such value of b, then print the only value \"-1\" (quotes for clarity).\n\nExamples\n\nInput\n\n2 5 4 0 4\n\n\nOutput\n\n3\n\n\nInput\n\n4 5 9 2 1\n\n\nOutput\n\n-1\n\nNote\n\nIn the first sample the following sequence of operations is possible:\n\n  1. One coin is passed from the fourth player to the second player; \n  2. One coin is passed from the fourth player to the fifth player; \n  3. One coin is passed from the first player to the third player; \n  4. One coin is passed from the fourth player to the second player. ", "testcase": ["2 6 5 0 4", "2 5 4 0 4", "4 5 10 1 1", "4 5 9 2 1", "2 5 4 0 4", "2 5 4 -2 4", "4 6 9 2 0", "2 5 4 0 4", "4 4 8 2 1", "2 5 3 -1 4"], "output": ["3\n", "-1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "478_C. Table Decorations", "description": "You have r red, g green and b blue balloons. To decorate a single table for the banquet you need exactly three balloons. Three balloons attached to some table shouldn't have the same color. What maximum number t of tables can be decorated if we know number of balloons of each color?\n\nYour task is to write a program that for given values r, g and b will find the maximum number t of tables, that can be decorated in the required manner.\n\nInput\n\nThe single line contains three integers r, g and b (0 ≤ r, g, b ≤ 2·109) — the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.\n\nOutput\n\nPrint a single integer t — the maximum number of tables that can be decorated in the required manner.\n\nExamples\n\nInput\n\n5 4 3\n\n\nOutput\n\n4\n\n\nInput\n\n1 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n2 3 3\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample you can decorate the tables with the following balloon sets: \"rgg\", \"gbb\", \"brr\", \"rrg\", where \"r\", \"g\" and \"b\" represent the red, green and blue balls, respectively.", "testcase": ["2 3 2", "5 5 3", "1 2 1", "2 2 3", "1 1 2", "5 3 3", "5 5 3", "2 3 4", "1 0 1", "2 3 2"], "output": ["1\n", "4\n", "2\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "483_B. Friends and Presents", "description": "You have two friends. You want to present each of them several positive integers. You want to present cnt1 numbers to the first friend and cnt2 numbers to the second friend. Moreover, you want all presented numbers to be distinct, that also means that no number should be presented to both friends.\n\nIn addition, the first friend does not like the numbers that are divisible without remainder by prime number x. The second one does not like the numbers that are divisible without remainder by prime number y. Of course, you're not going to present your friends numbers they don't like.\n\nYour task is to find such minimum number v, that you can form presents using numbers from a set 1, 2, ..., v. Of course you may choose not to present some numbers at all.\n\nA positive integer number greater than 1 is called prime if it has no positive divisors other than 1 and itself.\n\nInput\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 ≤ cnt1, cnt2 < 109; cnt1 + cnt2 ≤ 109; 2 ≤ x < y ≤ 3·104) — the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.\n\nOutput\n\nPrint a single integer — the answer to the problem.\n\nExamples\n\nInput\n\n3 1 2 3\n\n\nOutput\n\n5\n\n\nInput\n\n1 3 2 3\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample you give the set of numbers {1, 3, 5} to the first friend and the set of numbers {2} to the second friend. Note that if you give set {1, 3, 5} to the first friend, then we cannot give any of the numbers 1, 3, 5 to the second friend. \n\nIn the second sample you give the set of numbers {3} to the first friend, and the set of numbers {1, 2, 4} to the second friend. Thus, the answer to the problem is 4.", "testcase": ["1 2 2 4", "1 3 3 4", "3 3 2 3", "3 2 2 4", "3 1 1 2", "1 3 3 2", "1 4 2 4", "3 0 2 4", "3 1 1 4", "3 0 2 2"], "output": ["5\n", "4\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "488_A. Giga Tower", "description": "Giga Tower is the tallest and deepest building in Cyberland. There are 17 777 777 777 floors, numbered from  - 8 888 888 888 to 8 888 888 888. In particular, there is floor 0 between floor  - 1 and floor 1. Every day, thousands of tourists come to this place to enjoy the wonderful view. \n\nIn Cyberland, it is believed that the number \"8\" is a lucky number (that's why Giga Tower has 8 888 888 888 floors above the ground), and, an integer is lucky, if and only if its decimal notation contains at least one digit \"8\". For example, 8, - 180, 808 are all lucky while 42, - 10 are not. In the Giga Tower, if you write code at a floor with lucky floor number, good luck will always be with you (Well, this round is #278, also lucky, huh?).\n\nTourist Henry goes to the tower to seek good luck. Now he is at the floor numbered a. He wants to find the minimum positive integer b, such that, if he walks b floors higher, he will arrive at a floor with a lucky number. \n\nInput\n\nThe only line of input contains an integer a ( - 109 ≤ a ≤ 109).\n\nOutput\n\nPrint the minimum b in a line.\n\nExamples\n\nInput\n\n179\n\n\nOutput\n\n1\n\n\nInput\n\n-1\n\n\nOutput\n\n9\n\n\nInput\n\n18\n\n\nOutput\n\n10\n\nNote\n\nFor the first sample, he has to arrive at the floor numbered 180.\n\nFor the second sample, he will arrive at 8.\n\nNote that b should be positive, so the answer for the third sample is 10, not 0.", "testcase": ["-2", "0", "178", "-2", "0", "180", "17", "180", "180", "180"], "output": ["10\n", "1\n", "9\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "492_B. Vanya and Lanterns", "description": "Vanya walks late at night along a straight street of length l, lit by n lanterns. Consider the coordinate system with the beginning of the street corresponding to the point 0, and its end corresponding to the point l. Then the i-th lantern is at the point ai. The lantern lights all points of the street that are at the distance of at most d from it, where d is some positive number, common for all lanterns. \n\nVanya wonders: what is the minimum light radius d should the lanterns have to light the whole street?\n\nInput\n\nThe first line contains two integers n, l (1 ≤ n ≤ 1000, 1 ≤ l ≤ 109) — the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 ≤ ai ≤ l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.\n\nOutput\n\nPrint the minimum light radius d, needed to light the whole street. The answer will be considered correct if its absolute or relative error doesn't exceed 10 - 9.\n\nExamples\n\nInput\n\n7 15\n15 5 3 7 9 14 0\n\n\nOutput\n\n2.5000000000\n\n\nInput\n\n2 5\n2 5\n\n\nOutput\n\n2.0000000000\n\nNote\n\nConsider the second sample. At d = 2 the first lantern will light the segment [0, 4] of the street, and the second lantern will light segment [3, 5]. Thus, the whole street will be lit.", "testcase": ["2 6\n2 4", "2 6\n2 4", "7 15\n15 5 3 5 9 14 1", "7 15\n15 7 3 7 9 14 -1", "7 15\n15 5 4 7 9 13 1", "2 4\n2 6", "7 15\n16 5 3 7 10 14 -1", "2 6\n2 6", "2 5\n2 5", "7 14\n15 5 3 7 11 14 0"], "output": ["2.5\n", "2.0\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "49_D. Game", "description": "Vasya and Petya have invented a new game. Vasya takes a stripe consisting of 1 × n square and paints the squares black and white. After that Petya can start moves — during a move he may choose any two neighboring squares of one color and repaint these two squares any way he wants, perhaps in different colors. Petya can only repaint the squares in white and black colors. Petya’s aim is to repaint the stripe so that no two neighboring squares were of one color. Help Petya, using the given initial coloring, find the minimum number of moves Petya needs to win.\n\nInput\n\nThe first line contains number n (1 ≤ n ≤ 1000) which represents the stripe’s length. The second line contains exactly n symbols — the line’s initial coloring. 0 corresponds to a white square, 1 corresponds to a black one.\n\nOutput\n\nIf Petya cannot win with such an initial coloring, print -1. Otherwise print the minimum number of moves Petya needs to win.\n\nExamples\n\nInput\n\n6\n111010\n\n\nOutput\n\n1\n\n\nInput\n\n5\n10001\n\n\nOutput\n\n1\n\n\nInput\n\n7\n1100010\n\n\nOutput\n\n2\n\n\nInput\n\n5\n00100\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample Petya can take squares 1 and 2. He repaints square 1 to black and square 2 to white.\n\nIn the second sample Petya can take squares 2 and 3. He repaints square 2 to white and square 3 to black.", "testcase": ["7\n1100011", "5\n10000", "5\n101", "5\n101", "5\n10000", "7\n1100011", "5\n101", "5\n99", "5\n101", "7\n1100011"], "output": ["2", "1", "1", "2"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "510_A. Fox And Snake", "description": "Fox Ciel starts to learn programming. The first task is drawing a fox! However, that turns out to be too hard for a beginner, so she decides to draw a snake instead.\n\nA snake is a pattern on a n by m table. Denote c-th cell of r-th row as (r, c). The tail of the snake is located at (1, 1), then it's body extends to (1, m), then goes down 2 rows to (3, m), then goes left to (3, 1) and so on.\n\nYour task is to draw this snake for Fox Ciel: the empty cells should be represented as dot characters ('.') and the snake cells should be filled with number signs ('#').\n\nConsider sample tests in order to understand the snake pattern.\n\nInput\n\nThe only line contains two integers: n and m (3 ≤ n, m ≤ 50). \n\nn is an odd number.\n\nOutput\n\nOutput n lines. Each line should contain a string consisting of m characters. Do not output spaces.\n\nExamples\n\nInput\n\n3 3\n\n\nOutput\n\n###\n..#\n###\n\n\nInput\n\n3 4\n\n\nOutput\n\n####\n...#\n####\n\n\nInput\n\n5 3\n\n\nOutput\n\n###\n..#\n###\n#..\n###\n\n\nInput\n\n9 9\n\n\nOutput\n\n#########\n........#\n#########\n#........\n#########\n........#\n#########\n#........\n#########", "testcase": ["3 3", "5 4", "9 8", "9 10", "3 2", "3 4", "3 5", "5 2", "9 8", "5 4"], "output": ["#########\n........#\n#########\n#........\n#########\n........#\n#########\n#........\n#########\n", "###\n..#\n###\n#..\n###\n", "###\n..#\n###\n", "####\n...#\n####\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "510_B. Fox And Two Dots", "description": "Fox Ciel is playing a mobile puzzle game called \"Two Dots\". The basic levels are played on a board of size n × m cells, like this:\n\n<image>\n\nEach cell contains a dot that has some color. We will use different uppercase Latin characters to express different colors.\n\nThe key of this game is to find a cycle that contain dots of same color. Consider 4 blue dots on the picture forming a circle as an example. Formally, we call a sequence of dots d1, d2, ..., dk a cycle if and only if it meets the following condition:\n\n  1. These k dots are different: if i ≠ j then di is different from dj. \n  2. k is at least 4. \n  3. All dots belong to the same color. \n  4. For all 1 ≤ i ≤ k - 1: di and di + 1 are adjacent. Also, dk and d1 should also be adjacent. Cells x and y are called adjacent if they share an edge. \n\n\n\nDetermine if there exists a cycle on the field.\n\nInput\n\nThe first line contains two integers n and m (2 ≤ n, m ≤ 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.\n\nOutput\n\nOutput \"Yes\" if there exists a cycle, and \"No\" otherwise.\n\nExamples\n\nInput\n\n3 4\nAAAA\nABCA\nAAAA\n\n\nOutput\n\nYes\n\n\nInput\n\n3 4\nAAAA\nABCA\nAADA\n\n\nOutput\n\nNo\n\n\nInput\n\n4 4\nYYYR\nBYBY\nBBBY\nBBBY\n\n\nOutput\n\nYes\n\n\nInput\n\n7 6\nAAAAAB\nABBBAB\nABAAAB\nABABBB\nABAAAB\nABBBAB\nAAAAAB\n\n\nOutput\n\nYes\n\n\nInput\n\n2 13\nABCDEFGHIJKLM\nNOPQRSTUVWXYZ\n\n\nOutput\n\nNo\n\nNote\n\nIn first sample test all 'A' form a cycle.\n\nIn second sample there is no such cycle.\n\nThe third sample is displayed on the picture above ('Y' = Yellow, 'B' = Blue, 'R' = Red).", "testcase": ["3 4\nAAAA\nABCA\nAADA", "3 4\nAAAA\nABCA\nHCDA", "2 13\nGBCGEFGHIJKLM\nNOPQRSTUVWXYZ", "4 4\nYYYR\nBYBY\nBBBY\nXBBN", "2 14\nABCDEFGHIJKLM\nNOPQRSTUVWSYZ", "4 4\nYYYR\nBYTY\nBABY\nBBBY", "2 13\nABCDZFGHIJMLM\nNOPQRSTUVWXYZ", "2 12\nABCDEFGHIAKLM\nNOPQRSTUVWXYZ", "3 4\nAAAU\nABCR\nAADA", "3 4\nAWNA\nABCA\nAADA"], "output": ["No\n", "Yes\n", "Yes\n", "No\n", "Yes\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "513_A. Game", "description": "Two players play a simple game. Each player is provided with a box with balls. First player's box contains exactly n1 balls and second player's box contains exactly n2 balls. In one move first player can take from 1 to k1 balls from his box and throw them away. Similarly, the second player can take from 1 to k2 balls from his box in his move. Players alternate turns and the first player starts the game. The one who can't make a move loses. Your task is to determine who wins if both players play optimally.\n\nInput\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.\n\nOutput\n\nOutput \"First\" if the first player wins and \"Second\" otherwise.\n\nExamples\n\nInput\n\n2 2 1 2\n\n\nOutput\n\nSecond\n\n\nInput\n\n2 1 1 1\n\n\nOutput\n\nFirst\n\nNote\n\nConsider the first sample test. Each player has a box with 2 balls. The first player draws a single ball from his box in one move and the second player can either take 1 or 2 balls from his box in one move. No matter how the first player acts, the second player can always win if he plays wisely.", "testcase": ["2 1 3 1", "2 2 1 0", "2 3 2 2", "2 0 1 0", "2 1 1 1", "2 1 0 0", "2 2 2 1", "2 1 2 2", "2 3 2 2", "2 1 1 1"], "output": ["First\n", "Second\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "526_A. King of Thieves", "description": "In this problem you will meet the simplified model of game King of Thieves.\n\nIn a new ZeptoLab game called \"King of Thieves\" your aim is to reach a chest with gold by controlling your character, avoiding traps and obstacles on your way.\n\n<image>\n\nAn interesting feature of the game is that you can design your own levels that will be available to other players. Let's consider the following simple design of a level.\n\nA dungeon consists of n segments located at a same vertical level, each segment is either a platform that character can stand on, or a pit with a trap that makes player lose if he falls into it. All segments have the same length, platforms on the scheme of the level are represented as '*' and pits are represented as '.'. \n\nOne of things that affects speedrun characteristics of the level is a possibility to perform a series of consecutive jumps of the same length. More formally, when the character is on the platform number i1, he can make a sequence of jumps through the platforms i1 < i2 < ... < ik, if i2 - i1 = i3 - i2 = ... = ik - ik - 1. Of course, all segments i1, i2, ... ik should be exactly the platforms, not pits. \n\nLet's call a level to be good if you can perform a sequence of four jumps of the same length or in the other words there must be a sequence i1, i2, ..., i5, consisting of five platforms so that the intervals between consecutive platforms are of the same length. Given the scheme of the level, check if it is good.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 100) — the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.\n\nOutput\n\nIf the level is good, print the word \"yes\" (without the quotes), otherwise print the word \"no\" (without the quotes).\n\nExamples\n\nInput\n\n16\n.**.*..*.***.**.\n\n\nOutput\n\nyes\n\nInput\n\n11\n.*.*...*.*.\n\n\nOutput\n\nno\n\nNote\n\nIn the first sample test you may perform a sequence of jumps through platforms 2, 5, 8, 11, 14.", "testcase": ["16\n..*.**.*.**.***.", "16\n**..*..*.*.****.", "11\n.*...*..**.", "11\n...***..*..", "11\n**..**.....", "11\n.*...*...**", "11\n..*....**.*", "16\n*....*****...***", "16\n.***..*..**.***.", "11\n.*.*..*..*."], "output": ["yes", "no"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "535_C. Tavas and Karafs", "description": "Karafs is some kind of vegetable in shape of an 1 × h rectangle. Tavaspolis people love Karafs and they use Karafs in almost any kind of food. Tavas, himself, is crazy about Karafs.\n\n<image>\n\nEach Karafs has a positive integer height. Tavas has an infinite 1-based sequence of Karafses. The height of the i-th Karafs is si = A + (i - 1) × B.\n\nFor a given m, let's define an m-bite operation as decreasing the height of at most m distinct not eaten Karafses by 1. Karafs is considered as eaten when its height becomes zero.\n\nNow SaDDas asks you n queries. In each query he gives you numbers l, t and m and you should find the largest number r such that l ≤ r and sequence sl, sl + 1, ..., sr can be eaten by performing m-bite no more than t times or print -1 if there is no such number r.\n\nInput\n\nThe first line of input contains three integers A, B and n (1 ≤ A, B ≤ 106, 1 ≤ n ≤ 105).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 ≤ l, t, m ≤ 106) for i-th query.\n\nOutput\n\nFor each query, print its answer in a single line.\n\nExamples\n\nInput\n\n2 1 4\n1 5 3\n3 3 10\n7 10 2\n6 4 8\n\n\nOutput\n\n4\n-1\n8\n-1\n\n\nInput\n\n1 5 2\n1 5 10\n2 7 4\n\n\nOutput\n\n1\n2", "testcase": ["1 5 3\n0 5 10\n2 6 4", "2 0 4\n1 5 3\n3 3 11\n8 10 2\n6 5 9", "1 6 2\n1 5 11\n2 6 4", "1 5 2\n0 5 11\n2 7 5", "2 1 4\n2 5 3\n3 2 10\n7 10 3\n6 4 10", "2 1 4\n2 4 3\n3 2 10\n8 10 1\n6 4 8", "1 5 3\n1 5 10\n2 7 4", "2 2 4\n0 5 3\n2 3 10\n8 10 2\n5 4 8", "2 2 4\n2 5 4\n3 3 10\n7 11 2\n5 4 8", "1 5 2\n1 5 10\n2 7 3"], "output": ["1\n2\n", "4\n-1\n8\n-1\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "538_B. Quasi Binary", "description": "A number is called quasibinary if its decimal representation contains only digits 0 or 1. For example, numbers 0, 1, 101, 110011 — are quasibinary and numbers 2, 12, 900 are not.\n\nYou are given a positive integer n. Represent it as a sum of minimum number of quasibinary numbers.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 106).\n\nOutput\n\nIn the first line print a single integer k — the minimum number of numbers in the representation of number n as a sum of quasibinary numbers.\n\nIn the second line print k numbers — the elements of the sum. All these numbers should be quasibinary according to the definition above, their sum should equal n. Do not have to print the leading zeroes in the numbers. The order of numbers doesn't matter. If there are multiple possible representations, you are allowed to print any of them.\n\nExamples\n\nInput\n\n9\n\n\nOutput\n\n9\n1 1 1 1 1 1 1 1 1 \n\n\nInput\n\n32\n\n\nOutput\n\n3\n10 11 11 ", "testcase": ["8", "31", "8", "10", "10", "31", "31", "8", "10", "33"], "output": ["3\n11 11 10\n", "9\n1 1 1 1 1 1 1 1 1\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "545_C. Woodcutters", "description": "Little Susie listens to fairy tales before bed every day. Today's fairy tale was about wood cutters and the little girl immediately started imagining the choppers cutting wood. She imagined the situation that is described below.\n\nThere are n trees located along the road at points with coordinates x1, x2, ..., xn. Each tree has its height hi. Woodcutters can cut down a tree and fell it to the left or to the right. After that it occupies one of the segments [xi - hi, xi] or [xi;xi + hi]. The tree that is not cut down occupies a single point with coordinate xi. Woodcutters can fell a tree if the segment to be occupied by the fallen tree doesn't contain any occupied point. The woodcutters want to process as many trees as possible, so Susie wonders, what is the maximum number of trees to fell. \n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 105) — the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 ≤ xi, hi ≤ 109) — the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.\n\nOutput\n\nPrint a single number — the maximum number of trees that you can cut down by the given rules.\n\nExamples\n\nInput\n\n5\n1 2\n2 1\n5 10\n10 9\n19 1\n\n\nOutput\n\n3\n\n\nInput\n\n5\n1 2\n2 1\n5 10\n10 9\n20 1\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample you can fell the trees like that: \n\n  * fell the 1-st tree to the left — now it occupies segment [ - 1;1]\n  * fell the 2-nd tree to the right — now it occupies segment [2;3]\n  * leave the 3-rd tree — it occupies point 5\n  * leave the 4-th tree — it occupies point 10\n  * fell the 5-th tree to the right — now it occupies segment [19;20]\n\n\n\nIn the second sample you can also fell 4-th tree to the right, after that it will occupy segment [10;19].", "testcase": ["5\n0 2\n1 1\n5 10\n10 9\n19 2", "5\n2 2\n1 1\n5 10\n10 8\n20 2", "5\n-1 2\n3 2\n5 10\n10 9\n20 1", "5\n1 2\n2 2\n4 10\n9 9\n19 2", "5\n1 4\n2 1\n5 10\n11 9\n19 2", "5\n1 2\n2 0\n5 9\n10 10\n20 1", "5\n1 2\n2 1\n4 9\n10 11\n20 1", "5\n1 2\n2 1\n5 10\n10 8\n19 -1", "5\n2 3\n3 1\n5 11\n10 9\n19 1", "5\n1 3\n3 2\n5 10\n10 8\n19 1"], "output": ["4\n", "3\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "550_A. Two Substrings", "description": "You are given string s. Your task is to determine if the given string s contains two non-overlapping substrings \"AB\" and \"BA\" (the substrings can go in any order).\n\nInput\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.\n\nOutput\n\nPrint \"YES\" (without the quotes), if string s contains two non-overlapping substrings \"AB\" and \"BA\", and \"NO\" otherwise.\n\nExamples\n\nInput\n\nABA\n\n\nOutput\n\nNO\n\n\nInput\n\nBACFAB\n\n\nOutput\n\nYES\n\n\nInput\n\nAXBYBXA\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample test, despite the fact that there are substrings \"AB\" and \"BA\", their occurrences overlap, so the answer is \"NO\".\n\nIn the second sample test there are the following occurrences of the substrings: BACFAB.\n\nIn the third sample test there is no substring \"AB\" nor substring \"BA\".", "testcase": ["AXBYBUA", "AXBLBXA", "AXBYWXA", "ACA", "AXBYYXA", "AXBYBWA", "AXBYKXA", "AXA", "AXBYXXA", "BTCFAB"], "output": ["NO\n", "NO\n", "YES\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "551_A. GukiZ and Contest", "description": "Professor GukiZ likes programming contests. He especially likes to rate his students on the contests he prepares. Now, he has decided to prepare a new contest. \n\nIn total, n students will attend, and before the start, every one of them has some positive integer rating. Students are indexed from 1 to n. Let's denote the rating of i-th student as ai. After the contest ends, every student will end up with some positive integer position. GukiZ expects that his students will take places according to their ratings. \n\nHe thinks that each student will take place equal to <image>. In particular, if student A has rating strictly lower then student B, A will get the strictly better position than B, and if two students have equal ratings, they will share the same position. \n\nGukiZ would like you to reconstruct the results by following his expectations. Help him and determine the position after the end of the contest for each of his students if everything goes as expected.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 ≤ ai ≤ 2000) where ai is the rating of i-th student (1 ≤ i ≤ n).\n\nOutput\n\nIn a single line, print the position after the end of the contest for each of n students in the same order as they appear in the input.\n\nExamples\n\nInput\n\n3\n1 3 3\n\n\nOutput\n\n3 1 1\n\n\nInput\n\n1\n1\n\n\nOutput\n\n1\n\n\nInput\n\n5\n3 5 3 4 5\n\n\nOutput\n\n4 1 4 3 1\n\nNote\n\nIn the first sample, students 2 and 3 are positioned first (there is no other student with higher rating), and student 1 is positioned third since there are two students with higher rating.\n\nIn the second sample, first student is the only one on the contest.\n\nIn the third sample, students 2 and 5 share the first position with highest rating, student 4 is next with third position, and students 1 and 3 are the last sharing fourth position.", "testcase": ["3\n1 3 3", "3\n1 1 3", "3\n1 2 2", "3\n1 5 3", "3\n1 3 3", "1\n2", "1\n0", "5\n3 5 3 4 5", "5\n4 4 3 4 5", "1\n0"], "output": ["1 ", "3 1 1 ", "4 1 4 3 1 "], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "554_A. Kyoya and Photobooks", "description": "Kyoya Ootori is selling photobooks of the Ouran High School Host Club. He has 26 photos, labeled \"a\" to \"z\", and he has compiled them into a photo booklet with some photos in some order (possibly with some photos being duplicated). A photo booklet can be described as a string of lowercase letters, consisting of the photos in the booklet in order. He now wants to sell some \"special edition\" photobooks, each with one extra photo inserted anywhere in the book. He wants to make as many distinct photobooks as possible, so he can make more money. He asks Haruhi, how many distinct photobooks can he make by inserting one extra photo into the photobook he already has?\n\nPlease help Haruhi solve this problem.\n\nInput\n\nThe first line of input will be a single string s (1 ≤ |s| ≤ 20). String s consists only of lowercase English letters. \n\nOutput\n\nOutput a single integer equal to the number of distinct photobooks Kyoya Ootori can make.\n\nExamples\n\nInput\n\na\n\n\nOutput\n\n51\n\n\nInput\n\nhi\n\n\nOutput\n\n76\n\nNote\n\nIn the first case, we can make 'ab','ac',...,'az','ba','ca',...,'za', and 'aa', producing a total of 51 distinct photo booklets. ", "testcase": ["li", "s", "r", "f", "hj", "h", "hn", "hd", "u", "q"], "output": ["76\n", "51\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "559_B. Equivalent Strings", "description": "Today on a lecture about strings Gerald learned a new definition of string equivalency. Two strings a and b of equal length are called equivalent in one of the two cases: \n\n  1. They are equal. \n  2. If we split string a into two halves of the same size a1 and a2, and string b into two halves of the same size b1 and b2, then one of the following is correct: \n    1. a1 is equivalent to b1, and a2 is equivalent to b2\n    2. a1 is equivalent to b2, and a2 is equivalent to b1\n\n\n\nAs a home task, the teacher gave two strings to his students and asked to determine if they are equivalent.\n\nGerald has already completed this home task. Now it's your turn!\n\nInput\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.\n\nOutput\n\nPrint \"YES\" (without the quotes), if these two strings are equivalent, and \"NO\" (without the quotes) otherwise.\n\nExamples\n\nInput\n\naaba\nabaa\n\n\nOutput\n\nYES\n\n\nInput\n\naabb\nabab\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample you should split the first string into strings \"aa\" and \"ba\", the second one — into strings \"ab\" and \"aa\". \"aa\" is equivalent to \"aa\"; \"ab\" is equivalent to \"ba\" as \"ab\" = \"a\" + \"b\", \"ba\" = \"b\" + \"a\".\n\nIn the second sample the first string can be splitted into strings \"aa\" and \"bb\", that are equivalent only to themselves. That's why string \"aabb\" is equivalent only to itself and to string \"bbaa\".", "testcase": ["aaba\nabxa", "aabb\naoab", "aara\nabaa", "aabf\nabab", "apba\nabaa", "aaba\nqbaa", "aabb\naqab", "aanb\nabab", "paba\nabaa", "aaib\nabab"], "output": ["NO\n", "YES\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "560_B. Gerald is into Art", "description": "Gerald bought two very rare paintings at the Sotheby's auction and he now wants to hang them on the wall. For that he bought a special board to attach it to the wall and place the paintings on the board. The board has shape of an a1 × b1 rectangle, the paintings have shape of a a2 × b2 and a3 × b3 rectangles.\n\nSince the paintings are painted in the style of abstract art, it does not matter exactly how they will be rotated, but still, one side of both the board, and each of the paintings must be parallel to the floor. The paintings can touch each other and the edges of the board, but can not overlap or go beyond the edge of the board. Gerald asks whether it is possible to place the paintings on the board, or is the board he bought not large enough?\n\nInput\n\nThe first line contains two space-separated numbers a1 and b1 — the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 — the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.\n\nOutput\n\nIf the paintings can be placed on the wall, print \"YES\" (without the quotes), and if they cannot, print \"NO\" (without the quotes).\n\nExamples\n\nInput\n\n3 2\n1 3\n2 1\n\n\nOutput\n\nYES\n\n\nInput\n\n5 5\n3 3\n3 3\n\n\nOutput\n\nNO\n\n\nInput\n\n4 2\n2 3\n1 2\n\n\nOutput\n\nYES\n\nNote\n\nThat's how we can place the pictures in the first test:\n\n<image>\n\nAnd that's how we can do it in the third one.\n\n<image>", "testcase": ["5 4\n4 3\n3 3", "3 2\n1 3\n2 1", "5 4\n3 3\n3 2", "4 1\n3 3\n1 2", "4 2\n2 3\n1 2", "3 3\n1 4\n2 1", "3 2\n1 3\n3 2", "5 5\n4 3\n4 3", "4 2\n3 3\n1 3", "4 2\n2 4\n0 2"], "output": ["Yes\n", "No\n", "Yes\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "56_E. Domino Principle", "description": "Vasya is interested in arranging dominoes. He is fed up with common dominoes and he uses the dominoes of different heights. He put n dominoes on the table along one axis, going from left to right. Every domino stands perpendicular to that axis so that the axis passes through the center of its base. The i-th domino has the coordinate xi and the height hi. Now Vasya wants to learn for every domino, how many dominoes will fall if he pushes it to the right. Help him do that. \n\nConsider that a domino falls if it is touched strictly above the base. In other words, the fall of the domino with the initial coordinate x and height h leads to the fall of all dominoes on the segment [x + 1, x + h - 1].\n\n<image>\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 105) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 ≤ xi ≤ 108, 2 ≤ hi ≤ 108) each, which are the coordinate and height of every domino. No two dominoes stand on one point.\n\nOutput\n\nPrint n space-separated numbers zi — the number of dominoes that will fall if Vasya pushes the i-th domino to the right (including the domino itself).\n\nExamples\n\nInput\n\n4\n16 5\n20 5\n10 10\n18 2\n\n\nOutput\n\n3 1 4 1 \n\nInput\n\n4\n0 10\n1 5\n9 10\n15 10\n\n\nOutput\n\n4 1 2 1 ", "testcase": ["4\n16 5\n21 5\n10 11\n18 1", "4\n15 5\n20 5\n8 10\n18 2", "4\n0 10\n1 5\n7 10\n15 9", "4\n0 10\n2 4\n10 10\n15 10", "4\n16 5\n20 6\n10 11\n18 1", "4\n16 5\n21 5\n10 10\n18 2", "4\n0 10\n2 5\n9 11\n14 10", "4\n16 7\n20 5\n10 10\n18 3", "4\n16 6\n19 6\n10 10\n18 2", "4\n-1 10\n1 5\n9 9\n16 10"], "output": ["3 1 4 1 ", "4 1 2 1 "], "difficulty": 11, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "570_B. Simple Game", "description": "One day Misha and Andrew were playing a very simple game. First, each player chooses an integer in the range from 1 to n. Let's assume that Misha chose number m, and Andrew chose number a.\n\nThen, by using a random generator they choose a random integer c in the range between 1 and n (any integer from 1 to n is chosen with the same probability), after which the winner is the player, whose number was closer to c. The boys agreed that if m and a are located on the same distance from c, Misha wins.\n\nAndrew wants to win very much, so he asks you to help him. You know the number selected by Misha, and number n. You need to determine which value of a Andrew must choose, so that the probability of his victory is the highest possible.\n\nMore formally, you need to find such integer a (1 ≤ a ≤ n), that the probability that <image> is maximal, where c is the equiprobably chosen integer from 1 to n (inclusive).\n\nInput\n\nThe first line contains two integers n and m (1 ≤ m ≤ n ≤ 109) — the range of numbers in the game, and the number selected by Misha respectively.\n\nOutput\n\nPrint a single number — such value a, that probability that Andrew wins is the highest. If there are multiple such values, print the minimum of them.\n\nExamples\n\nInput\n\n3 1\n\n\nOutput\n\n2\n\nInput\n\n4 3\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample test: Andrew wins if c is equal to 2 or 3. The probability that Andrew wins is 2 / 3. If Andrew chooses a = 3, the probability of winning will be 1 / 3. If a = 1, the probability of winning is 0.\n\nIn the second sample test: Andrew wins if c is equal to 1 and 2. The probability that Andrew wins is 1 / 2. For other choices of a the probability of winning is less.", "testcase": ["3 2", "3 2", "3 0", "4 2", "4 4", "4 2", "4 4", "4 4", "3 2", "4 2"], "output": ["2\n", "2\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "571_A. Lengthening Sticks", "description": "You are given three sticks with positive integer lengths of a, b, and c centimeters. You can increase length of some of them by some positive integer number of centimeters (different sticks can be increased by a different length), but in total by at most l centimeters. In particular, it is allowed not to increase the length of any stick.\n\nDetermine the number of ways to increase the lengths of some sticks so that you can form from them a non-degenerate (that is, having a positive area) triangle. Two ways are considered different, if the length of some stick is increased by different number of centimeters in them.\n\nInput\n\nThe single line contains 4 integers a, b, c, l (1 ≤ a, b, c ≤ 3·105, 0 ≤ l ≤ 3·105).\n\nOutput\n\nPrint a single integer — the number of ways to increase the sizes of the sticks by the total of at most l centimeters, so that you can make a non-degenerate triangle from it.\n\nExamples\n\nInput\n\n1 1 1 2\n\n\nOutput\n\n4\n\n\nInput\n\n1 2 3 1\n\n\nOutput\n\n2\n\n\nInput\n\n10 2 1 7\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample test you can either not increase any stick or increase any two sticks by 1 centimeter.\n\nIn the second sample test you can increase either the first or the second stick by one centimeter. Note that the triangle made from the initial sticks is degenerate and thus, doesn't meet the conditions.", "testcase": ["1 2 4 2", "10 3 1 8", "1 2 2 0", "10 1 1 6", "1 1 1 2", "1 2 5 1", "1 3 3 0", "10 2 2 8", "10 1 0 7", "10 2 3 7"], "output": ["4\n", "2\n", "0\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "598_A. Tricky Sum", "description": "In this problem you are to calculate the sum of all integers from 1 to n, but you should take all powers of two with minus in the sum.\n\nFor example, for n = 4 the sum is equal to  - 1 - 2 + 3 - 4 = - 4, because 1, 2 and 4 are 20, 21 and 22 respectively.\n\nCalculate the answer for t values of n.\n\nInput\n\nThe first line of the input contains a single integer t (1 ≤ t ≤ 100) — the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 ≤ n ≤ 109).\n\nOutput\n\nPrint the requested sum for each of t integers n given in the input.\n\nExamples\n\nInput\n\n2\n4\n1000000000\n\n\nOutput\n\n-4\n499999998352516354\n\nNote\n\nThe answer for the first sample is explained in the statement.", "testcase": ["2\n3\n1000000000", "2\n3\n1000000000", "2\n3\n1000000000", "2\n4\n999999999", "2\n4\n999999999", "2\n4\n1000000001", "2\n5\n1000000000", "2\n3\n1000000000", "2\n4\n1000000001", "2\n4\n1000000001"], "output": ["-4\n499999998352516354\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "599_A. Patrick and Shopping", "description": "Today Patrick waits for a visit from his friend Spongebob. To prepare for the visit, Patrick needs to buy some goodies in two stores located near his house. There is a d1 meter long road between his house and the first shop and a d2 meter long road between his house and the second shop. Also, there is a road of length d3 directly connecting these two shops to each other. Help Patrick calculate the minimum distance that he needs to walk in order to go to both shops and return to his house.\n\n<image>\n\nPatrick always starts at his house. He should visit both shops moving only along the three existing roads and return back to his house. He doesn't mind visiting the same shop or passing the same road multiple times. The only goal is to minimize the total distance traveled.\n\nInput\n\nThe first line of the input contains three integers d1, d2, d3 (1 ≤ d1, d2, d3 ≤ 108) — the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops. \n\nOutput\n\nPrint the minimum distance that Patrick will have to walk in order to visit both shops and return to his house.\n\nExamples\n\nInput\n\n10 20 30\n\n\nOutput\n\n60\n\n\nInput\n\n1 1 5\n\n\nOutput\n\n4\n\nNote\n\nThe first sample is shown on the picture in the problem statement. One of the optimal routes is: house <image> first shop <image> second shop <image> house.\n\nIn the second sample one of the optimal routes is: house <image> first shop <image> house <image> second shop <image> house.", "testcase": ["10 20 31", "1 1 4", "1 0 5", "1 2 5", "10 20 29", "1 1 6", "10 19 30", "10 20 29", "1 1 6", "10 19 30"], "output": ["60\n", "4\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "599_C. Day at the Beach", "description": "One day Squidward, Spongebob and Patrick decided to go to the beach. Unfortunately, the weather was bad, so the friends were unable to ride waves. However, they decided to spent their time building sand castles.\n\nAt the end of the day there were n castles built by friends. Castles are numbered from 1 to n, and the height of the i-th castle is equal to hi. When friends were about to leave, Squidward noticed, that castles are not ordered by their height, and this looks ugly. Now friends are going to reorder the castles in a way to obtain that condition hi ≤ hi + 1 holds for all i from 1 to n - 1.\n\nSquidward suggested the following process of sorting castles: \n\n  * Castles are split into blocks — groups of consecutive castles. Therefore the block from i to j will include castles i, i + 1, ..., j. A block may consist of a single castle. \n  * The partitioning is chosen in such a way that every castle is a part of exactly one block. \n  * Each block is sorted independently from other blocks, that is the sequence hi, hi + 1, ..., hj becomes sorted. \n  * The partitioning should satisfy the condition that after each block is sorted, the sequence hi becomes sorted too. This may always be achieved by saying that the whole sequence is a single block. \n\n\n\nEven Patrick understands that increasing the number of blocks in partitioning will ease the sorting process. Now friends ask you to count the maximum possible number of blocks in a partitioning that satisfies all the above requirements.\n\nInput\n\nThe first line of the input contains a single integer n (1 ≤ n ≤ 100 000) — the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains n integers hi (1 ≤ hi ≤ 109). The i-th of these integers corresponds to the height of the i-th castle.\n\nOutput\n\nPrint the maximum possible number of blocks in a valid partitioning.\n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n3\n\n\nInput\n\n4\n2 1 3 2\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample the partitioning looks like that: [1][2][3].\n\n<image>\n\nIn the second sample the partitioning is: [2, 1][3, 2]\n\n<image>", "testcase": ["4\n3 1 2 2", "3\n1 2 3", "4\n2 2 3 1", "3\n1 2 3", "4\n2 0 4 2", "3\n1 1 2", "4\n3 2 3 2", "3\n0 2 4", "3\n1 2 3", "4\n2 1 5 2"], "output": ["3\n", "2\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "This is yet another problem dealing with regular bracket sequences.\n\nWe should remind you that a bracket sequence is called regular, if by inserting «+» and «1» into it we can get a correct mathematical expression. For example, sequences «(())()», «()» and «(()(()))» are regular, while «)(», «(()» and «(()))(» are not. \n\nYou are given a string of «(» and «)» characters. You are to find its longest substring that is a regular bracket sequence. You are to find the number of such substrings as well.\n\nInput\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.\n\nOutput\n\nPrint the length of the longest substring that is a regular bracket sequence, and the number of such substrings. If there are no such substrings, write the only line containing \"0 1\".\n\nExamples\n\nInput\n\n)((())))(()())\n\n\nOutput\n\n6 2\n\n\nInput\n\n))(\n\n\nOutput\n\n0 1", "testcase": ["))(()()(())())", ")())())))((()(", "))((()()()()))", "())", ")))(((())))(()", ")())((()(())))", "())", "())", ")()", "())"], "output": ["6 2\n", "0 1\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Today, Wet Shark is given n integers. Using any of these integers no more than once, Wet Shark wants to get maximum possible even (divisible by 2) sum. Please, calculate this value for Wet Shark. \n\nNote, that if Wet Shark uses no integers from the n integers, the sum is an even integer 0.\n\nInput\n\nThe first line of the input contains one integer, n (1 ≤ n ≤ 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 109, inclusive. \n\nOutput\n\nPrint the maximum possible even sum that can be obtained if we use some of the given integers. \n\nExamples\n\nInput\n\n3\n1 2 3\n\n\nOutput\n\n6\n\nInput\n\n5\n999999999 999999999 999999999 999999999 999999999\n\n\nOutput\n\n3999999996\n\nNote\n\nIn the first sample, we can simply take all three integers for a total sum of 6.\n\nIn the second sample Wet Shark should take any four out of five integers 999 999 999.", "testcase": ["3\n0 3 3", "3\n1 2 5", "3\n1 2 3", "3\n-1 2 3", "5\n999999999 999999999 999999999 999999999 999999999", "5\n999999999 999999998 999999999 999999999 999999998", "5\n999999999 999999999 1000000000 1000000000 999999999", "5\n999999999 1000000001 999999999 999999999 999999999", "5\n999999999 999999999 999999998 999999999 1000000000", "5\n999999999 999999999 999999999 1000000000 1000000000"], "output": ["3999999996", "6"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "622_A. Infinite Sequence", "description": "Consider the infinite sequence of integers: 1, 1, 2, 1, 2, 3, 1, 2, 3, 4, 1, 2, 3, 4, 5.... The sequence is built in the following way: at first the number 1 is written out, then the numbers from 1 to 2, then the numbers from 1 to 3, then the numbers from 1 to 4 and so on. Note that the sequence contains numbers, not digits. For example number 10 first appears in the sequence in position 55 (the elements are numerated from one).\n\nFind the number on the n-th position of the sequence.\n\nInput\n\nThe only line contains integer n (1 ≤ n ≤ 1014) — the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.\n\nOutput\n\nPrint the element in the n-th position of the sequence (the elements are numerated from one).\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n2\n\n\nInput\n\n5\n\n\nOutput\n\n2\n\n\nInput\n\n10\n\n\nOutput\n\n4\n\n\nInput\n\n55\n\n\nOutput\n\n10\n\n\nInput\n\n56\n\n\nOutput\n\n1", "testcase": ["57", "11", "9", "57", "2", "57", "55", "4", "11", "4"], "output": ["1\n", "2\n", "10\n", "2\n", "4\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "624_B. Making a String", "description": "You are given an alphabet consisting of n letters, your task is to make a string of the maximum possible length so that the following conditions are satisfied: \n\n  * the i-th letter occurs in the string no more than ai times; \n  * the number of occurrences of each letter in the string must be distinct for all the letters that occurred in the string at least once. \n\nInput\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 26) — the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 ≤ ai ≤ 109) — i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.\n\nOutput\n\nPrint a single integer — the maximum length of the string that meets all the requirements.\n\nExamples\n\nInput\n\n3\n2 5 5\n\n\nOutput\n\n11\n\n\nInput\n\n3\n1 1 2\n\n\nOutput\n\n3\n\nNote\n\nFor convenience let's consider an alphabet consisting of three letters: \"a\", \"b\", \"c\". In the first sample, some of the optimal strings are: \"cccaabbccbb\", \"aabcbcbcbcb\". In the second sample some of the optimal strings are: \"acc\", \"cbc\".", "testcase": ["3\n2 0 2", "3\n2 6 4", "3\n3 5 6", "3\n2 1 1", "3\n2 5 5", "3\n0 2 2", "3\n1 0 3", "3\n4 5 5", "3\n1 2 1", "3\n2 1 1"], "output": ["11\n", "3\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "625_A. Guest From the Past", "description": "Kolya Gerasimov loves kefir very much. He lives in year 1984 and knows all the details of buying this delicious drink. One day, as you probably know, he found himself in year 2084, and buying kefir there is much more complicated.\n\nKolya is hungry, so he went to the nearest milk shop. In 2084 you may buy kefir in a plastic liter bottle, that costs a rubles, or in glass liter bottle, that costs b rubles. Also, you may return empty glass bottle and get c (c < b) rubles back, but you cannot return plastic bottles.\n\nKolya has n rubles and he is really hungry, so he wants to drink as much kefir as possible. There were no plastic bottles in his 1984, so Kolya doesn't know how to act optimally and asks for your help.\n\nInput\n\nFirst line of the input contains a single integer n (1 ≤ n ≤ 1018) — the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 ≤ a ≤ 1018, 1 ≤ c < b ≤ 1018) — the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.\n\nOutput\n\nPrint the only integer — maximum number of liters of kefir, that Kolya can drink.\n\nExamples\n\nInput\n\n10\n11\n9\n8\n\n\nOutput\n\n2\n\n\nInput\n\n10\n5\n6\n1\n\n\nOutput\n\n2\n\nNote\n\nIn the first sample, Kolya can buy one glass bottle, then return it and buy one more glass bottle. Thus he will drink 2 liters of kefir.\n\nIn the second sample, Kolya can buy two plastic bottle and get two liters of kefir, or he can buy one liter glass bottle, then return it and buy one plastic bottle. In both cases he will drink two liters of kefir.", "testcase": ["10\n5\n8\n1", "10\n11\n8\n7", "10\n11\n9\n10", "10\n6\n5\n1", "10\n5\n5\n0", "10\n9\n9\n8", "10\n9\n9\n8", "10\n5\n7\n0", "10\n6\n5\n1", "10\n4\n6\n0"], "output": ["2\n", "                                                               2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "626_C. Block Towers", "description": "Students in a class are making towers of blocks. Each student makes a (non-zero) tower by stacking pieces lengthwise on top of each other. n of the students use pieces made of two blocks and m of the students use pieces made of three blocks.\n\nThe students don’t want to use too many blocks, but they also want to be unique, so no two students’ towers may contain the same number of blocks. Find the minimum height necessary for the tallest of the students' towers.\n\nInput\n\nThe first line of the input contains two space-separated integers n and m (0 ≤ n, m ≤ 1 000 000, n + m > 0) — the number of students using two-block pieces and the number of students using three-block pieces, respectively.\n\nOutput\n\nPrint a single integer, denoting the minimum possible height of the tallest tower.\n\nExamples\n\nInput\n\n1 3\n\n\nOutput\n\n9\n\n\nInput\n\n3 2\n\n\nOutput\n\n8\n\n\nInput\n\n5 0\n\n\nOutput\n\n10\n\nNote\n\nIn the first case, the student using two-block pieces can make a tower of height 4, and the students using three-block pieces can make towers of height 3, 6, and 9 blocks. The tallest tower has a height of 9 blocks.\n\nIn the second case, the students can make towers of heights 2, 4, and 8 with two-block pieces and towers of heights 3 and 6 with three-block pieces, for a maximum height of 8 blocks.", "testcase": ["5 -1", "1 2", "3 1", "3 1", "1 2", "1 4", "3 1", "3 3", "5 -1", "3 3"], "output": ["8\n", "10\n", "9\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "628_A. Tennis Tournament", "description": "A tennis tournament with n participants is running. The participants are playing by an olympic system, so the winners move on and the losers drop out.\n\nThe tournament takes place in the following way (below, m is the number of the participants of the current round):\n\n  * let k be the maximal power of the number 2 such that k ≤ m, \n  * k participants compete in the current round and a half of them passes to the next round, the other m - k participants pass to the next round directly, \n  * when only one participant remains, the tournament finishes. \n\n\n\nEach match requires b bottles of water for each participant and one bottle for the judge. Besides p towels are given to each participant for the whole tournament.\n\nFind the number of bottles and towels needed for the tournament.\n\nNote that it's a tennis tournament so in each match two participants compete (one of them will win and the other will lose).\n\nInput\n\nThe only line contains three integers n, b, p (1 ≤ n, b, p ≤ 500) — the number of participants and the parameters described in the problem statement.\n\nOutput\n\nPrint two integers x and y — the number of bottles and towels need for the tournament.\n\nExamples\n\nInput\n\n5 2 3\n\n\nOutput\n\n20 15\n\n\nInput\n\n8 2 4\n\n\nOutput\n\n35 32\n\nNote\n\nIn the first example will be three rounds:\n\n  1. in the first round will be two matches and for each match 5 bottles of water are needed (two for each of the participants and one for the judge), \n  2. in the second round will be only one match, so we need another 5 bottles of water, \n  3. in the third round will also be only one match, so we need another 5 bottles of water. \n\n\n\nSo in total we need 20 bottles of water.\n\nIn the second example no participant will move on to some round directly.", "testcase": ["5 3 3", "5 2 2", "8 3 4", "8 3 4", "5 2 4", "8 3 4", "5 2 2", "5 2 4", "8 1 4", "5 1 3"], "output": ["20 15\n", "35 32\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "630_A. Again Twenty Five!", "description": "The HR manager was disappointed again. The last applicant failed the interview the same way as 24 previous ones. \"Do I give such a hard task?\" — the HR manager thought. \"Just raise number 5 to the power of n and get last two digits of the number. Yes, of course, n can be rather big, and one cannot find the power using a calculator, but we need people who are able to think, not just follow the instructions.\"\n\nCould you pass the interview in the machine vision company in IT City?\n\nInput\n\nThe only line of the input contains a single integer n (2 ≤ n ≤ 2·1018) — the power in which you need to raise number 5.\n\nOutput\n\nOutput the last two digits of 5n without spaces between them.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n25", "testcase": ["1", "3", "1", "3", "3", "1", "1", "1", "1", "1"], "output": ["25\n"], "difficulty": 7, "time_limit": {"seconds": 0, "nanos": 500000000}}
{"name": "633_A. Ebony and Ivory", "description": "Dante is engaged in a fight with \"The Savior\". Before he can fight it with his sword, he needs to break its shields. He has two guns, Ebony and Ivory, each of them is able to perform any non-negative number of shots.\n\nFor every bullet that hits the shield, Ebony deals a units of damage while Ivory deals b units of damage. In order to break the shield Dante has to deal exactly c units of damage. Find out if this is possible.\n\nInput\n\nThe first line of the input contains three integers a, b, c (1 ≤ a, b ≤ 100, 1 ≤ c ≤ 10 000) — the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.\n\nOutput\n\nPrint \"Yes\" (without quotes) if Dante can deal exactly c damage to the shield and \"No\" (without quotes) otherwise.\n\nExamples\n\nInput\n\n4 6 15\n\n\nOutput\n\nNo\n\n\nInput\n\n3 2 7\n\n\nOutput\n\nYes\n\n\nInput\n\n6 11 6\n\n\nOutput\n\nYes\n\nNote\n\nIn the second sample, Dante can fire 1 bullet from Ebony and 2 from Ivory to deal exactly 1·3 + 2·2 = 7 damage. In the third sample, Dante can fire 1 bullet from ebony and no bullets from ivory to do 1·6 + 0·11 = 6 damage. ", "testcase": ["3 2 6", "4 6 16", "4 6 14", "4 6 16", "4 6 14", "6 11 5", "6 10 6", "4 5 15", "3 2 8", "3 2 6"], "output": ["YES", "YES", "NO"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "634_B. XOR Equation", "description": "Two positive integers a and b have a sum of s and a bitwise XOR of x. How many possible values are there for the ordered pair (a, b)?\n\nInput\n\nThe first line of the input contains two integers s and x (2 ≤ s ≤ 1012, 0 ≤ x ≤ 1012), the sum and bitwise xor of the pair of positive integers, respectively.\n\nOutput\n\nPrint a single integer, the number of solutions to the given conditions. If no solutions exist, print 0.\n\nExamples\n\nInput\n\n9 5\n\n\nOutput\n\n4\n\n\nInput\n\n3 3\n\n\nOutput\n\n2\n\n\nInput\n\n5 2\n\n\nOutput\n\n0\n\nNote\n\nIn the first sample, we have the following solutions: (2, 7), (3, 6), (6, 3), (7, 2).\n\nIn the second sample, the only solutions are (1, 2) and (2, 1).", "testcase": ["3 2", "9 4", "9 4", "3 4", "9 4", "3 4", "3 2", "5 3", "5 1", "3 4"], "output": ["0", "2", "4"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "656_C. Without Text", "description": "<image>\n\nYou can preview the image in better quality by the link: [http://assets.codeforces.com/files/656/without-text.png](//assets.codeforces.com/files/656/without-text.png)\n\nInput\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".\n\nOutput\n\nOutput the required answer.\n\nExamples\n\nInput\n\nCodeforces\n\n\nOutput\n\n-87\n\n\nInput\n\nAPRIL.1st\n\n\nOutput\n\n17", "testcase": ["Codpforces", "Codeforcey", "1.LRAPsIt", ".t1sPIARL", "CodeforKes", "1PstLIA.R", "Codeforcos", "IA1sRtLP.", "Codeforges", "Codeforcea"], "output": ["17\n", "-87\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "65_A. Harry Potter and Three Spells", "description": "A long time ago (probably even in the first book), Nicholas Flamel, a great alchemist and the creator of the Philosopher's Stone, taught Harry Potter three useful spells. The first one allows you to convert a grams of sand into b grams of lead, the second one allows you to convert c grams of lead into d grams of gold and third one allows you to convert e grams of gold into f grams of sand. When Harry told his friends about these spells, Ron Weasley was amazed. After all, if they succeed in turning sand into lead, lead into gold, and then turning part of the gold into sand again and so on, then it will be possible to start with a small amount of sand and get huge amounts of gold! Even an infinite amount of gold! Hermione Granger, by contrast, was skeptical about that idea. She argues that according to the law of conservation of matter getting an infinite amount of matter, even using magic, is impossible. On the contrary, the amount of matter may even decrease during transformation, being converted to magical energy. Though Hermione's theory seems convincing, Ron won't believe her. As far as Ron is concerned, Hermione made up her law of conservation of matter to stop Harry and Ron wasting their time with this nonsense, and to make them go and do homework instead. That's why Ron has already collected a certain amount of sand for the experiments. A quarrel between the friends seems unavoidable...\n\nHelp Harry to determine which one of his friends is right, and avoid the quarrel after all. To do this you have to figure out whether it is possible to get the amount of gold greater than any preassigned number from some finite amount of sand.\n\nInput\n\nThe first line contains 6 integers a, b, c, d, e, f (0 ≤ a, b, c, d, e, f ≤ 1000).\n\nOutput\n\nPrint \"Ron\", if it is possible to get an infinitely large amount of gold having a certain finite amount of sand (and not having any gold and lead at all), i.e., Ron is right. Otherwise, print \"Hermione\".\n\nExamples\n\nInput\n\n100 200 250 150 200 250\n\n\nOutput\n\nRon\n\n\nInput\n\n100 50 50 200 200 100\n\n\nOutput\n\nHermione\n\n\nInput\n\n100 10 200 20 300 30\n\n\nOutput\n\nHermione\n\n\nInput\n\n0 0 0 0 0 0\n\n\nOutput\n\nHermione\n\n\nInput\n\n1 1 0 1 1 1\n\n\nOutput\n\nRon\n\n\nInput\n\n1 0 1 2 1 2\n\n\nOutput\n\nHermione\n\n\nInput\n\n100 1 100 1 0 1\n\n\nOutput\n\nRon\n\nNote\n\nConsider the first sample. Let's start with the 500 grams of sand. Apply the first spell 5 times and turn the sand into 1000 grams of lead. Then apply the second spell 4 times to get 600 grams of gold. Let’s take 400 grams from the resulting amount of gold turn them back into sand. We get 500 grams of sand and 200 grams of gold. If we apply the same operations to 500 grams of sand again, we can get extra 200 grams of gold every time. Thus, you can get 200, 400, 600 etc. grams of gold, i.e., starting with a finite amount of sand (500 grams), you can get the amount of gold which is greater than any preassigned number.\n\nIn the forth sample it is impossible to get sand, or lead, or gold, applying the spells.\n\nIn the fifth sample an infinitely large amount of gold can be obtained by using only the second spell, which allows you to receive 1 gram of gold out of nothing. Note that if such a second spell is available, then the first and the third one do not affect the answer at all.\n\nThe seventh sample is more interesting. We can also start with a zero amount of sand there. With the aid of the third spell you can get sand out of nothing. We get 10000 grams of sand in this manner. Let's get 100 grams of lead using the first spell 100 times. Then make 1 gram of gold from them. We managed to receive 1 gram of gold, starting with a zero amount of sand! Clearly, in this manner you can get an infinitely large amount of gold.", "testcase": ["100 200 250 150 200 248", "100 50 52 200 200 100", "100 201 250 150 200 249", "100 49 50 199 200 100", "100 10 202 20 300 30", "100 0 100 1 1 1", "1 0 1 1 2 2", "100 10 200 20 301 31", "1 1 1 1 2 1", "1 0 1 2 2 1"], "output": ["Ron\n", "Hermione\n", "Hermione\n", "Ron\n", "Hermione\n", "Hermione\n", "Ron\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "675_A. Infinite Sequence", "description": "Vasya likes everything infinite. Now he is studying the properties of a sequence s, such that its first element is equal to a (s1 = a), and the difference between any two neighbouring elements is equal to c (si - si - 1 = c). In particular, Vasya wonders if his favourite integer b appears in this sequence, that is, there exists a positive integer i, such that si = b. Of course, you are the person he asks for a help.\n\nInput\n\nThe first line of the input contain three integers a, b and c ( - 109 ≤ a, b, c ≤ 109) — the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.\n\nOutput\n\nIf b appears in the sequence s print \"YES\" (without quotes), otherwise print \"NO\" (without quotes).\n\nExamples\n\nInput\n\n1 7 3\n\n\nOutput\n\nYES\n\n\nInput\n\n10 10 0\n\n\nOutput\n\nYES\n\n\nInput\n\n1 -4 5\n\n\nOutput\n\nNO\n\n\nInput\n\n0 60 50\n\n\nOutput\n\nNO\n\nNote\n\nIn the first sample, the sequence starts from integers 1, 4, 7, so 7 is its element.\n\nIn the second sample, the favorite integer of Vasya is equal to the first element of the sequence.\n\nIn the third sample all elements of the sequence are greater than Vasya's favorite integer.\n\nIn the fourth sample, the sequence starts from 0, 50, 100, and all the following elements are greater than Vasya's favorite integer.", "testcase": ["0 61 50", "1 -3 5", "1 8 3", "10 10 1", "0 61 50", "1 6 3", "10 11 0", "1 7 4", "0 60 49", "0 60 49"], "output": ["NO\n", "YES\n", "NO\n", "YES\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "680_A. Bear and Five Cards", "description": "A little bear Limak plays a game. He has five cards. There is one number written on each card. Each number is a positive integer.\n\nLimak can discard (throw out) some cards. His goal is to minimize the sum of numbers written on remaining (not discarded) cards.\n\nHe is allowed to at most once discard two or three cards with the same number. Of course, he won't discard cards if it's impossible to choose two or three cards with the same number.\n\nGiven five numbers written on cards, cay you find the minimum sum of numbers on remaining cards?\n\nInput\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 ≤ ti ≤ 100) — numbers written on cards.\n\nOutput\n\nPrint the minimum possible sum of numbers written on remaining cards.\n\nExamples\n\nInput\n\n7 3 7 3 20\n\n\nOutput\n\n26\n\n\nInput\n\n7 9 3 1 8\n\n\nOutput\n\n28\n\n\nInput\n\n10 10 10 10 10\n\n\nOutput\n\n20\n\nNote\n\nIn the first sample, Limak has cards with numbers 7, 3, 7, 3 and 20. Limak can do one of the following.\n\n  * Do nothing and the sum would be 7 + 3 + 7 + 3 + 20 = 40. \n  * Remove two cards with a number 7. The remaining sum would be 3 + 3 + 20 = 26. \n  * Remove two cards with a number 3. The remaining sum would be 7 + 7 + 20 = 34. \n\n\n\nYou are asked to minimize the sum so the answer is 26.\n\nIn the second sample, it's impossible to find two or three cards with the same number. Hence, Limak does nothing and the sum is 7 + 9 + 1 + 3 + 8 = 28.\n\nIn the third sample, all cards have the same number. It's optimal to discard any three cards. The sum of two remaining numbers is 10 + 10 = 20.", "testcase": ["7 4 7 2 20", "10 9 10 11 10", "7 9 4 1 9", "10 10 9 10 11", "7 2 7 3 21", "7 3 8 2 20", "7 3 7 2 21", "7 3 7 3 20", "7 9 4 2 8", "7 3 8 4 20"], "output": ["28\n", "26\n", "20\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "680_D. Bear and Tower of Cubes", "description": "Limak is a little polar bear. He plays by building towers from blocks. Every block is a cube with positive integer length of side. Limak has infinitely many blocks of each side length.\n\nA block with side a has volume a3. A tower consisting of blocks with sides a1, a2, ..., ak has the total volume a13 + a23 + ... + ak3.\n\nLimak is going to build a tower. First, he asks you to tell him a positive integer X — the required total volume of the tower. Then, Limak adds new blocks greedily, one by one. Each time he adds the biggest block such that the total volume doesn't exceed X.\n\nLimak asks you to choose X not greater than m. Also, he wants to maximize the number of blocks in the tower at the end (however, he still behaves greedily). Secondarily, he wants to maximize X.\n\nCan you help Limak? Find the maximum number of blocks his tower can have and the maximum X ≤ m that results this number of blocks.\n\nInput\n\nThe only line of the input contains one integer m (1 ≤ m ≤ 1015), meaning that Limak wants you to choose X between 1 and m, inclusive.\n\nOutput\n\nPrint two integers — the maximum number of blocks in the tower and the maximum required total volume X, resulting in the maximum number of blocks.\n\nExamples\n\nInput\n\n48\n\n\nOutput\n\n9 42\n\n\nInput\n\n6\n\n\nOutput\n\n6 6\n\nNote\n\nIn the first sample test, there will be 9 blocks if you choose X = 23 or X = 42. Limak wants to maximize X secondarily so you should choose 42.\n\nIn more detail, after choosing X = 42 the process of building a tower is:\n\n  * Limak takes a block with side 3 because it's the biggest block with volume not greater than 42. The remaining volume is 42 - 27 = 15. \n  * The second added block has side 2, so the remaining volume is 15 - 8 = 7. \n  * Finally, Limak adds 7 blocks with side 1, one by one. \n\n\n\nSo, there are 9 blocks in the tower. The total volume is is 33 + 23 + 7·13 = 27 + 8 + 7 = 42.", "testcase": ["49", "47", "5", "5", "49", "7", "47", "47", "49", "5"], "output": ["6 6\n", "9 42\n"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "688_B. Lovely Palindromes", "description": "Pari has a friend who loves palindrome numbers. A palindrome number is a number that reads the same forward or backward. For example 12321, 100001 and 1 are palindrome numbers, while 112 and 1021 are not.\n\nPari is trying to love them too, but only very special and gifted people can understand the beauty behind palindrome numbers. Pari loves integers with even length (i.e. the numbers with even number of digits), so she tries to see a lot of big palindrome numbers with even length (like a 2-digit 11 or 6-digit 122221), so maybe she could see something in them.\n\nNow Pari asks you to write a program that gets a huge integer n from the input and tells what is the n-th even-length positive palindrome number?\n\nInput\n\nThe only line of the input contains a single integer n (1 ≤ n ≤ 10100 000).\n\nOutput\n\nPrint the n-th even-length palindrome number.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n11\n\n\nInput\n\n10\n\n\nOutput\n\n1001\n\nNote\n\nThe first 10 even-length palindrome numbers are 11, 22, 33, ... , 88, 99 and 1001.", "testcase": ["9", "0", "9", "2", "9", "2", "2", "0", "2", "0"], "output": ["1001\n", "11\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Tonight is brain dinner night and all zombies will gather together to scarf down some delicious brains. The artful Heidi plans to crash the party, incognito, disguised as one of them. Her objective is to get away with at least one brain, so she can analyze the zombies' mindset back home and gain a strategic advantage.\n\nThey will be N guests tonight: N - 1 real zombies and a fake one, our Heidi. The living-dead love hierarchies as much as they love brains: each one has a unique rank in the range 1 to N - 1, and Heidi, who still appears slightly different from the others, is attributed the highest rank, N. Tonight there will be a chest with brains on display and every attendee sees how many there are. These will then be split among the attendees according to the following procedure:\n\nThe zombie of the highest rank makes a suggestion on who gets how many brains (every brain is an indivisible entity). A vote follows. If at least half of the attendees accept the offer, the brains are shared in the suggested way and the feast begins. But if majority is not reached, then the highest-ranked zombie is killed, and the next zombie in hierarchy has to make a suggestion. If he is killed too, then the third highest-ranked makes one, etc. (It's enough to have exactly half of the votes – in case of a tie, the vote of the highest-ranked alive zombie counts twice, and he will of course vote in favor of his own suggestion in order to stay alive.)\n\nYou should know that zombies are very greedy and sly, and they know this too – basically all zombie brains are alike. Consequently, a zombie will never accept an offer which is suboptimal for him. That is, if an offer is not strictly better than a potential later offer, he will vote against it. And make no mistake: while zombies may normally seem rather dull, tonight their intellects are perfect. Each zombie's priorities for tonight are, in descending order: \n\n  1. survive the event (they experienced death already once and know it is no fun), \n  2. get as many brains as possible. \n\n\n\nHeidi goes first and must make an offer which at least half of the attendees will accept, and which allocates at least one brain for Heidi herself.\n\nWhat is the smallest number of brains that have to be in the chest for this to be possible?\n\nInput\n\nThe only line of input contains one integer: N, the number of attendees (1 ≤ N ≤ 109).\n\nOutput\n\nOutput one integer: the smallest number of brains in the chest which allows Heidi to take one brain home.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n1\n\n\nInput\n\n4\n\n\nOutput\n\n2\n\nNote", "testcase": ["3", "3", "2", "3", "0", "2", "3", "3", "2", "5"], "output": ["1\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "690_F1. Tree of Life (easy)", "description": "Heidi has finally found the mythical Tree of Life – a legendary combinatorial structure which is said to contain a prophecy crucially needed to defeat the undead armies.\n\nOn the surface, the Tree of Life is just a regular undirected tree well-known from computer science. This means that it is a collection of n points (called vertices), some of which are connected using n - 1 line segments (edges) so that each pair of vertices is connected by a path (a sequence of one or more edges).\n\nTo decipher the prophecy, Heidi needs to perform a number of steps. The first is counting the number of lifelines in the tree – these are paths of length 2, i.e., consisting of two edges. Help her!\n\nInput\n\nThe first line of the input contains a single integer n – the number of vertices in the tree (1 ≤ n ≤ 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b – the labels of the vertices connected by the edge (1 ≤ a < b ≤ n). It is guaranteed that the input represents a tree.\n\nOutput\n\nPrint one integer – the number of lifelines in the tree.\n\nExamples\n\nInput\n\n4\n1 2\n1 3\n1 4\n\n\nOutput\n\n3\n\nInput\n\n5\n1 2\n2 3\n3 4\n3 5\n\n\nOutput\n\n4\n\nNote\n\nIn the second sample, there are four lifelines: paths between vertices 1 and 3, 2 and 4, 2 and 5, and 4 and 5.", "testcase": ["5\n1 3\n2 3\n2 4\n3 4", "4\n1 0\n1 3\n2 4", "4\n1 3\n2 3\n2 4", "5\n0 2\n1 3\n3 4\n3 4", "4\n1 2\n1 4\n1 4", "5\n1 2\n2 3\n3 4\n2 7", "5\n2 2\n2 2\n3 4\n2 5", "5\n1 2\n3 5\n3 4\n3 5", "5\n0 2\n2 3\n3 4\n3 5", "5\n0 2\n2 4\n3 4\n3 6"], "output": ["3\n", "4\n"], "difficulty": 12, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "699_C. Vacations", "description": "Vasya has n days of vacations! So he decided to improve his IT skills and do sport. Vasya knows the following information about each of this n days: whether that gym opened and whether a contest was carried out in the Internet on that day. For the i-th day there are four options:\n\n  1. on this day the gym is closed and the contest is not carried out; \n  2. on this day the gym is closed and the contest is carried out; \n  3. on this day the gym is open and the contest is not carried out; \n  4. on this day the gym is open and the contest is carried out. \n\n\n\nOn each of days Vasya can either have a rest or write the contest (if it is carried out on this day), or do sport (if the gym is open on this day).\n\nFind the minimum number of days on which Vasya will have a rest (it means, he will not do sport and write the contest at the same time). The only limitation that Vasya has — he does not want to do the same activity on two consecutive days: it means, he will not do sport on two consecutive days, and write the contest on two consecutive days.\n\nInput\n\nThe first line contains a positive integer n (1 ≤ n ≤ 100) — the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 ≤ ai ≤ 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.\n\nOutput\n\nPrint the minimum possible number of days on which Vasya will have a rest. Remember that Vasya refuses:\n\n  * to do sport on any two consecutive days, \n  * to write the contest on any two consecutive days. \n\nExamples\n\nInput\n\n4\n1 3 2 0\n\n\nOutput\n\n2\n\n\nInput\n\n7\n1 3 3 2 1 2 3\n\n\nOutput\n\n0\n\n\nInput\n\n2\n2 2\n\n\nOutput\n\n1\n\nNote\n\nIn the first test Vasya can write the contest on the day number 1 and do sport on the day number 3. Thus, he will have a rest for only 2 days.\n\nIn the second test Vasya should write contests on days number 1, 3, 5 and 7, in other days do sport. Thus, he will not have a rest for a single day.\n\nIn the third test Vasya can do sport either on a day number 1 or number 2. He can not do sport in two days, because it will be contrary to the his limitation. Thus, he will have a rest for only one day.", "testcase": ["7\n2 3 3 2 1 3 4", "2\n1 2", "2\n2 1", "2\n3 2", "2\n2 3", "7\n1 3 2 1 1 2 2", "4\n1 2 2 1", "2\n2 3", "2\n3 2", "7\n2 4 3 2 1 2 2"], "output": ["2\n", "0\n", "1\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "709_D. Recover the String", "description": "For each string s consisting of characters '0' and '1' one can define four integers a00, a01, a10 and a11, where axy is the number of subsequences of length 2 of the string s equal to the sequence {x, y}. \n\nIn these problem you are given four integers a00, a01, a10, a11 and have to find any non-empty string s that matches them, or determine that there is no such string. One can prove that if at least one answer exists, there exists an answer of length no more than 1 000 000.\n\nInput\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.\n\nOutput\n\nIf there exists a non-empty string that matches four integers from the input, print it in the only line of the output. Otherwise, print \"Impossible\". The length of your answer must not exceed 1 000 000.\n\nExamples\n\nInput\n\n1 2 3 4\n\n\nOutput\n\nImpossible\n\n\nInput\n\n1 2 2 1\n\n\nOutput\n\n0110", "testcase": ["1 2 2 3", "1 2 1 4", "1 1 3 3", "1 2 2 1", "1 2 4 5", "1 4 3 4", "1 3 2 2", "1 2 1 2", "1 3 3 1", "1 2 2 3"], "output": ["Impossible", "0110"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "710_E. Generate a String", "description": "zscoder wants to generate an input file for some programming competition problem.\n\nHis input is a string consisting of n letters 'a'. He is too lazy to write a generator so he will manually generate the input in a text editor.\n\nInitially, the text editor is empty. It takes him x seconds to insert or delete a letter 'a' from the text file and y seconds to copy the contents of the entire text file, and duplicate it.\n\nzscoder wants to find the minimum amount of time needed for him to create the input file of exactly n letters 'a'. Help him to determine the amount of time needed to generate the input.\n\nInput\n\nThe only line contains three integers n, x and y (1 ≤ n ≤ 107, 1 ≤ x, y ≤ 109) — the number of letters 'a' in the input file and the parameters from the problem statement.\n\nOutput\n\nPrint the only integer t — the minimum amount of time needed to generate the input file.\n\nExamples\n\nInput\n\n8 1 1\n\n\nOutput\n\n4\n\n\nInput\n\n8 1 10\n\n\nOutput\n\n8", "testcase": ["8 1 11", "8 2 1", "8 1 0", "8 1 0", "8 0 10", "8 2 10", "8 1 0", "8 1 11", "8 0 10", "8 2 10"], "output": ["8", "4"], "difficulty": 11, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "716_D. Complete The Graph", "description": "ZS the Coder has drawn an undirected graph of n vertices numbered from 0 to n - 1 and m edges between them. Each edge of the graph is weighted, each weight is a positive integer.\n\nThe next day, ZS the Coder realized that some of the weights were erased! So he wants to reassign positive integer weight to each of the edges which weights were erased, so that the length of the shortest path between vertices s and t in the resulting graph is exactly L. Can you help him?\n\nInput\n\nThe first line contains five integers n, m, L, s, t (2 ≤ n ≤ 1000, 1 ≤ m ≤ 10 000, 1 ≤ L ≤ 109, 0 ≤ s, t ≤ n - 1, s ≠ t) — the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 ≤ ui, vi ≤ n - 1, ui ≠ vi, 0 ≤ wi ≤ 109). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.\n\nOutput\n\nPrint \"NO\" (without quotes) in the only line if it's not possible to assign the weights in a required way.\n\nOtherwise, print \"YES\" in the first line. Next m lines should contain the edges of the resulting graph, with weights assigned to edges which weights were erased. i-th of them should contain three integers ui, vi and wi, denoting an edge between vertices ui and vi of weight wi. The edges of the new graph must coincide with the ones in the graph from the input. The weights that were not erased must remain unchanged whereas the new weights can be any positive integer not exceeding 1018. \n\nThe order of the edges in the output doesn't matter. The length of the shortest path between s and t must be equal to L.\n\nIf there are multiple solutions, print any of them.\n\nExamples\n\nInput\n\n5 5 13 0 4\n0 1 5\n2 1 2\n3 2 3\n1 4 0\n4 3 4\n\n\nOutput\n\nYES\n0 1 5\n2 1 2\n3 2 3\n1 4 8\n4 3 4\n\n\nInput\n\n2 1 123456789 0 1\n0 1 0\n\n\nOutput\n\nYES\n0 1 123456789\n\n\nInput\n\n2 1 999999999 1 0\n0 1 1000000000\n\n\nOutput\n\nNO\n\nNote\n\nHere's how the graph in the first sample case looks like :\n\n<image>\n\nIn the first sample case, there is only one missing edge weight. Placing the weight of 8 gives a shortest path from 0 to 4 of length 13.\n\nIn the second sample case, there is only a single edge. Clearly, the only way is to replace the missing weight with 123456789.\n\nIn the last sample case, there is no weights to assign but the length of the shortest path doesn't match the required value, so the answer is \"NO\".", "testcase": ["2 1 1000000000 2 0\n0 1 999999999", "5 5 13 0 4\n1 0 5\n3 1 2\n2 2 3\n1 5 0\n4 3 3", "2 1 999999999 0 0\n-1 2 1000000000", "2 1 123456789 -1 0\n0 1 1", "2 1 123456788 -1 1\n0 0 0", "5 5 14 0 3\n0 1 5\n3 2 2\n4 2 3\n1 3 0\n4 3 4", "2 2 999999999 2 0\n0 1 1000000001", "2 1 1000000000 1 -1\n0 1 999999999", "5 5 12 0 4\n0 1 5\n2 1 1\n3 2 3\n1 4 1\n4 3 5", "5 5 13 0 4\n1 1 5\n1 1 1\n2 2 3\n1 4 0\n5 3 3"], "output": ["YES\n0 1 5\n2 1 2\n3 2 3\n1 4 8\n4 3 4\n", "YES\n0 1 123456789\n", "NO"], "difficulty": 10, "time_limit": {"seconds": 4, "nanos": 0}}
{"name": "727_A. Transformation: from A to B", "description": "Vasily has a number a, which he wants to turn into a number b. For this purpose, he can do two types of operations:\n\n  * multiply the current number by 2 (that is, replace the number x by 2·x); \n  * append the digit 1 to the right of current number (that is, replace the number x by 10·x + 1). \n\n\n\nYou need to help Vasily to transform the number a into the number b using only the operations described above, or find that it is impossible.\n\nNote that in this task you are not required to minimize the number of operations. It suffices to find any way to transform a into b.\n\nInput\n\nThe first line contains two positive integers a and b (1 ≤ a < b ≤ 109) — the number which Vasily has and the number he wants to have.\n\nOutput\n\nIf there is no way to get b from a, print \"NO\" (without quotes).\n\nOtherwise print three lines. On the first line print \"YES\" (without quotes). The second line should contain single integer k — the length of the transformation sequence. On the third line print the sequence of transformations x1, x2, ..., xk, where:\n\n  * x1 should be equal to a, \n  * xk should be equal to b, \n  * xi should be obtained from xi - 1 using any of two described operations (1 < i ≤ k). \n\n\n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n2 162\n\n\nOutput\n\nYES\n5\n2 4 8 81 162 \n\n\nInput\n\n4 42\n\n\nOutput\n\nNO\n\n\nInput\n\n100 40021\n\n\nOutput\n\nYES\n5\n100 200 2001 4002 40021 ", "testcase": ["4 41", "2 161", "2 163", "2 163", "4 41", "4 41", "4 41", "2 163", "2 163", "100 40022"], "output": ["NO\n", "YES\n5\n2 4 8 81 162 \n", "YES\n5\n100 200 2001 4002 40021 \n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "730_G. Car Repair Shop", "description": "Polycarp starts his own business. Tomorrow will be the first working day of his car repair shop. For now the car repair shop is very small and only one car can be repaired at a given time.\n\nPolycarp is good at marketing, so he has already collected n requests from clients. The requests are numbered from 1 to n in order they came.\n\nThe i-th request is characterized by two values: si — the day when a client wants to start the repair of his car, di — duration (in days) to repair the car. The days are enumerated from 1, the first day is tomorrow, the second day is the day after tomorrow and so on.\n\nPolycarp is making schedule by processing requests in the order from the first to the n-th request. He schedules the i-th request as follows:\n\n  * If the car repair shop is idle for di days starting from si (si, si + 1, ..., si + di - 1), then these days are used to repair a car of the i-th client. \n  * Otherwise, Polycarp finds the first day x (from 1 and further) that there are di subsequent days when no repair is scheduled starting from x. In other words he chooses the smallest positive x that all days x, x + 1, ..., x + di - 1 are not scheduled for repair of any car. So, the car of the i-th client will be repaired in the range [x, x + di - 1]. It is possible that the day x when repair is scheduled to start will be less than si. \n\n\n\nGiven n requests, you are asked to help Polycarp schedule all of them according to the rules above.\n\nInput\n\nThe first line contains integer n (1 ≤ n ≤ 200) — the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 ≤ si ≤ 109, 1 ≤ di ≤ 5·106), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.\n\nOutput\n\nPrint n lines. The i-th line should contain two integers — the start day to repair the i-th car and the finish day to repair the i-th car.\n\nExamples\n\nInput\n\n3\n9 2\n7 3\n2 4\n\n\nOutput\n\n9 10\n1 3\n4 7\n\n\nInput\n\n4\n1000000000 1000000\n1000000000 1000000\n100000000 1000000\n1000000000 1000000\n\n\nOutput\n\n1000000000 1000999999\n1 1000000\n100000000 100999999\n1000001 2000000", "testcase": ["4\n1000000000 1000000\n1000000000 1000001\n100000000 999998\n1000000000 1000000", "4\n1000000000 1000000\n1000000000 1000000\n100000001 1000001\n999999999 1000000", "4\n1000000000 1000000\n1000000000 1000000\n99999999 1000000\n999999999 999999", "3\n8 2\n7 2\n1 4", "4\n1000000000 1000000\n999999999 1000000\n100000000 1000000\n1000000000 1000000", "3\n10 2\n7 3\n1 5", "3\n10 2\n7 4\n3 4", "3\n9 2\n7 4\n1 3", "3\n9 3\n7 3\n2 6", "3\n8 2\n7 4\n2 5"], "output": ["1000000000 1000999999\n1 1000000\n100000000 100999999\n1000001 2000000\n", "9 10\n1 3\n4 7\n"], "difficulty": 13, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "733_A. Grasshopper And the String", "description": "One day, the Grasshopper was jumping on the lawn and found a piece of paper with a string. Grasshopper became interested what is the minimum jump ability he should have in order to be able to reach the far end of the string, jumping only on vowels of the English alphabet. Jump ability is the maximum possible length of his jump. \n\nFormally, consider that at the begginning the Grasshopper is located directly in front of the leftmost character of the string. His goal is to reach the position right after the rightmost character of the string. In one jump the Grasshopper could jump to the right any distance from 1 to the value of his jump ability.\n\n<image> The picture corresponds to the first example.\n\nThe following letters are vowels: 'A', 'E', 'I', 'O', 'U' and 'Y'.\n\nInput\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100. \n\nOutput\n\nPrint single integer a — the minimum jump ability of the Grasshopper (in the number of symbols) that is needed to overcome the given string, jumping only on vowels.\n\nExamples\n\nInput\n\nABABBBACFEYUKOTT\n\n\nOutput\n\n4\n\nInput\n\nAAA\n\n\nOutput\n\n1", "testcase": ["ABABBBACFEYUKOTG", "ABABSBACFEYUKOTT", "ABABBMACFEYUKOTT", "ABABBBACFEYUKOTK", "JBABBBACFEYUKOTT", "AAW", "ABABBBACFEYUKWTT", "ANA", "ABABFBACFEYUKOTT", "AAT"], "output": ["4\n", "1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "736_B. Taxes", "description": "Mr. Funt now lives in a country with a very specific tax laws. The total income of mr. Funt during this year is equal to n (n ≥ 2) burles and the amount of tax he has to pay is calculated as the maximum divisor of n (not equal to n, of course). For example, if n = 6 then Funt has to pay 3 burles, while for n = 25 he needs to pay 5 and if n = 2 he pays only 1 burle.\n\nAs mr. Funt is a very opportunistic person he wants to cheat a bit. In particular, he wants to split the initial n in several parts n1 + n2 + ... + nk = n (here k is arbitrary, even k = 1 is allowed) and pay the taxes for each part separately. He can't make some part equal to 1 because it will reveal him. So, the condition ni ≥ 2 should hold for all i from 1 to k.\n\nOstap Bender wonders, how many money Funt has to pay (i.e. minimal) if he chooses and optimal way to split n in parts.\n\nInput\n\nThe first line of the input contains a single integer n (2 ≤ n ≤ 2·109) — the total year income of mr. Funt.\n\nOutput\n\nPrint one integer — minimum possible number of burles that mr. Funt has to pay as a tax.\n\nExamples\n\nInput\n\n4\n\n\nOutput\n\n2\n\n\nInput\n\n27\n\n\nOutput\n\n3", "testcase": ["3", "28", "3", "26", "26", "28", "28", "5", "5", "28"], "output": ["3\n", "2\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "There exists an island called Arpa’s land, some beautiful girls live there, as ugly ones do.\n\nMehrdad wants to become minister of Arpa’s land. Arpa has prepared an exam. Exam has only one question, given n, print the last digit of 1378n. \n\n<image>\n\nMehrdad has become quite confused and wants you to help him. Please help, although it's a naive cheat.\n\nInput\n\nThe single line of input contains one integer n (0 ≤ n ≤ 109).\n\nOutput\n\nPrint single integer — the last digit of 1378n.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n8\n\nInput\n\n2\n\n\nOutput\n\n4\n\nNote\n\nIn the first example, last digit of 13781 = 1378 is 8.\n\nIn the second example, last digit of 13782 = 1378·1378 = 1898884 is 4.", "testcase": ["0", "1", "1", "2", "0", "2", "3", "3", "2", "1"], "output": ["4\n", "8\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "746_A. Compote", "description": "Nikolay has a lemons, b apples and c pears. He decided to cook a compote. According to the recipe the fruits should be in the ratio 1: 2: 4. It means that for each lemon in the compote should be exactly 2 apples and exactly 4 pears. You can't crumble up, break up or cut these fruits into pieces. These fruits — lemons, apples and pears — should be put in the compote as whole fruits.\n\nYour task is to determine the maximum total number of lemons, apples and pears from which Nikolay can cook the compote. It is possible that Nikolay can't use any fruits, in this case print 0. \n\nInput\n\nThe first line contains the positive integer a (1 ≤ a ≤ 1000) — the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 ≤ b ≤ 1000) — the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 ≤ c ≤ 1000) — the number of pears Nikolay has.\n\nOutput\n\nPrint the maximum total number of lemons, apples and pears from which Nikolay can cook the compote.\n\nExamples\n\nInput\n\n2\n5\n7\n\n\nOutput\n\n7\n\n\nInput\n\n4\n7\n13\n\n\nOutput\n\n21\n\n\nInput\n\n2\n3\n2\n\n\nOutput\n\n0\n\nNote\n\nIn the first example Nikolay can use 1 lemon, 2 apples and 4 pears, so the answer is 1 + 2 + 4 = 7.\n\nIn the second example Nikolay can use 3 lemons, 6 apples and 12 pears, so the answer is 3 + 6 + 12 = 21.\n\nIn the third example Nikolay don't have enough pears to cook any compote, so the answer is 0. ", "testcase": ["2\n3\n1", "2\n5\n6", "4\n6\n13", "2\n4\n2", "2\n3\n1", "4\n7\n14", "4\n8\n13", "4\n8\n13", "2\n5\n6", "2\n4\n2"], "output": ["7", "21", "0"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "74_C. Chessboard Billiard", "description": "Let's imagine: there is a chess piece billiard ball. Its movements resemble the ones of a bishop chess piece. The only difference is that when a billiard ball hits the board's border, it can reflect from it and continue moving.\n\nMore formally, first one of four diagonal directions is chosen and the billiard ball moves in that direction. When it reaches the square located on the board's edge, the billiard ball reflects from it; it changes the direction of its movement by 90 degrees and continues moving. Specifically, having reached a corner square, the billiard ball is reflected twice and starts to move the opposite way. While it moves, the billiard ball can make an infinite number of reflections. At any square of its trajectory the billiard ball can stop and on that the move is considered completed.\n\n<image>\n\nIt is considered that one billiard ball a beats another billiard ball b if a can reach a point where b is located.\n\nYou are suggested to find the maximal number of billiard balls, that pairwise do not beat each other and that can be positioned on a chessboard n × m in size.\n\nInput\n\nThe first line contains two integers n and m (2 ≤ n, m ≤ 106).\n\nOutput\n\nPrint a single number, the maximum possible number of billiard balls that do not pairwise beat each other.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in C++. It is preferred to use cin (also you may use the %I64d specificator).\n\nExamples\n\nInput\n\n3 4\n\n\nOutput\n\n2\n\nInput\n\n3 3\n\n\nOutput\n\n3", "testcase": ["3 3", "3 3", "3 5", "3 3", "3 2", "3 5", "3 4", "3 4", "3 3", "3 5"], "output": ["2\n", "3\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "758_A. Holiday Of Equality", "description": "In Berland it is the holiday of equality. In honor of the holiday the king decided to equalize the welfare of all citizens in Berland by the expense of the state treasury. \n\nTotally in Berland there are n citizens, the welfare of each of them is estimated as the integer in ai burles (burle is the currency in Berland).\n\nYou are the royal treasurer, which needs to count the minimum charges of the kingdom on the king's present. The king can only give money, he hasn't a power to take away them. \n\nInput\n\nThe first line contains the integer n (1 ≤ n ≤ 100) — the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 ≤ ai ≤ 106) — the welfare of the i-th citizen.\n\nOutput\n\nIn the only line print the integer S — the minimum number of burles which are had to spend.\n\nExamples\n\nInput\n\n5\n0 1 2 3 4\n\n\nOutput\n\n10\n\nInput\n\n5\n1 1 0 1 1\n\n\nOutput\n\n1\n\nInput\n\n3\n1 3 1\n\n\nOutput\n\n4\n\nInput\n\n1\n12\n\n\nOutput\n\n0\n\nNote\n\nIn the first example if we add to the first citizen 4 burles, to the second 3, to the third 2 and to the fourth 1, then the welfare of all citizens will equal 4.\n\nIn the second example it is enough to give one burle to the third citizen. \n\nIn the third example it is necessary to give two burles to the first and the third citizens to make the welfare of citizens equal 3.\n\nIn the fourth example it is possible to give nothing to everyone because all citizens have 12 burles.", "testcase": ["3\n1 3 1", "3\n0 4 1", "1\n11", "5\n0 1 2 5 4", "5\n0 1 -1 1 1", "5\n1 1 0 1 1", "5\n0 1 1 4 4", "5\n0 1 2 4 5", "1\n11", "5\n1 1 0 1 1"], "output": ["0\n", "10\n", "4\n", "1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "760_B. Frodo and pillows", "description": "n hobbits are planning to spend the night at Frodo's house. Frodo has n beds standing in a row and m pillows (n ≤ m). Each hobbit needs a bed and at least one pillow to sleep, however, everyone wants as many pillows as possible. Of course, it's not always possible to share pillows equally, but any hobbit gets hurt if he has at least two pillows less than some of his neighbors have. \n\nFrodo will sleep on the k-th bed in the row. What is the maximum number of pillows he can have so that every hobbit has at least one pillow, every pillow is given to some hobbit and no one is hurt?\n\nInput\n\nThe only line contain three integers n, m and k (1 ≤ n ≤ m ≤ 109, 1 ≤ k ≤ n) — the number of hobbits, the number of pillows and the number of Frodo's bed.\n\nOutput\n\nPrint single integer — the maximum number of pillows Frodo can have so that no one is hurt.\n\nExamples\n\nInput\n\n4 6 2\n\n\nOutput\n\n2\n\n\nInput\n\n3 10 3\n\n\nOutput\n\n4\n\n\nInput\n\n3 6 1\n\n\nOutput\n\n3\n\nNote\n\nIn the first example Frodo can have at most two pillows. In this case, he can give two pillows to the hobbit on the first bed, and one pillow to each of the hobbits on the third and the fourth beds.\n\nIn the second example Frodo can take at most four pillows, giving three pillows to each of the others.\n\nIn the third example Frodo can take three pillows, giving two pillows to the hobbit in the middle and one pillow to the hobbit on the third bed.", "testcase": ["3 6 0", "3 7 1", "4 7 2", "3 10 4", "3 5 1", "4 5 2", "3 9 3", "3 7 1", "3 10 2", "3 10 4"], "output": ["4\n", "3\n", "2\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "766_B. Mahmoud and a Triangle", "description": "Mahmoud has n line segments, the i-th of them has length ai. Ehab challenged him to use exactly 3 line segments to form a non-degenerate triangle. Mahmoud doesn't accept challenges unless he is sure he can win, so he asked you to tell him if he should accept the challenge. Given the lengths of the line segments, check if he can choose exactly 3 of them to form a non-degenerate triangle.\n\nMahmoud should use exactly 3 line segments, he can't concatenate two line segments or change any length. A non-degenerate triangle is a triangle with positive area.\n\nInput\n\nThe first line contains single integer n (3 ≤ n ≤ 105) — the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 ≤ ai ≤ 109) — the lengths of line segments Mahmoud has.\n\nOutput\n\nIn the only line print \"YES\" if he can choose exactly three line segments and form a non-degenerate triangle with them, and \"NO\" otherwise.\n\nExamples\n\nInput\n\n5\n1 5 3 2 4\n\n\nOutput\n\nYES\n\n\nInput\n\n3\n4 1 2\n\n\nOutput\n\nNO\n\nNote\n\nFor the first example, he can use line segments with lengths 2, 4 and 5 to form a non-degenerate triangle.", "testcase": ["3\n5 2 2", "3\n3 2 2", "3\n5 1 3", "5\n1 5 2 3 4", "3\n2 1 2", "3\n6 1 2", "5\n1 5 3 1 5", "5\n1 5 3 1 5", "5\n1 6 3 3 4", "3\n3 2 2"], "output": ["YES\n", "NO\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "784_D. Touchy-Feely Palindromes", "description": "\n\nInput\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.\n\nOutput\n\nOutput \"Yes\" or \"No\".\n\nExamples\n\nInput\n\n373\n\n\nOutput\n\nYes\n\n\nInput\n\n121\n\n\nOutput\n\nNo\n\n\nInput\n\n436\n\n\nOutput\n\nYes", "testcase": ["372", "435", "374", "120", "374", "437", "437", "437", "120", "122"], "output": ["YES", "NO", "YES"], "difficulty": 10, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "791_A. Bear and Big Brother", "description": "Bear Limak wants to become the largest of bears, or at least to become larger than his brother Bob.\n\nRight now, Limak and Bob weigh a and b respectively. It's guaranteed that Limak's weight is smaller than or equal to his brother's weight.\n\nLimak eats a lot and his weight is tripled after every year, while Bob's weight is doubled after every year.\n\nAfter how many full years will Limak become strictly larger (strictly heavier) than Bob?\n\nInput\n\nThe only line of the input contains two integers a and b (1 ≤ a ≤ b ≤ 10) — the weight of Limak and the weight of Bob respectively.\n\nOutput\n\nPrint one integer, denoting the integer number of years after which Limak will become strictly larger than Bob.\n\nExamples\n\nInput\n\n4 7\n\n\nOutput\n\n2\n\n\nInput\n\n4 9\n\n\nOutput\n\n3\n\n\nInput\n\n1 1\n\n\nOutput\n\n1\n\nNote\n\nIn the first sample, Limak weighs 4 and Bob weighs 7 initially. After one year their weights are 4·3 = 12 and 7·2 = 14 respectively (one weight is tripled while the other one is doubled). Limak isn't larger than Bob yet. After the second year weights are 36 and 28, so the first weight is greater than the second one. Limak became larger than Bob after two years so you should print 2.\n\nIn the second sample, Limak's and Bob's weights in next years are: 12 and 18, then 36 and 36, and finally 108 and 72 (after three years). The answer is 3. Remember that Limak wants to be larger than Bob and he won't be satisfied with equal weights.\n\nIn the third sample, Limak becomes larger than Bob after the first year. Their weights will be 3 and 2 then.", "testcase": ["4 8", "1 0", "4 8", "4 8", "4 10", "4 6", "4 10", "4 6", "1 0", "4 6"], "output": ["3\n", "1\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "797_A. k-Factorization", "description": "Given a positive integer n, find k integers (not necessary distinct) such that all these integers are strictly greater than 1, and their product is equal to n.\n\nInput\n\nThe first line contains two integers n and k (2 ≤ n ≤ 100000, 1 ≤ k ≤ 20).\n\nOutput\n\nIf it's impossible to find the representation of n as a product of k numbers, print -1.\n\nOtherwise, print k integers in any order. Their product must be equal to n. If there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n100000 2\n\n\nOutput\n\n2 50000 \n\n\nInput\n\n100000 20\n\n\nOutput\n\n-1\n\n\nInput\n\n1024 5\n\n\nOutput\n\n2 64 2 2 2 ", "testcase": ["1024 4", "1024 6", "100000 19", "1024 6", "1024 4", "100000 21", "1024 4", "100000 19", "100000 3", "100000 3"], "output": ["2 2 2 2 64\n", "2 50000\n", "-1\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "798_A. Mike and palindrome", "description": "Mike has a string s consisting of only lowercase English letters. He wants to change exactly one character from the string so that the resulting one is a palindrome. \n\nA palindrome is a string that reads the same backward as forward, for example strings \"z\", \"aaa\", \"aba\", \"abccba\" are palindromes, but strings \"codeforces\", \"reality\", \"ab\" are not.\n\nInput\n\nThe first and single line contains string s (1 ≤ |s| ≤ 15).\n\nOutput\n\nPrint \"YES\" (without quotes) if Mike can change exactly one character so that the resulting string is palindrome or \"NO\" (without quotes) otherwise. \n\nExamples\n\nInput\n\nabccaa\n\n\nOutput\n\nYES\n\n\nInput\n\nabbcca\n\n\nOutput\n\nNO\n\n\nInput\n\nabcda\n\n\nOutput\n\nYES", "testcase": ["mbcda", "abcdf", "abccpa", "ibccaa", "fbccaa", "abcdi", "abpcca", "abwcaa", "abbzca", "abccua"], "output": ["NO\n", "YES\n", "YES\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "804_A. Find Amir", "description": "A few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends.\n\nThere are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs <image> and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of schools.\n\nOutput\n\nPrint single integer: the minimum cost of tickets needed to visit all schools.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n0\n\n\nInput\n\n10\n\n\nOutput\n\n4\n\nNote\n\nIn the first example we can buy a ticket between the schools that costs <image>.", "testcase": ["3", "3", "3", "1", "11", "9", "9", "3", "9", "11"], "output": ["4\n", "0\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "805_A. Fake NP", "description": "Tavak and Seyyed are good friends. Seyyed is very funny and he told Tavak to solve the following problem instead of longest-path.\n\nYou are given l and r. For all integers from l to r, inclusive, we wrote down all of their integer divisors except 1. Find the integer that we wrote down the maximum number of times.\n\nSolve the problem to show that it's not a NP problem.\n\nInput\n\nThe first line contains two integers l and r (2 ≤ l ≤ r ≤ 109).\n\nOutput\n\nPrint single integer, the integer that appears maximum number of times in the divisors. \n\nIf there are multiple answers, print any of them.\n\nExamples\n\nInput\n\n19 29\n\n\nOutput\n\n2\n\n\nInput\n\n3 6\n\n\nOutput\n\n3\n\nNote\n\nDefinition of a divisor: <https://www.mathsisfun.com/definitions/divisor-of-an-integer-.html>\n\nThe first example: from 19 to 29 these numbers are divisible by 2: {20, 22, 24, 26, 28}.\n\nThe second example: from 3 to 6 these numbers are divisible by 3: {3, 6}.", "testcase": ["3 7", "3 5", "19 30", "19 28", "19 30", "3 5", "19 30", "3 5", "3 7", "19 28"], "output": ["2\n", "2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "805_C. Find Amir", "description": "A few years ago Sajjad left his school and register to another one due to security reasons. Now he wishes to find Amir, one of his schoolmates and good friends.\n\nThere are n schools numerated from 1 to n. One can travel between each pair of them, to do so, he needs to buy a ticket. The ticker between schools i and j costs <image> and can be used multiple times. Help Sajjad to find the minimum cost he needs to pay for tickets to visit all schools. He can start and finish in any school.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 105) — the number of schools.\n\nOutput\n\nPrint single integer: the minimum cost of tickets needed to visit all schools.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n0\n\n\nInput\n\n10\n\n\nOutput\n\n4\n\nNote\n\nIn the first example we can buy a ticket between the schools that costs <image>.", "testcase": ["3", "9", "1", "9", "11", "11", "3", "1", "11", "3"], "output": ["4", "0"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "822_A. I'm bored with life", "description": "Holidays have finished. Thanks to the help of the hacker Leha, Noora managed to enter the university of her dreams which is located in a town Pavlopolis. It's well known that universities provide students with dormitory for the period of university studies. Consequently Noora had to leave Vičkopolis and move to Pavlopolis. Thus Leha was left completely alone in a quiet town Vičkopolis. He almost even fell into a depression from boredom!\n\nLeha came up with a task for himself to relax a little. He chooses two integers A and B and then calculates the greatest common divisor of integers \"A factorial\" and \"B factorial\". Formally the hacker wants to find out GCD(A!, B!). It's well known that the factorial of an integer x is a product of all positive integers less than or equal to x. Thus x! = 1·2·3·...·(x - 1)·x. For example 4! = 1·2·3·4 = 24. Recall that GCD(x, y) is the largest positive integer q that divides (without a remainder) both x and y.\n\nLeha has learned how to solve this task very effective. You are able to cope with it not worse, aren't you?\n\nInput\n\nThe first and single line contains two integers A and B (1 ≤ A, B ≤ 109, min(A, B) ≤ 12).\n\nOutput\n\nPrint a single integer denoting the greatest common divisor of integers A! and B!.\n\nExample\n\nInput\n\n4 3\n\n\nOutput\n\n6\n\nNote\n\nConsider the sample.\n\n4! = 1·2·3·4 = 24. 3! = 1·2·3 = 6. The greatest common divisor of integers 24 and 6 is exactly 6.", "testcase": ["4 4", "4 4", "4 4", "4 2", "4 4", "4 4", "4 2", "4 4", "4 4", "4 4"], "output": ["6\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "835_A. Key races", "description": "Two boys decided to compete in text typing on the site \"Key races\". During the competition, they have to type a text consisting of s characters. The first participant types one character in v1 milliseconds and has ping t1 milliseconds. The second participant types one character in v2 milliseconds and has ping t2 milliseconds.\n\nIf connection ping (delay) is t milliseconds, the competition passes for a participant as follows: \n\n  1. Exactly after t milliseconds after the start of the competition the participant receives the text to be entered. \n  2. Right after that he starts to type it. \n  3. Exactly t milliseconds after he ends typing all the text, the site receives information about it. \n\n\n\nThe winner is the participant whose information on the success comes earlier. If the information comes from both participants at the same time, it is considered that there is a draw.\n\nGiven the length of the text and the information about participants, determine the result of the game.\n\nInput\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 ≤ s, v1, v2, t1, t2 ≤ 1000) — the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.\n\nOutput\n\nIf the first participant wins, print \"First\". If the second participant wins, print \"Second\". In case of a draw print \"Friendship\".\n\nExamples\n\nInput\n\n5 1 2 1 2\n\n\nOutput\n\nFirst\n\n\nInput\n\n3 3 1 1 1\n\n\nOutput\n\nSecond\n\n\nInput\n\n4 5 3 1 5\n\n\nOutput\n\nFriendship\n\nNote\n\nIn the first example, information on the success of the first participant comes in 7 milliseconds, of the second participant — in 14 milliseconds. So, the first wins.\n\nIn the second example, information on the success of the first participant comes in 11 milliseconds, of the second participant — in 5 milliseconds. So, the second wins.\n\nIn the third example, information on the success of the first participant comes in 22 milliseconds, of the second participant — in 22 milliseconds. So, it is be a draw.", "testcase": ["5 0 2 1 1", "5 1 2 1 2", "5 1 3 1 1", "4 5 3 2 4", "4 5 3 1 5", "5 1 2 0 3", "4 6 3 1 4", "3 3 2 1 0", "5 0 2 2 2", "3 4 1 1 0"], "output": ["Friendship\n", "First\n", "Second\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "841_B. Godsend", "description": "Leha somehow found an array consisting of n integers. Looking at it, he came up with a task. Two players play the game on the array. Players move one by one. The first player can choose for his move a subsegment of non-zero length with an odd sum of numbers and remove it from the array, after that the remaining parts are glued together into one array and the game continues. The second player can choose a subsegment of non-zero length with an even sum and remove it. Loses the one who can not make a move. Who will win if both play optimally?\n\nInput\n\nFirst line of input data contains single integer n (1 ≤ n ≤ 106) — length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 ≤ ai ≤ 109).\n\nOutput\n\nOutput answer in single line. \"First\", if first player wins, and \"Second\" otherwise (without quotes).\n\nExamples\n\nInput\n\n4\n1 3 2 3\n\n\nOutput\n\nFirst\n\n\nInput\n\n2\n2 2\n\n\nOutput\n\nSecond\n\nNote\n\nIn first sample first player remove whole array in one move and win.\n\nIn second sample first player can't make a move and lose.", "testcase": ["4\n0 3 2 2", "4\n0 3 2 2", "2\n3 2", "2\n2 3", "4\n2 2 2 3", "2\n1 2", "4\n1 4 1 3", "2\n1 2", "2\n2 3", "4\n1 3 2 3"], "output": ["First\n", "Second\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "854_B. Maxim Buys an Apartment", "description": "Maxim wants to buy an apartment in a new house at Line Avenue of Metropolis. The house has n apartments that are numbered from 1 to n and are arranged in a row. Two apartments are adjacent if their indices differ by 1. Some of the apartments can already be inhabited, others are available for sale.\n\nMaxim often visits his neighbors, so apartment is good for him if it is available for sale and there is at least one already inhabited apartment adjacent to it. Maxim knows that there are exactly k already inhabited apartments, but he doesn't know their indices yet.\n\nFind out what could be the minimum possible and the maximum possible number of apartments that are good for Maxim.\n\nInput\n\nThe only line of the input contains two integers: n and k (1 ≤ n ≤ 109, 0 ≤ k ≤ n).\n\nOutput\n\nPrint the minimum possible and the maximum possible number of apartments good for Maxim.\n\nExample\n\nInput\n\n6 3\n\n\nOutput\n\n1 3\n\nNote\n\nIn the sample test, the number of good apartments could be minimum possible if, for example, apartments with indices 1, 2 and 3 were inhabited. In this case only apartment 4 is good. The maximum possible number could be, for example, if apartments with indices 1, 3 and 5 were inhabited. In this case all other apartments: 2, 4 and 6 are good.", "testcase": ["6 2", "6 4", "6 4", "6 2", "6 4", "6 4", "6 4", "6 2", "6 4", "6 4"], "output": ["1 3\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "864_C. Bus", "description": "A bus moves along the coordinate line Ox from the point x = 0 to the point x = a. After starting from the point x = 0, it reaches the point x = a, immediately turns back and then moves to the point x = 0. After returning to the point x = 0 it immediately goes back to the point x = a and so on. Thus, the bus moves from x = 0 to x = a and back. Moving from the point x = 0 to x = a or from the point x = a to x = 0 is called a bus journey. In total, the bus must make k journeys.\n\nThe petrol tank of the bus can hold b liters of gasoline. To pass a single unit of distance the bus needs to spend exactly one liter of gasoline. The bus starts its first journey with a full petrol tank.\n\nThere is a gas station in point x = f. This point is between points x = 0 and x = a. There are no other gas stations on the bus route. While passing by a gas station in either direction the bus can stop and completely refuel its tank. Thus, after stopping to refuel the tank will contain b liters of gasoline.\n\nWhat is the minimum number of times the bus needs to refuel at the point x = f to make k journeys? The first journey starts in the point x = 0.\n\nInput\n\nThe first line contains four integers a, b, f, k (0 < f < a ≤ 106, 1 ≤ b ≤ 109, 1 ≤ k ≤ 104) — the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.\n\nOutput\n\nPrint the minimum number of times the bus needs to refuel to make k journeys. If it is impossible for the bus to make k journeys, print -1.\n\nExamples\n\nInput\n\n6 9 2 4\n\n\nOutput\n\n4\n\n\nInput\n\n6 10 2 4\n\n\nOutput\n\n2\n\n\nInput\n\n6 5 4 3\n\n\nOutput\n\n-1\n\nNote\n\nIn the first example the bus needs to refuel during each journey.\n\nIn the second example the bus can pass 10 units of distance without refueling. So the bus makes the whole first journey, passes 4 units of the distance of the second journey and arrives at the point with the gas station. Then it can refuel its tank, finish the second journey and pass 2 units of distance from the third journey. In this case, it will again arrive at the point with the gas station. Further, he can refill the tank up to 10 liters to finish the third journey and ride all the way of the fourth journey. At the end of the journey the tank will be empty. \n\nIn the third example the bus can not make all 3 journeys because if it refuels during the second journey, the tanks will contain only 5 liters of gasoline, but the bus needs to pass 8 units of distance until next refueling.", "testcase": ["6 10 3 5", "6 10 2 5", "6 5 3 4", "6 10 1 5", "6 5 4 3", "6 10 2 4", "6 10 2 4", "6 9 4 4", "6 10 1 5", "6 10 3 4"], "output": ["4\n", "-1\n", "2\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "867_C. Ordering Pizza", "description": "It's another Start[c]up finals, and that means there is pizza to order for the onsite contestants. There are only 2 types of pizza (obviously not, but let's just pretend for the sake of the problem), and all pizzas contain exactly S slices.\n\nIt is known that the i-th contestant will eat si slices of pizza, and gain ai happiness for each slice of type 1 pizza they eat, and bi happiness for each slice of type 2 pizza they eat. We can order any number of type 1 and type 2 pizzas, but we want to buy the minimum possible number of pizzas for all of the contestants to be able to eat their required number of slices. Given that restriction, what is the maximum possible total happiness that can be achieved?\n\nInput\n\nThe first line of input will contain integers N and S (1 ≤ N ≤ 105, 1 ≤ S ≤ 105), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 ≤ si ≤ 105, 1 ≤ ai ≤ 105, 1 ≤ bi ≤ 105), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.\n\nOutput\n\nPrint the maximum total happiness that can be achieved.\n\nExamples\n\nInput\n\n3 12\n3 5 7\n4 6 7\n5 9 5\n\n\nOutput\n\n84\n\n\nInput\n\n6 10\n7 4 7\n5 8 8\n12 5 8\n6 11 6\n3 3 7\n5 9 6\n\n\nOutput\n\n314\n\nNote\n\nIn the first example, you only need to buy one pizza. If you buy a type 1 pizza, the total happiness will be 3·5 + 4·6 + 5·9 = 84, and if you buy a type 2 pizza, the total happiness will be 3·7 + 4·7 + 5·5 = 74.", "testcase": ["6 10\n6 4 7\n4 8 8\n12 5 8\n6 12 6\n3 3 7\n4 9 6", "3 13\n3 5 7\n5 5 7\n5 10 5", "6 10\n8 4 7\n5 8 8\n12 5 8\n5 11 6\n4 3 9\n5 9 7", "3 12\n3 6 7\n4 6 7\n5 9 6", "3 12\n3 6 7\n5 7 7\n5 9 4", "3 12\n2 5 6\n4 6 6\n5 9 6", "6 10\n7 5 7\n5 9 8\n12 5 9\n6 11 6\n2 3 7\n5 9 6", "3 12\n3 4 6\n4 5 8\n5 9 5", "6 10\n7 5 7\n5 8 8\n12 5 7\n6 11 6\n4 2 7\n5 9 6", "6 10\n8 4 8\n4 8 8\n12 5 8\n6 11 7\n3 3 7\n6 9 7"], "output": ["314\n", "84\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "87_A. Trains", "description": "Vasya the programmer lives in the middle of the Programming subway branch. He has two girlfriends: Dasha and Masha, who live at the different ends of the branch, each one is unaware of the other one's existence.\n\nWhen Vasya has some free time, he goes to one of his girlfriends. He descends into the subway at some time, waits the first train to come and rides on it to the end of the branch to the corresponding girl. However, the trains run with different frequencies: a train goes to Dasha's direction every a minutes, but a train goes to Masha's direction every b minutes. If two trains approach at the same time, Vasya goes toward the direction with the lower frequency of going trains, that is, to the girl, to whose directions the trains go less frequently (see the note to the third sample).\n\nWe know that the trains begin to go simultaneously before Vasya appears. That is the train schedule is such that there exists a moment of time when the two trains arrive simultaneously.\n\nHelp Vasya count to which girlfriend he will go more often.\n\nInput\n\nThe first line contains two integers a and b (a ≠ b, 1 ≤ a, b ≤ 106).\n\nOutput\n\nPrint \"Dasha\" if Vasya will go to Dasha more frequently, \"Masha\" if he will go to Masha more frequently, or \"Equal\" if he will go to both girlfriends with the same frequency.\n\nExamples\n\nInput\n\n3 7\n\n\nOutput\n\nDasha\n\n\nInput\n\n5 3\n\n\nOutput\n\nMasha\n\n\nInput\n\n2 3\n\n\nOutput\n\nEqual\n\nNote\n\nLet's take a look at the third sample. Let the trains start to go at the zero moment of time. It is clear that the moments of the trains' arrival will be periodic with period 6. That's why it is enough to show that if Vasya descends to the subway at a moment of time inside the interval (0, 6], he will go to both girls equally often. \n\nIf he descends to the subway at a moment of time from 0 to 2, he leaves for Dasha on the train that arrives by the second minute.\n\nIf he descends to the subway at a moment of time from 2 to 3, he leaves for Masha on the train that arrives by the third minute.\n\nIf he descends to the subway at a moment of time from 3 to 4, he leaves for Dasha on the train that arrives by the fourth minute.\n\nIf he descends to the subway at a moment of time from 4 to 6, he waits for both trains to arrive by the sixth minute and goes to Masha as trains go less often in Masha's direction.\n\nIn sum Masha and Dasha get equal time — three minutes for each one, thus, Vasya will go to both girlfriends equally often.", "testcase": ["3 6", "5 4", "2 2", "5 4", "2 4", "3 6", "5 4", "5 4", "3 8", "2 2"], "output": ["Equal\n", "Dasha\n", "Masha\n"], "difficulty": 7, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "87_C. Interesting Game", "description": "Two best friends Serozha and Gena play a game.\n\nInitially there is one pile consisting of n stones on the table. During one move one pile should be taken and divided into an arbitrary number of piles consisting of a1 > a2 > ... > ak > 0 stones. The piles should meet the condition a1 - a2 = a2 - a3 = ... = ak - 1 - ak = 1. Naturally, the number of piles k should be no less than two.\n\nThe friends play in turns. The player who cannot make a move loses. Serozha makes the first move. Who will win if both players play in the optimal way?\n\nInput\n\nThe single line contains a single integer n (1 ≤ n ≤ 105).\n\nOutput\n\nIf Serozha wins, print k, which represents the minimal number of piles into which he can split the initial one during the first move in order to win the game.\n\nIf Gena wins, print \"-1\" (without the quotes).\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n2\n\n\nInput\n\n6\n\n\nOutput\n\n-1\n\n\nInput\n\n100\n\n\nOutput\n\n8", "testcase": ["4", "5", "5", "7", "4", "101", "99", "99", "101", "5"], "output": ["-1\n", "8\n", "2\n"], "difficulty": 9, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "886_B. Vlad and Cafes", "description": "Vlad likes to eat in cafes very much. During his life, he has visited cafes n times. Unfortunately, Vlad started to feel that his last visits are not any different from each other. To fix that Vlad had a small research.\n\nFirst of all, Vlad assigned individual indices to all cafes. Then, he wrote down indices of cafes he visited in a row, in order of visiting them. Now, Vlad wants to find such a cafe that his last visit to that cafe was before his last visits to every other cafe. In other words, he wants to find such a cafe that he hasn't been there for as long as possible. Help Vlad to find that cafe.\n\nInput\n\nIn first line there is one integer n (1 ≤ n ≤ 2·105) — number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 ≤ ai ≤ 2·105) are written — indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.\n\nOutput\n\nPrint one integer — index of the cafe that Vlad hasn't visited for as long as possible.\n\nExamples\n\nInput\n\n5\n1 3 2 1 2\n\n\nOutput\n\n3\n\n\nInput\n\n6\n2 1 2 2 4 1\n\n\nOutput\n\n2\n\nNote\n\nIn first test, there are three cafes, and the last visits to cafes with indices 1 and 2 were after the last visit to cafe with index 3; so this cafe is the answer. \n\nIn second test case, there are also three cafes, but with indices 1, 2 and 4. Cafes with indices 1 and 4 were visited after the last visit of cafe with index 2, so the answer is 2. Note that Vlad could omit some numbers while numerating the cafes.", "testcase": ["6\n3 1 2 2 2 1", "6\n2 2 2 2 4 1", "6\n2 1 2 2 5 -1", "5\n1 3 3 1 3", "5\n2 2 2 1 2", "6\n2 2 2 2 4 1", "5\n1 3 1 0 2", "5\n2 3 2 1 1", "5\n0 3 1 1 2", "6\n2 2 2 2 4 -1"], "output": ["2\n", "3\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "893_A. Chess For Three", "description": "Alex, Bob and Carl will soon participate in a team chess tournament. Since they are all in the same team, they have decided to practise really hard before the tournament. But it's a bit difficult for them because chess is a game for two players, not three.\n\nSo they play with each other according to following rules:\n\n  * Alex and Bob play the first game, and Carl is spectating; \n  * When the game ends, the one who lost the game becomes the spectator in the next game, and the one who was spectating plays against the winner. \n\n\n\nAlex, Bob and Carl play in such a way that there are no draws.\n\nToday they have played n games, and for each of these games they remember who was the winner. They decided to make up a log of games describing who won each game. But now they doubt if the information in the log is correct, and they want to know if the situation described in the log they made up was possible (that is, no game is won by someone who is spectating if Alex, Bob and Carl play according to the rules). Help them to check it!\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 ≤ ai ≤ 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.\n\nOutput\n\nPrint YES if the situation described in the log was possible. Otherwise print NO.\n\nExamples\n\nInput\n\n3\n1\n1\n2\n\n\nOutput\n\nYES\n\n\nInput\n\n2\n1\n2\n\n\nOutput\n\nNO\n\nNote\n\nIn the first example the possible situation is:\n\n  1. Alex wins, Carl starts playing instead of Bob; \n  2. Alex wins, Bob replaces Carl; \n  3. Bob wins. \n\n\n\nThe situation in the second example is impossible because Bob loses the first game, so he cannot win the second one.", "testcase": ["2\n1\n3", "2\n0\n2", "2\n1\n1", "3\n1\n1\n2", "2\n1\n3", "2\n1\n1", "2\n0\n2", "3\n2\n0\n2", "3\n0\n1\n3", "3\n2\n2\n2"], "output": ["NO\n", "YES\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "903_A. Hungry Student Problem", "description": "Ivan's classes at the university have just finished, and now he wants to go to the local CFK cafe and eat some fried chicken.\n\nCFK sells chicken chunks in small and large portions. A small portion contains 3 chunks; a large one — 7 chunks. Ivan wants to eat exactly x chunks. Now he wonders whether he can buy exactly this amount of chicken.\n\nFormally, Ivan wants to know if he can choose two non-negative integers a and b in such a way that a small portions and b large ones contain exactly x chunks.\n\nHelp Ivan to answer this question for several values of x!\n\nInput\n\nThe first line contains one integer n (1 ≤ n ≤ 100) — the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 ≤ xi ≤ 100) — the number of chicken chunks Ivan wants to eat.\n\nOutput\n\nPrint n lines, in i-th line output YES if Ivan can buy exactly xi chunks. Otherwise, print NO.\n\nExample\n\nInput\n\n2\n6\n5\n\n\nOutput\n\nYES\nNO\n\nNote\n\nIn the first example Ivan can buy two small portions.\n\nIn the second example Ivan cannot buy exactly 5 chunks, since one small portion is not enough, but two small portions or one large is too much.", "testcase": ["2\n5\n5", "2\n7\n5", "2\n5\n5", "2\n5\n5", "2\n5\n5", "2\n6\n4", "2\n7\n5", "2\n5\n5", "2\n5\n5", "2\n6\n6"], "output": ["YES\nNO\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "909_B. Segments", "description": "You are given an integer N. Consider all possible segments on the coordinate axis with endpoints at integer points with coordinates between 0 and N, inclusive; there will be <image> of them.\n\nYou want to draw these segments in several layers so that in each layer the segments don't overlap (they might touch at the endpoints though). You can not move the segments to a different location on the coordinate axis. \n\nFind the minimal number of layers you have to use for the given N.\n\nInput\n\nThe only input line contains a single integer N (1 ≤ N ≤ 100).\n\nOutput\n\nOutput a single integer - the minimal number of layers required to draw the segments for the given N.\n\nExamples\n\nInput\n\n2\n\n\nOutput\n\n2\n\n\nInput\n\n3\n\n\nOutput\n\n4\n\n\nInput\n\n4\n\n\nOutput\n\n6\n\nNote\n\nAs an example, here are the segments and their optimal arrangement into layers for N = 4.\n\n<image>", "testcase": ["3", "3", "4", "2", "1", "2", "5", "2", "1", "3"], "output": ["4\n", "2\n", "6\n"], "difficulty": 8, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "933_B. A Determined Cleanup", "description": "In order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.\n\nLittle Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...\n\nGiven two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x + k). That is, f(x) = q(x)·(x + k) + p, where q(x) is a polynomial (not necessarily with integer coefficients).\n\nInput\n\nThe only line of input contains two space-separated integers p and k (1 ≤ p ≤ 1018, 2 ≤ k ≤ 2 000).\n\nOutput\n\nIf the polynomial does not exist, print a single integer -1, or output two lines otherwise.\n\nIn the first line print a non-negative integer d — the number of coefficients in the polynomial.\n\nIn the second line print d space-separated integers a0, a1, ..., ad - 1, describing a polynomial <image> fulfilling the given requirements. Your output should satisfy 0 ≤ ai < k for all 0 ≤ i ≤ d - 1, and ad - 1 ≠ 0.\n\nIf there are many possible solutions, print any of them.\n\nExamples\n\nInput\n\n46 2\n\n\nOutput\n\n7\n0 1 0 0 1 1 1\n\n\nInput\n\n2018 214\n\n\nOutput\n\n3\n92 205 1\n\nNote\n\nIn the first example, f(x) = x6 + x5 + x4 + x = (x5 - x4 + 3x3 - 6x2 + 12x - 23)·(x + 2) + 46.\n\nIn the second example, f(x) = x2 + 205x + 92 = (x - 9)·(x + 214) + 2018.", "testcase": ["46 1", "46 1", "2018 213", "46 1", "46 3", "46 1", "2018 215", "2018 215", "2018 213", "2018 213"], "output": ["7\n0 1 0 0 1 1 1 \n", "3\n92 205 1 \n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "933_C. A Colourful Prospect", "description": "Firecrackers scare Nian the monster, but they're wayyyyy too noisy! Maybe fireworks make a nice complement.\n\nLittle Tommy is watching a firework show. As circular shapes spread across the sky, a splendid view unfolds on the night of Lunar New Year's eve.\n\nA wonder strikes Tommy. How many regions are formed by the circles on the sky? We consider the sky as a flat plane. A region is a connected part of the plane with positive area, whose bound consists of parts of bounds of the circles and is a curve or several curves without self-intersections, and that does not contain any curve other than its boundaries. Note that exactly one of the regions extends infinitely.\n\nInput\n\nThe first line of input contains one integer n (1 ≤ n ≤ 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 ≤ x, y ≤ 10, 1 ≤ r ≤ 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.\n\nOutput\n\nPrint a single integer — the number of regions on the plane.\n\nExamples\n\nInput\n\n3\n0 0 1\n2 0 1\n4 0 1\n\n\nOutput\n\n4\n\n\nInput\n\n3\n0 0 2\n3 0 2\n6 0 2\n\n\nOutput\n\n6\n\n\nInput\n\n3\n0 0 2\n2 0 2\n1 1 2\n\n\nOutput\n\n8\n\nNote\n\nFor the first example,\n\n<image>\n\nFor the second example,\n\n<image>\n\nFor the third example,\n\n<image>", "testcase": ["3\n0 1 2\n4 0 2\n6 1 2", "3\n0 0 3\n3 0 1\n1 1 2", "3\n0 0 3\n2 0 1\n4 -1 1", "3\n0 0 2\n2 1 2\n0 1 1", "3\n0 0 3\n3 0 0\n6 0 2", "3\n0 -1 1\n3 1 2\n6 0 2", "3\n0 0 1\n2 1 1\n4 0 1", "3\n0 0 0\n2 0 1\n5 0 0", "3\n-1 0 1\n3 0 0\n4 0 1", "3\n0 1 1\n2 0 0\n4 0 2"], "output": ["6\n", "4\n", "8\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "934_D. A Determined Cleanup", "description": "In order to put away old things and welcome a fresh new year, a thorough cleaning of the house is a must.\n\nLittle Tommy finds an old polynomial and cleaned it up by taking it modulo another. But now he regrets doing this...\n\nGiven two integers p and k, find a polynomial f(x) with non-negative integer coefficients strictly less than k, whose remainder is p when divided by (x + k). That is, f(x) = q(x)·(x + k) + p, where q(x) is a polynomial (not necessarily with integer coefficients).\n\nInput\n\nThe only line of input contains two space-separated integers p and k (1 ≤ p ≤ 1018, 2 ≤ k ≤ 2 000).\n\nOutput\n\nIf the polynomial does not exist, print a single integer -1, or output two lines otherwise.\n\nIn the first line print a non-negative integer d — the number of coefficients in the polynomial.\n\nIn the second line print d space-separated integers a0, a1, ..., ad - 1, describing a polynomial <image> fulfilling the given requirements. Your output should satisfy 0 ≤ ai < k for all 0 ≤ i ≤ d - 1, and ad - 1 ≠ 0.\n\nIf there are many possible solutions, print any of them.\n\nExamples\n\nInput\n\n46 2\n\n\nOutput\n\n7\n0 1 0 0 1 1 1\n\n\nInput\n\n2018 214\n\n\nOutput\n\n3\n92 205 1\n\nNote\n\nIn the first example, f(x) = x6 + x5 + x4 + x = (x5 - x4 + 3x3 - 6x2 + 12x - 23)·(x + 2) + 46.\n\nIn the second example, f(x) = x2 + 205x + 92 = (x - 9)·(x + 214) + 2018.", "testcase": ["46 1", "46 1", "2018 215", "2018 213", "2018 215", "46 1", "2018 215", "46 1", "46 3", "2018 215"], "output": ["7\n                                                               0                                                                1                                                                0                                                                0                                                                1                                                                1                                                                1\n", "3\n                                                              92                                                              205                                                                1\n"], "difficulty": 10, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "937_A. Olympiad", "description": "The recent All-Berland Olympiad in Informatics featured n participants with each scoring a certain amount of points.\n\nAs the head of the programming committee, you are to determine the set of participants to be awarded with diplomas with respect to the following criteria: \n\n  * At least one participant should get a diploma. \n  * None of those with score equal to zero should get awarded. \n  * When someone is awarded, all participants with score not less than his score should also be awarded. \n\n\n\nDetermine the number of ways to choose a subset of participants that will receive the diplomas.\n\nInput\n\nThe first line contains a single integer n (1 ≤ n ≤ 100) — the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 ≤ ai ≤ 600) — participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.\n\nOutput\n\nPrint a single integer — the desired number of ways.\n\nExamples\n\nInput\n\n4\n1 3 3 2\n\n\nOutput\n\n3\n\n\nInput\n\n3\n1 1 1\n\n\nOutput\n\n1\n\n\nInput\n\n4\n42 0 0 42\n\n\nOutput\n\n1\n\nNote\n\nThere are three ways to choose a subset in sample case one.\n\n  1. Only participants with 3 points will get diplomas. \n  2. Participants with 2 or 3 points will get diplomas. \n  3. Everyone will get a diploma! \n\n\n\nThe only option in sample case two is to award everyone.\n\nNote that in sample case three participants with zero scores cannot get anything.", "testcase": ["4\n0 3 2 2", "3\n2 1 0", "3\n1 2 0", "4\n0 2 3 2", "3\n1 0 0", "3\n1 2 2", "3\n0 1 2", "3\n0 2 1", "4\n42 0 0 42", "3\n1 1 1"], "output": ["1\n", "3\n", "1\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "You are at a water bowling training. There are l people who play with their left hand, r people, who play with their right hand, and a ambidexters, who can play with left or right hand.\n\nThe coach decided to form a team of even number of players, exactly half of the players should play with their right hand, and exactly half of the players should play with their left hand. One player should use only on of his hands.\n\nAmbidexters play as well with their right hand as with their left hand. In the team, an ambidexter can play with their left hand, or with their right hand.\n\nPlease find the maximum possible size of the team, where equal number of players use their left and right hands, respectively.\n\nInput\n\nThe only line contains three integers l, r and a (0 ≤ l, r, a ≤ 100) — the number of left-handers, the number of right-handers and the number of ambidexters at the training. \n\nOutput\n\nPrint a single even integer — the maximum number of players in the team. It is possible that the team can only have zero number of players.\n\nExamples\n\nInput\n\n1 4 2\n\n\nOutput\n\n6\n\n\nInput\n\n5 5 5\n\n\nOutput\n\n14\n\n\nInput\n\n0 2 0\n\n\nOutput\n\n0\n\nNote\n\nIn the first example you can form a team of 6 players. You should take the only left-hander and two ambidexters to play with left hand, and three right-handers to play with right hand. The only person left can't be taken into the team.\n\nIn the second example you can form a team of 14 people. You have to take all five left-handers, all five right-handers, two ambidexters to play with left hand and two ambidexters to play with right hand.", "testcase": ["1 5 2", "5 5 6", "1 3 2", "1 3 2", "0 2 -1", "0 1 0", "5 4 5", "5 4 5", "0 2 -1", "1 3 2"], "output": ["0\n", "6\n", "14\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Ehab is interested in the bitwise-xor operation and the special graphs. Mahmoud gave him a problem that combines both. He has a complete graph consisting of n vertices numbered from 0 to n - 1. For all 0 ≤ u < v < n, vertex u and vertex v are connected with an undirected edge that has weight <image> (where <image> is the [bitwise-xor operation](https://en.wikipedia.org/wiki/Bitwise_operation#XOR)). Can you find the weight of the minimum spanning tree of that graph?\n\nYou can read about complete graphs in <https://en.wikipedia.org/wiki/Complete_graph>\n\nYou can read about the minimum spanning tree in <https://en.wikipedia.org/wiki/Minimum_spanning_tree>\n\nThe weight of the minimum spanning tree is the sum of the weights on the edges included in it.\n\nInput\n\nThe only line contains an integer n (2 ≤ n ≤ 1012), the number of vertices in the graph.\n\nOutput\n\nThe only line contains an integer x, the weight of the graph's minimum spanning tree.\n\nExample\n\nInput\n\n4\n\n\nOutput\n\n4\n\nNote\n\nIn the first sample: <image> The weight of the minimum spanning tree is 1+2+1=4.", "testcase": ["5", "5", "5", "5", "5", "3", "5", "3", "3", "5"], "output": ["4\n"], "difficulty": 11, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "987_B. High School: Become Human", "description": "Year 2118. Androids are in mass production for decades now, and they do all the work for humans. But androids have to go to school to be able to solve creative tasks. Just like humans before.\n\nIt turns out that high school struggles are not gone. If someone is not like others, he is bullied. Vasya-8800 is an economy-class android which is produced by a little-known company. His design is not perfect, his characteristics also could be better. So he is bullied by other androids.\n\nOne of the popular pranks on Vasya is to force him to compare x^y with y^x. Other androids can do it in milliseconds while Vasya's memory is too small to store such big numbers.\n\nPlease help Vasya! Write a fast program to compare x^y with y^x for Vasya, maybe then other androids will respect him.\n\nInput\n\nOn the only line of input there are two integers x and y (1 ≤ x, y ≤ 10^{9}).\n\nOutput\n\nIf x^y < y^x, then print '<' (without quotes). If x^y > y^x, then print '>' (without quotes). If x^y = y^x, then print '=' (without quotes).\n\nExamples\n\nInput\n\n5 8\n\n\nOutput\n\n&gt;\n\n\nInput\n\n10 3\n\n\nOutput\n\n&lt;\n\n\nInput\n\n6 6\n\n\nOutput\n\n=\n\nNote\n\nIn the first example 5^8 = 5 ⋅ 5 ⋅ 5 ⋅ 5 ⋅ 5 ⋅ 5 ⋅ 5 ⋅ 5 = 390625, and 8^5 = 8 ⋅ 8 ⋅ 8 ⋅ 8 ⋅ 8 = 32768. So you should print '>'.\n\nIn the second example 10^3 = 1000 < 3^{10} = 59049.\n\nIn the third example 6^6 = 46656 = 6^6.", "testcase": ["6 5", "5 9", "10 4", "5 7", "10 4", "5 9", "6 7", "5 9", "10 4", "6 7"], "output": [">\n", "=\n", "<\n"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "997_B. Roman Digits", "description": "Let's introduce a number system which is based on a roman digits. There are digits I, V, X, L which correspond to the numbers 1, 5, 10 and 50 respectively. The use of other roman digits is not allowed.\n\nNumbers in this system are written as a sequence of one or more digits. We define the value of the sequence simply as the sum of digits in it.\n\nFor example, the number XXXV evaluates to 35 and the number IXI — to 12.\n\nPay attention to the difference to the traditional roman system — in our system any sequence of digits is valid, moreover the order of digits doesn't matter, for example IX means 11, not 9.\n\nOne can notice that this system is ambiguous, and some numbers can be written in many different ways. Your goal is to determine how many distinct integers can be represented by exactly n roman digits I, V, X, L.\n\nInput\n\nThe only line of the input file contains a single integer n (1 ≤ n ≤ 10^9) — the number of roman digits to use.\n\nOutput\n\nOutput a single integer — the number of distinct integers which can be represented using n roman digits exactly.\n\nExamples\n\nInput\n\n1\n\n\nOutput\n\n4\n\n\nInput\n\n2\n\n\nOutput\n\n10\n\n\nInput\n\n10\n\n\nOutput\n\n244\n\nNote\n\nIn the first sample there are exactly 4 integers which can be represented — I, V, X and L.\n\nIn the second sample it is possible to represent integers 2 (II), 6 (VI), 10 (VV), 11 (XI), 15 (XV), 20 (XX), 51 (IL), 55 (VL), 60 (XL) and 100 (LL).", "testcase": ["0", "3", "1", "3", "2", "9", "11", "0", "1", "2"], "output": ["10", "244", "4"], "difficulty": 8, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "999_A. Mishka and Contest", "description": "Mishka started participating in a programming contest. There are n problems in the contest. Mishka's problem-solving skill is equal to k.\n\nMishka arranges all problems from the contest into a list. Because of his weird principles, Mishka only solves problems from one of the ends of the list. Every time, he chooses which end (left or right) he will solve the next problem from. Thus, each problem Mishka solves is either the leftmost or the rightmost problem in the list.\n\nMishka cannot solve a problem with difficulty greater than k. When Mishka solves the problem, it disappears from the list, so the length of the list decreases by 1. Mishka stops when he is unable to solve any problem from any end of the list.\n\nHow many problems can Mishka solve?\n\nInput\n\nThe first line of input contains two integers n and k (1 ≤ n, k ≤ 100) — the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 ≤ a_i ≤ 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.\n\nOutput\n\nPrint one integer — the maximum number of problems Mishka can solve.\n\nExamples\n\nInput\n\n8 4\n4 2 3 1 5 1 6 4\n\n\nOutput\n\n5\n\n\nInput\n\n5 2\n3 1 2 1 3\n\n\nOutput\n\n0\n\n\nInput\n\n5 100\n12 34 55 43 21\n\n\nOutput\n\n5\n\nNote\n\nIn the first example, Mishka can solve problems in the following order: [4, 2, 3, 1, 5, 1, 6, 4] → [2, 3, 1, 5, 1, 6, 4] → [2, 3, 1, 5, 1, 6] → [3, 1, 5, 1, 6] → [1, 5, 1, 6] → [5, 1, 6], so the number of solved problems will be equal to 5.\n\nIn the second example, Mishka can't solve any problem because the difficulties of problems from both ends are greater than k.\n\nIn the third example, Mishka's solving skill is so amazing that he can solve all the problems.", "testcase": ["8 4\n3 1 3 1 5 0 6 4", "8 4\n4 2 2 1 5 2 5 4", "8 4\n5 2 3 2 5 1 7 4", "8 5\n4 2 3 1 6 1 7 4", "5 100\n12 33 55 43 21", "5 100\n12 34 53 43 22", "8 4\n5 2 3 1 6 2 6 4", "5 100\n12 34 56 43 21", "5 100\n13 35 54 43 21", "5 102\n12 34 55 43 20"], "output": ["0\n", "5\n", "5\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "99_C. Help Victoria the Wise", "description": "Vasilisa the Wise from a far away kingdom got a present from her friend Helga the Wise from a farther away kingdom. The present is a surprise box, yet Vasilisa the Wise doesn't know yet what the surprise actually is because she cannot open the box. She hopes that you can help her in that.\n\nThe box's lock is constructed like that. The box itself is represented by an absolutely perfect black cube with the identical deepening on each face (those are some foreign nanotechnologies that the far away kingdom scientists haven't dreamt of). The box is accompanied by six gems whose form matches the deepenings in the box's faces. The box can only be opened after it is correctly decorated by the gems, that is, when each deepening contains exactly one gem. Two ways of decorating the box are considered the same if they can be obtained one from the other one by arbitrarily rotating the box (note that the box is represented by a perfect nanotechnological cube)\n\nNow Vasilisa the Wise wants to know by the given set of colors the following: in how many ways would she decorate the box in the worst case to open it? To answer this question it is useful to know that two gems of one color are indistinguishable from each other. Help Vasilisa to solve this challenging problem.\n\nInput\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} — they are the colors of gems with which the box should be decorated.\n\nOutput\n\nPrint the required number of different ways to decorate the box.\n\nExamples\n\nInput\n\nYYYYYY\n\n\nOutput\n\n1\n\n\nInput\n\nBOOOOB\n\n\nOutput\n\n2\n\n\nInput\n\nROYGBV\n\n\nOutput\n\n30", "testcase": ["YYYYYT", "YYYUYY", "BOUOOB", "YYDYYY", "YYYYAY", "YYYYYU", "YYYYYX", "LOYGBV", "ROYGKV", "ROYGZV"], "output": ["1\n", "2\n", "30\n"], "difficulty": 9, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "9_A. Die Roll", "description": "Yakko, Wakko and Dot, world-famous animaniacs, decided to rest from acting in cartoons, and take a leave to travel a bit. Yakko dreamt to go to Pennsylvania, his Motherland and the Motherland of his ancestors. Wakko thought about Tasmania, its beaches, sun and sea. Dot chose Transylvania as the most mysterious and unpredictable place.\n\nBut to their great regret, the leave turned to be very short, so it will be enough to visit one of the three above named places. That's why Yakko, as the cleverest, came up with a truly genius idea: let each of the three roll an ordinary six-sided die, and the one with the highest amount of points will be the winner, and will take the other two to the place of his/her dreams.\n\nYakko thrown a die and got Y points, Wakko — W points. It was Dot's turn. But she didn't hurry. Dot wanted to know for sure what were her chances to visit Transylvania.\n\nIt is known that Yakko and Wakko are true gentlemen, that's why if they have the same amount of points with Dot, they will let Dot win.\n\nInput\n\nThe only line of the input file contains two natural numbers Y and W — the results of Yakko's and Wakko's die rolls.\n\nOutput\n\nOutput the required probability in the form of irreducible fraction in format «A/B», where A — the numerator, and B — the denominator. If the required probability equals to zero, output «0/1». If the required probability equals to 1, output «1/1». \n\nExamples\n\nInput\n\n4 2\n\n\nOutput\n\n1/2\n\nNote\n\nDot will go to Transylvania, if she is lucky to roll 4, 5 or 6 points.", "testcase": ["4 3", "4 3", "4 1", "4 3", "4 1", "4 1", "4 1", "4 3", "4 1", "4 1"], "output": ["1/2\n"], "difficulty": 7, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p00357 Trampoline", "description": "A plurality of trampolines are arranged in a line at 10 m intervals. Each trampoline has its own maximum horizontal distance within which the jumper can jump safely. Starting from the left-most trampoline, the jumper jumps to another trampoline within the allowed jumping range. The jumper wants to repeat jumping until he/she reaches the right-most trampoline, and then tries to return to the left-most trampoline only through jumping. Can the jumper complete the roundtrip without a single stepping-down from a trampoline?\n\nWrite a program to report if the jumper can complete the journey using the list of maximum horizontal reaches of these trampolines. Assume that the trampolines are points without spatial extent.\n\n\n\nInput\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 ≤ N ≤ 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 ≤ d_i ≤ 106).\n\nOutput\n\nOutput \"yes\" if the jumper can complete the roundtrip, or \"no\" if he/she cannot.\n\nExamples\n\nInput\n\n4\n20\n5\n10\n1\n\n\nOutput\n\nno\n\n\nInput\n\n3\n10\n5\n10\n\n\nOutput\n\nno\n\n\nInput\n\n4\n20\n30\n1\n20\n\n\nOutput\n\nyes", "testcase": ["3\n11\n5\n9", "3\n10\n4\n9", "4\n19\n4\n10\n1", "4\n21\n30\n0\n20", "4\n20\n30\n2\n21", "3\n10\n6\n9", "4\n20\n6\n9\n1", "4\n20\n5\n10\n-1", "4\n20\n31\n0\n20", "4\n21\n30\n1\n19"], "output": ["yes", "no", "no"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02127 AABABCAC", "description": "Problem\n\nGiven the strings $ s $, $ t $.\nFirst, let the string set $ A = $ {$ s $}, $ B = \\ phi $.\nAt this time, I want to perform the following operations as much as possible.\n\noperation\n\nstep1\n\nPerform the following processing for all $ u ∊ A $.\n\n1. From all subsequences of $ u $ (not necessarily contiguous), choose any one that is equal to $ t $. Let the indexes corresponding to $ u $ of the selected subsequence be $ z_1 $, $ z_2 $,…, $ z_ {| t |} $ (however, 1 $ \\ le $ $ z_1 $ $ \\ lt $ $ z_2). $$ \\ lt $… $ \\ lt $ $ z_ {| t |} $ $ \\ le $ $ | u | $). If there is no such subsequence, the operation ends.\n\n\n2. Divide the original string with the selected substring characters $ u_ {z_1} $, $ u_ {z_2} $,…, $ u_ {z_ {| t |}} $ and convert them to $ B $ to add.\n\nFor example, in the case of $ u = $ \"abcdcd\" and $ t = $ \"ac\", the following two division methods can be considered.\nIf you choose the first and third characters of $ u $, it will be split into \"\", \"b\" and \"dcd\".\nIf you choose the first and fifth characters of $ u $, it will be split into \"\", \"bcd\" and \"d\".\n\n\nstep2\n\nReplace $ A $ with $ B $ and empty $ B $.\nIncrease the number of operations by 1.\n\nSubsequence example\n\nThe subsequences of \"abac\" are {\"\", \"a\", \"b\", \"c\", \"aa\", \"ab\", \"ac\", \"ba\", \"bc\", \"aac\", \"aba\" \",\" abc \",\" bac \",\" abac \"}.\n\"a\" is a subsequence created by extracting the first or third character of \"abac\".\n\"ac\" is a subsequence created by extracting the 1st and 4th characters of \"abac\" or the 3rd and 4th characters.\n\nConstraints\n\nThe input satisfies the following conditions.\n\n* 1 $ \\ le $ $ | t | $ $ \\ le $ $ | s | $ $ \\ le $ $ 10 ^ 5 $\n* Characters contained in the strings $ s $ and $ t $ are uppercase or lowercase letters of the alphabet\n\nInput\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.\n\nOutput\n\nOutput the maximum number of operations.\n\nExamples\n\nInput\n\nAABABCAC\nA\n\n\nOutput\n\n2\n\n\nInput\n\nabaabbabaabaabbabbabaabbab\nab\n\n\nOutput\n\n3\n\n\nInput\n\nAbCdEfG\naBcDeFg\n\n\nOutput\n\n0", "testcase": ["AABABCAA\nA", "AZBABCAC\nA", "abaabbabaabaabbabbabaabbab\naa", "AbCdEfG\naBcDegg", "AbCdECG\naBcDeFg", "AZBABCAC\nA", "AABABCAC\nL", "AbCdEfG\naBKDeFg", "AbCdEfG\naBSDeFg", "AABABCAC\nO"], "output": ["3", "2", "0"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02257 Prime Numbers", "description": "A prime number is a natural number which has exactly two distinct natural number divisors: 1 and itself. For example, the first four prime numbers are: 2, 3, 5 and 7.\n\nWrite a program which reads a list of N integers and prints the number of prime numbers in the list.\n\nConstraints\n\n1 ≤ N ≤ 10000\n\n2 ≤ an element of the list ≤ 108\n\nInput\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.\n\nOutput\n\nPrint the number of prime numbers in the given list.\n\nExamples\n\nInput\n\n5\n2\n3\n4\n5\n6\n\n\nOutput\n\n3\n\n\nInput\n\n11\n7\n8\n9\n10\n11\n12\n13\n14\n15\n16\n17\n\n\nOutput\n\n4", "testcase": ["5\n3\n3\n3\n5\n6", "11\n7\n7\n9\n9\n11\n12\n13\n14\n15\n16\n17", "11\n7\n9\n9\n9\n11\n12\n14\n14\n16\n16\n17", "11\n7\n9\n9\n9\n11\n12\n14\n15\n15\n16\n17", "5\n3\n3\n4\n6\n6", "11\n8\n8\n9\n10\n11\n10\n13\n14\n16\n16\n17", "5\n2\n3\n5\n4\n6", "11\n8\n8\n8\n10\n12\n12\n14\n14\n15\n16\n17", "5\n1\n3\n4\n5\n5", "5\n2\n3\n5\n5\n7"], "output": ["3", "4"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02259 Bubble Sort", "description": "Write a program of the Bubble Sort algorithm which sorts a sequence A in ascending order. The algorithm should be based on the following pseudocode:\n\n\nBubbleSort(A)\n1 for i = 0 to A.length-1\n2     for j = A.length-1 downto i+1\n3         if A[j] < A[j-1]\n4             swap A[j] and A[j-1]\n\n\nNote that, indices for array elements are based on 0-origin.\n\nYour program should also print the number of swap operations defined in line 4 of the pseudocode.\n\nConstraints\n\n1 ≤ N ≤ 100\n\nInput\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.\n\nOutput\n\nThe output consists of 2 lines.\n\nIn the first line, please print the sorted sequence. Two contiguous elements of the sequence should be separated by a space character.\n\nIn the second line, please print the number of swap operations.\n\nExamples\n\nInput\n\n5\n5 3 2 4 1\n\n\nOutput\n\n1 2 3 4 5\n8\n\n\nInput\n\n6\n5 2 4 6 1 3\n\n\nOutput\n\n1 2 3 4 5 6\n9", "testcase": ["6\n5 2 4 5 1 1", "5\n5 3 2 3 0", "6\n4 2 4 6 0 4", "5\n4 3 2 3 1", "6\n4 1 4 6 1 2", "6\n5 3 3 6 0 3", "5\n4 3 2 4 0", "5\n5 4 3 4 1", "6\n5 2 5 6 2 4", "5\n3 3 2 4 1"], "output": ["1 2 3 4 5\n8", "1 2 3 4 5 6\n9"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02271 Exhaustive Search", "description": "Write a program which reads a sequence A of n elements and an integer M, and outputs \"yes\" if you can make M by adding elements in A, otherwise \"no\". You can use an element only once.\n\nYou are given the sequence A and q questions where each question contains Mi.\n\nNotes\n\nYou can solve this problem by a Burte Force approach. Suppose solve(p, t) is a function which checkes whether you can make t by selecting elements after p-th element (inclusive). Then you can recursively call the following functions:\n\nsolve(0, M)\nsolve(1, M-{sum created from elements before 1st element})\nsolve(2, M-{sum created from elements before 2nd element})\n...\n\nThe recursive function has two choices: you selected p-th element and not. So, you can check solve(p+1, t-A[p]) and solve(p+1, t) in solve(p, t) to check the all combinations.\n\nFor example, the following figure shows that 8 can be made by A[0] + A[2].\n\n<image>\n\nConstraints\n\n* n ≤ 20\n* q ≤ 200\n* 1 ≤ elements in A ≤ 2000\n* 1 ≤ Mi ≤ 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.\n\nOutput\n\nFor each question Mi, print yes or no.\n\nExample\n\nInput\n\n5\n1 5 7 10 21\n8\n2 4 17 8 22 21 100 35\n\n\nOutput\n\nno\nno\nyes\nyes\nyes\nyes\nno\nno", "testcase": ["5\n0 5 7 10 21\n8\n2 4 17 7 22 21 100 34", "5\n1 5 7 9 21\n7\n1 4 17 9 22 21 99 35", "5\n3 5 8 10 21\n7\n2 4 16 8 22 21 100 35", "5\n1 4 7 10 22\n8\n2 3 18 8 22 21 99 35", "5\n1 5 7 10 21\n8\n2 3 17 9 22 21 101 35", "5\n0 5 7 10 21\n8\n4 4 17 7 23 21 100 35", "5\n1 6 7 10 21\n8\n2 3 17 7 22 21 99 34", "5\n1 5 7 10 21\n8\n1 5 16 8 23 21 101 35", "5\n1 5 7 10 22\n9\n2 4 17 8 22 21 99 35", "5\n1 5 7 10 21\n8\n4 4 17 9 22 21 100 35"], "output": ["no\nno\nyes\nyes\nyes\nyes\nno\nno"], "difficulty": 0, "time_limit": {"seconds": 5, "nanos": 0}}
{"name": "p02320 Knapsack Problem with Limitations", "description": "You have N items that you want to put them into a knapsack. Item i has value vi, weight wi and limitation mi.\n\nYou want to find a subset of items to put such that:\n\n* The total value of the items is as large as possible.\n* The items have combined weight at most W, that is capacity of the knapsack.\n* You can select at most mi items for ith item.\n\n\n\nFind the maximum total value of items in the knapsack.\n\nConstraints\n\n* 1 ≤ N ≤ 100\n* 1 ≤ vi ≤ 1,000\n* 1 ≤ wi ≤ 1,000\n* 1 ≤ mi ≤ 10,000\n* 1 ≤ W ≤ 10,000\n\nInput\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.\n\nOutput\n\nPrint the maximum total values of the items in a line.\n\nExamples\n\nInput\n\n4 8\n4 3 2\n2 1 1\n1 2 4\n3 2 2\n\n\nOutput\n\n12\n\n\nInput\n\n2 100\n1 1 100\n2 1 50\n\n\nOutput\n\n150", "testcase": ["4 8\n4 3 3\n2 2 1\n1 2 4\n4 2 2", "2 100\n-1 1 100\n2 0 50", "2 99\n1 1 99\n1 1 50", "4 8\n5 3 2\n2 1 1\n1 4 4\n3 2 4", "4 8\n4 3 4\n1 1 1\n1 1 3\n3 2 2", "2 100\n1 0 99\n2 1 51", "2 99\n1 1 100\n2 1 50", "4 6\n4 3 1\n2 1 1\n1 3 4\n3 2 3", "4 8\n4 4 2\n1 1 1\n1 2 5\n2 2 3", "4 8\n3 3 2\n0 1 1\n1 2 4\n3 2 2"], "output": ["150", "12"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02390 Watch", "description": "Write a program which reads an integer $S$ [second] and converts it to $h:m:s$ where $h$, $m$, $s$ denote hours, minutes (less than 60) and seconds (less than 60) respectively.\n\nConstraints\n\n* $0 \\leq S \\leq 86400$\n\nInput\n\nAn integer $S$ is given in a line.\n\nOutput\n\nPrint $h$, $m$ and $s$ separated by ':'. You do not need to put '0' for a value, which consists of a digit.\n\nExample\n\nInput\n\n46979\n\n\nOutput\n\n13:2:59", "testcase": ["46980", "46978", "46978", "46978", "46978", "46978", "46978", "46978", "46978", "46978"], "output": ["13:2:59"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02417 Counting Characters", "description": "Write a program which counts and reports the number of each alphabetical letter. Ignore the case of characters.\n\nConstraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.\n\nOutput\n\nPrints the number of alphabetical letters in the following format:\n\n\na : The number of 'a'\nb : The number of 'b'\nc : The number of 'c'\n.\n.\nz : The number of 'z'\n\n\nExample\n\nInput\n\nThis is a pen.\n\n\nOutput\n\na : 1\nb : 0\nc : 0\nd : 0\ne : 1\nf : 0\ng : 0\nh : 1\ni : 2\nj : 0\nk : 0\nl : 0\nm : 0\nn : 1\no : 0\np : 1\nq : 0\nr : 0\ns : 2\nt : 1\nu : 0\nv : 0\nw : 0\nx : 0\ny : 0\nz : 0", "testcase": ["This is a epn.", "TIis is h pen.", "This ij l pen.", "This js a .pen", "ThiR iz a pen.", "This ds z pen.", "This ys l pen.", "This ie a .epn", "ThiV is t pen.", "TPih is a pen."], "output": ["a : 1\nb : 0\nc : 0\nd : 0\ne : 1\nf : 0\ng : 0\nh : 1\ni : 2\nj : 0\nk : 0\nl : 0\nm : 0\nn : 1\no : 0\np : 1\nq : 0\nr : 0\ns : 2\nt : 1\nu : 0\nv : 0\nw : 0\nx : 0\ny : 0\nz : 0"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "You will turn on the air conditioner if, and only if, the temperature of the room is 30 degrees Celsius or above.\n\nThe current temperature of the room is X degrees Celsius. Will you turn on the air conditioner?\n\nConstraints\n\n* -40 \\leq X \\leq 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX\n\n\nOutput\n\nPrint `Yes` if you will turn on the air conditioner; print `No` otherwise.\n\nExamples\n\nInput\n\n25\n\n\nOutput\n\nNo\n\n\nInput\n\n30\n\n\nOutput\n\nYes", "testcase": ["31", "26", "26", "26", "29", "29", "29", "26", "29", "31"], "output": ["No", "Yes"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "M-kun is a competitor in AtCoder, whose highest rating is X.\nIn this site, a competitor is given a kyu (class) according to his/her highest rating. For ratings from 400 through 1999, the following kyus are given:\n\n* From 400 through 599: 8-kyu\n* From 600 through 799: 7-kyu\n* From 800 through 999: 6-kyu\n* From 1000 through 1199: 5-kyu\n* From 1200 through 1399: 4-kyu\n* From 1400 through 1599: 3-kyu\n* From 1600 through 1799: 2-kyu\n* From 1800 through 1999: 1-kyu\n\n\n\nWhat kyu does M-kun have?\n\nConstraints\n\n* 400 \\leq X \\leq 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX\n\n\nOutput\n\nPrint the kyu M-kun has, as an integer. For example, if he has 8-kyu, print `8`.\n\nExamples\n\nInput\n\n725\n\n\nOutput\n\n7\n\n\nInput\n\n1600\n\n\nOutput\n\n2", "testcase": ["724", "726", "1601", "724", "1599", "726", "726", "724", "724", "1599"], "output": ["7", "2"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "We will buy a product for N yen (the currency of Japan) at a shop.\n\nIf we use only 1000-yen bills to pay the price, how much change will we receive?\n\nAssume we use the minimum number of bills required.\n\nConstraints\n\n* 1 \\leq N \\leq 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the amount of change as an integer.\n\nExamples\n\nInput\n\n1900\n\n\nOutput\n\n100\n\n\nInput\n\n3000\n\n\nOutput\n\n0", "testcase": ["1899", "1901", "1901", "3001", "2999", "1901", "1901", "2999", "3001", "3001"], "output": ["0", "100"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "A shop sells N kinds of fruits, Fruit 1, \\ldots, N, at prices of p_1, \\ldots, p_N yen per item, respectively. (Yen is the currency of Japan.)\n\nHere, we will choose K kinds of fruits and buy one of each chosen kind. Find the minimum possible total price of those fruits.\n\nConstraints\n\n* 1 \\leq K \\leq N \\leq 1000\n* 1 \\leq p_i \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 \\ldots p_N\n\n\nOutput\n\nPrint an integer representing the minimum possible total price of fruits.\n\nExamples\n\nInput\n\n5 3\n50 100 80 120 80\n\n\nOutput\n\n210\n\n\nInput\n\n1 1\n1000\n\n\nOutput\n\n1000", "testcase": ["1 2\n1000", "5 2\n51 99 80 120 80", "5 3\n50 99 79 120 79", "1 2\n1000", "1 1\n999", "5 3\n50 100 81 118 80", "5 3\n50 100 80 121 82", "5 3\n52 100 80 121 80", "1 1\n999", "5 2\n50 99 80 120 79"], "output": ["1000", "210"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "The cat Snuke wants to play a popular Japanese game called ÅtCoder, so Iroha has decided to teach him Japanese.\n\nWhen counting pencils in Japanese, the counter word \"本\" follows the number. The pronunciation of this word varies depending on the number. Specifically, the pronunciation of \"本\" in the phrase \"N 本\" for a positive integer N not exceeding 999 is as follows:\n\n* `hon` when the digit in the one's place of N is 2, 4, 5, 7, or 9;\n* `pon` when the digit in the one's place of N is 0, 1, 6 or 8;\n* `bon` when the digit in the one's place of N is 3.\n\n\n\nGiven N, print the pronunciation of \"本\" in the phrase \"N 本\".\n\nConstraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the answer.\n\nExamples\n\nInput\n\n16\n\n\nOutput\n\npon\n\n\nInput\n\n2\n\n\nOutput\n\nhon\n\n\nInput\n\n183\n\n\nOutput\n\nbon", "testcase": ["15", "3", "182", "182", "17", "184", "17", "3", "15", "3"], "output": ["pon", "hon", "bon"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "There is a grass field that stretches infinitely.\n\nIn this field, there is a negligibly small cow. Let (x, y) denote the point that is x\\ \\mathrm{cm} south and y\\ \\mathrm{cm} east of the point where the cow stands now. The cow itself is standing at (0, 0).\n\nThere are also N north-south lines and M east-west lines drawn on the field. The i-th north-south line is the segment connecting the points (A_i, C_i) and (B_i, C_i), and the j-th east-west line is the segment connecting the points (D_j, E_j) and (D_j, F_j).\n\nWhat is the area of the region the cow can reach when it can move around as long as it does not cross the segments (including the endpoints)? If this area is infinite, print `INF` instead.\n\nConstraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 \\leq N, M \\leq 1000\n* A_i < B_i\\ (1 \\leq i \\leq N)\n* E_j < F_j\\ (1 \\leq j \\leq M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M\n\n\nOutput\n\nIf the area of the region the cow can reach is infinite, print `INF`; otherwise, print an integer representing the area in \\mathrm{cm^2}.\n\n(Under the constraints, it can be proved that the area of the region is always an integer if it is not infinite.)\n\nExamples\n\nInput\n\n5 6\n1 2 0\n0 1 1\n0 2 2\n-3 4 -1\n-2 6 3\n1 0 1\n0 1 2\n2 0 2\n-1 -4 5\n3 -2 4\n1 2 4\n\n\nOutput\n\n13\n\n\nInput\n\n6 1\n-3 -1 -2\n-3 -1 1\n-2 -1 2\n1 4 -2\n1 4 -1\n1 4 1\n3 1 4\n\n\nOutput\n\nINF", "testcase": ["6 1\n-3 -1 -2\n-4 -1 1\n-2 -1 2\n1 4 -4\n0 3 -1\n1 5 1\n4 1 4", "5 6\n1 2 0\n-1 1 0\n0 1 2\n-2 4 0\n-2 6 2\n1 0 0\n1 1 2\n1 0 1\n-1 -4 5\n3 -2 4\n1 2 5", "6 1\n-3 -1 -2\n-2 0 1\n-2 -1 2\n2 4 -2\n1 4 -1\n2 4 2\n3 2 5", "6 1\n-3 -1 -2\n-3 -2 0\n-1 -1 1\n1 4 -3\n1 4 -1\n1 4 1\n3 1 4", "5 6\n2 1 0\n0 1 1\n-1 2 2\n-3 4 -1\n-2 7 3\n1 1 0\n0 1 2\n3 0 2\n0 -4 4\n3 -2 4\n0 2 5", "5 7\n1 2 0\n0 1 1\n0 1 2\n-3 5 -1\n-2 6 3\n1 1 2\n0 0 2\n3 -1 2\n-1 -4 4\n3 -2 4\n1 2 4", "6 1\n-3 -1 -3\n-3 -1 1\n-2 -1 2\n1 4 -2\n1 4 -1\n1 4 1\n3 1 4", "5 6\n1 2 0\n0 2 0\n0 3 2\n-4 4 -1\n-2 6 3\n0 0 1\n0 2 2\n3 0 1\n-2 -4 5\n4 -2 5\n1 2 4", "6 1\n-3 0 -2\n-3 0 0\n-3 -1 2\n1 5 -2\n1 4 -1\n1 5 0\n3 1 4", "6 1\n-5 -1 -1\n-3 -1 0\n-2 -1 2\n1 4 -2\n1 3 -1\n1 4 2\n2 1 4"], "output": ["INF", "13"], "difficulty": 0, "time_limit": {"seconds": 3, "nanos": 0}}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Takahashi the Jumbo will practice golf.\n\nHis objective is to get a carry distance that is a multiple of K, while he can only make a carry distance of between A and B (inclusive).\n\nIf he can achieve the objective, print `OK`; if he cannot, print `NG`.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A \\leq B \\leq 1000\n* 1 \\leq K \\leq 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B\n\n\nOutput\n\nIf he can achieve the objective, print `OK`; if he cannot, print `NG`.\n\nExamples\n\nInput\n\n7\n500 600\n\n\nOutput\n\nOK\n\n\nInput\n\n4\n5 7\n\n\nOutput\n\nNG\n\n\nInput\n\n1\n11 11\n\n\nOutput\n\nOK", "testcase": ["1\n11 10", "7\n500 601", "7\n500 601", "1\n12 11", "1\n11 10", "4\n6 7", "4\n5 8", "4\n5 6", "1\n11 12", "4\n5 8"], "output": ["NG", "OK", "OK"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Given are integers A, B, and N.\n\nFind the maximum possible value of floor(Ax/B) - A × floor(x/B) for a non-negative integer x not greater than N.\n\nHere floor(t) denotes the greatest integer not greater than the real number t.\n\nConstraints\n\n* 1 ≤ A ≤ 10^{6}\n* 1 ≤ B ≤ 10^{12}\n* 1 ≤ N ≤ 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N\n\n\nOutput\n\nPrint the maximum possible value of floor(Ax/B) - A × floor(x/B) for a non-negative integer x not greater than N, as an integer.\n\nExamples\n\nInput\n\n5 7 4\n\n\nOutput\n\n2\n\n\nInput\n\n11 10 9\n\n\nOutput\n\n9", "testcase": ["5 7 3", "5 8 4", "11 11 9", "5 6 4", "5 7 3", "11 9 9", "11 10 8", "5 7 3", "11 10 10", "5 6 4"], "output": ["2", "9"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "We have N+1 integers: 10^{100}, 10^{100}+1, ..., 10^{100}+N.\n\nWe will choose K or more of these integers. Find the number of possible values of the sum of the chosen numbers, modulo (10^9+7).\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* 1 \\leq K \\leq N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\n\n\nOutput\n\nPrint the number of possible values of the sum, modulo (10^9+7).\n\nExamples\n\nInput\n\n3 2\n\n\nOutput\n\n10\n\n\nInput\n\n200000 200001\n\n\nOutput\n\n1\n\n\nInput\n\n141421 35623\n\n\nOutput\n\n220280457", "testcase": ["3 3", "200000 200000", "200000 200000", "200000 200002", "3 3", "141421 35622", "3 3", "3 1", "200000 200000", "3 3"], "output": ["220280457", "1", "10"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "We have held a popularity poll for N items on sale. Item i received A_i votes.\n\nFrom these N items, we will select M as popular items. However, we cannot select an item with less than \\dfrac{1}{4M} of the total number of votes.\n\nIf M popular items can be selected, print `Yes`; otherwise, print `No`.\n\nConstraints\n\n* 1 \\leq M \\leq N \\leq 100\n* 1 \\leq A_i \\leq 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N\n\n\nOutput\n\nIf M popular items can be selected, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n4 1\n5 4 2 1\n\n\nOutput\n\nYes\n\n\nInput\n\n3 2\n380 19 1\n\n\nOutput\n\nNo\n\n\nInput\n\n12 3\n4 56 78 901 2 345 67 890 123 45 6 789\n\n\nOutput\n\nYes", "testcase": ["4 1\n4 5 2 1", "3 2\n379 19 0", "3 2\n381 18 1", "12 3\n4 56 78 901 2 345 65 889 124 45 5 789", "4 1\n5 4 2 1", "12 3\n4 55 78 900 2 345 67 889 123 46 5 789", "3 0\n380 19 1", "4 2\n5 4 1 1", "3 2\n380 18 0", "3 2\n380 21 1"], "output": ["Yes", "Yes", "No"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Takahashi loves gold coins. He gains 1000 happiness points for each 500-yen coin he has and gains 5 happiness points for each 5-yen coin he has. (Yen is the currency of Japan.)\n\nTakahashi has X yen. If he exchanges his money so that he will gain the most happiness points, how many happiness points will he earn?\n\n(We assume that there are six kinds of coins available: 500-yen, 100-yen, 50-yen, 10-yen, 5-yen, and 1-yen coins.)\n\nConstraints\n\n* 0 \\leq X \\leq 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX\n\n\nOutput\n\nPrint the maximum number of happiness points that can be earned.\n\nExamples\n\nInput\n\n1024\n\n\nOutput\n\n2020\n\n\nInput\n\n0\n\n\nOutput\n\n0\n\n\nInput\n\n1000000000\n\n\nOutput\n\n2000000000", "testcase": ["-1", "1023", "-1", "1023", "1000000001", "1025", "1023", "999999999", "999999999", "1000000001"], "output": ["0", "2000000000", "2020"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Given is a lowercase English letter C that is not `z`. Print the letter that follows C in alphabetical order.\n\nConstraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC\n\n\nOutput\n\nPrint the letter that follows C in alphabetical order.\n\nExamples\n\nInput\n\na\n\n\nOutput\n\nb\n\n\nInput\n\ny\n\n\nOutput\n\nz", "testcase": ["u", "w", "r", "n", "y", "t", "d", "h", "l", "w"], "output": ["z", "b"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Takahashi has K 500-yen coins. (Yen is the currency of Japan.) If these coins add up to X yen or more, print `Yes`; otherwise, print `No`.\n\nConstraints\n\n* 1 \\leq K \\leq 100\n* 1 \\leq X \\leq 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X\n\n\nOutput\n\nIf the coins add up to X yen or more, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n2 900\n\n\nOutput\n\nYes\n\n\nInput\n\n1 501\n\n\nOutput\n\nNo\n\n\nInput\n\n4 2000\n\n\nOutput\n\nYes", "testcase": ["1 502", "4 1999", "4 1999", "4 2001", "2 899", "4 2001", "1 500", "1 502", "2 901", "1 502"], "output": ["No", "Yes", "Yes"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "There is a knight - the chess piece - at the origin (0, 0) of a two-dimensional grid.\n\nWhen the knight is at the square (i, j), it can be moved to either (i+1,j+2) or (i+2, j+1).\n\nIn how many ways can the knight reach the square (X, Y)?\n\nFind the number of ways modulo 10^9 + 7.\n\nConstraints\n\n* 1 \\leq X \\leq 10^6\n* 1 \\leq Y \\leq 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y\n\n\nOutput\n\nPrint the number of ways for the knight to reach (X, Y) from (0, 0), modulo 10^9 + 7.\n\nExamples\n\nInput\n\n3 3\n\n\nOutput\n\n2\n\n\nInput\n\n2 2\n\n\nOutput\n\n0\n\n\nInput\n\n999999 999999\n\n\nOutput\n\n151840682", "testcase": ["3 4", "2 3", "999999 1000000", "3 4", "999999 999998", "999999 1000000", "999999 1000000", "2 3", "999999 999998", "999999 999998"], "output": ["151840682", "0", "2"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Given is a string S. Let T be the concatenation of K copies of S. We can repeatedly perform the following operation: choose a character in T and replace it with a different character. Find the minimum number of operations required to satisfy the following condition: any two adjacent characters in T are different.\n\nConstraints\n\n* 1 \\leq |S| \\leq 100\n* S consists of lowercase English letters.\n* 1 \\leq K \\leq 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK\n\n\nOutput\n\nPrint the minimum number of operations required.\n\nExamples\n\nInput\n\nissii\n2\n\n\nOutput\n\n4\n\n\nInput\n\nqq\n81\n\n\nOutput\n\n81\n\n\nInput\n\ncooooooooonteeeeeeeeeest\n999993333\n\n\nOutput\n\n8999939997", "testcase": ["cooooooooonteeeeeeeeevst\n999993333", "cooooozooonteeeeeeeeeest\n999993333", "cooooooooonteeeeeeeeeest\n999993334", "gq\n81", "cooooooooonteeeeeeeeeest\n999993332", "cooooooooonteeeeeeeeeest\n999993332", "issii\n1", "cooooooooonteeeeeeeeeest\n999993334", "qt\n81", "issii\n3"], "output": ["8999939997", "4", "81"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "N friends of Takahashi has come to a theme park.\n\nTo ride the most popular roller coaster in the park, you must be at least K centimeters tall.\n\nThe i-th friend is h_i centimeters tall.\n\nHow many of the Takahashi's friends can ride the roller coaster?\n\nConstraints\n\n* 1 \\le N \\le 10^5\n* 1 \\le K \\le 500\n* 1 \\le h_i \\le 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 \\ldots h_N\n\n\nOutput\n\nPrint the number of people among the Takahashi's friends who can ride the roller coaster.\n\nExamples\n\nInput\n\n4 150\n150 140 100 200\n\n\nOutput\n\n2\n\n\nInput\n\n1 500\n499\n\n\nOutput\n\n0\n\n\nInput\n\n5 1\n100 200 300 400 500\n\n\nOutput\n\n5", "testcase": ["4 151\n149 140 100 200", "4 150\n150 141 99 200", "1 500\n500", "5 1\n99 199 300 400 501", "4 150\n150 140 100 200", "1 500\n498", "4 149\n150 141 100 200", "1 499\n499", "1 499\n499", "5 0\n100 200 301 399 500"], "output": ["5", "2", "0"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "E869120 is initially standing at the origin (0, 0) in a two-dimensional plane.\n\nHe has N engines, which can be used as follows:\n\n* When E869120 uses the i-th engine, his X- and Y-coordinate change by x_i and y_i, respectively. In other words, if E869120 uses the i-th engine from coordinates (X, Y), he will move to the coordinates (X + x_i, Y + y_i).\n* E869120 can use these engines in any order, but each engine can be used at most once. He may also choose not to use some of the engines.\n\n\n\nHe wants to go as far as possible from the origin. Let (X, Y) be his final coordinates. Find the maximum possible value of \\sqrt{X^2 + Y^2}, the distance from the origin.\n\nConstraints\n\n* 1 \\leq N \\leq 100\n* -1 \\ 000 \\ 000 \\leq x_i \\leq 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 \\leq y_i \\leq 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N\n\n\nOutput\n\nPrint the maximum possible final distance from the origin, as a real value. Your output is considered correct when the relative or absolute error from the true answer is at most 10^{-10}.\n\nExamples\n\nInput\n\n3\n0 10\n5 -5\n-5 -5\n\n\nOutput\n\n10.000000000000000000000000000000000000000000000000\n\n\nInput\n\n5\n1 1\n1 0\n0 1\n-1 0\n0 -1\n\n\nOutput\n\n2.828427124746190097603377448419396157139343750753\n\n\nInput\n\n5\n1 1\n2 2\n3 3\n4 4\n5 5\n\n\nOutput\n\n21.213203435596425732025330863145471178545078130654\n\n\nInput\n\n3\n0 0\n0 1\n1 0\n\n\nOutput\n\n1.414213562373095048801688724209698078569671875376\n\n\nInput\n\n1\n90447 91000\n\n\nOutput\n\n128303.000000000000000000000000000000000000000000000000\n\n\nInput\n\n2\n96000 -72000\n-72000 54000\n\n\nOutput\n\n120000.000000000000000000000000000000000000000000000000\n\n\nInput\n\n10\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18\n19 20\n\n\nOutput\n\n148.660687473185055226120082139313966514489855137208", "testcase": ["2\n96000 -72000\n-72000 54000", "3\n0 10\n7 -6\n-5 -5", "5\n0 1\n2 2\n3 3\n6 4\n6 5", "5\n1 2\n3 2\n4 3\n4 5\n5 5", "10\n2 1\n3 4\n5 6\n7 8\n9 10\n11 11\n13 15\n15 17\n17 18\n19 20", "10\n1 2\n2 4\n5 5\n7 9\n9 9\n11 12\n13 15\n15 16\n17 17\n20 20", "5\n1 1\n0 2\n2 4\n4 4\n5 5", "2\n96000 -71999\n-71999 54000", "5\n0 1\n0 0\n0 2\n-2 0\n0 -1", "10\n0 2\n2 3\n5 6\n7 7\n9 10\n11 13\n12 14\n16 16\n17 18\n19 20"], "output": ["128303.000000000000000000000000000000000000000000000000", "120000.000000000000000000000000000000000000000000000000", "10.000000000000000000000000000000000000000000000000", "148.660687473185055226120082139313966514489855137208", "2.828427124746190097603377448419396157139343750753", "1.414213562373095048801688724209698078569671875376", "21.213203435596425732025330863145471178545078130654"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Given is a rooted tree with N vertices numbered 1 to N. The root is Vertex 1, and the i-th edge (1 \\leq i \\leq N - 1) connects Vertex a_i and b_i.\n\nEach of the vertices has a counter installed. Initially, the counters on all the vertices have the value 0.\n\nNow, the following Q operations will be performed:\n\n* Operation j (1 \\leq j \\leq Q): Increment by x_j the counter on every vertex contained in the subtree rooted at Vertex p_j.\n\n\n\nFind the value of the counter on each vertex after all operations.\n\nConstraints\n\n* 2 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq Q \\leq 2 \\times 10^5\n* 1 \\leq a_i < b_i \\leq N\n* 1 \\leq p_j \\leq N\n* 1 \\leq x_j \\leq 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q\n\n\nOutput\n\nPrint the values of the counters on Vertex 1, 2, \\ldots, N after all operations, in this order, with spaces in between.\n\nExamples\n\nInput\n\n4 3\n1 2\n2 3\n2 4\n2 10\n1 100\n3 1\n\n\nOutput\n\n100 110 111 110\n\n\nInput\n\n6 2\n1 2\n1 3\n2 4\n3 6\n2 5\n1 10\n1 10\n\n\nOutput\n\n20 20 20 20 20 20", "testcase": ["4 3\n1 2\n0 3\n2 4\n2 9\n1 101\n3 2", "6 2\n1 2\n1 3\n2 4\n3 6\n2 5\n1 10\n0 10", "6 2\n1 2\n1 3\n2 4\n3 5\n2 5\n1 12\n2 9", "4 3\n1 2\n1 3\n2 4\n2 10\n2 100\n3 2", "4 3\n0 2\n2 2\n2 5\n1 10\n1 101\n3 1", "6 2\n1 2\n1 3\n2 5\n3 5\n2 6\n1 11\n2 10", "6 2\n1 2\n2 3\n2 4\n5 6\n2 5\n1 10\n1 10", "6 2\n0 1\n3 4\n2 4\n3 6\n2 5\n1 10\n1 10", "6 2\n1 2\n3 3\n3 4\n3 6\n2 6\n0 10\n1 10", "4 3\n1 2\n2 3\n2 4\n2 10\n1 101\n3 1"], "output": ["20 20 20 20 20 20", "100 110 111 110"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "There are N squares arranged in a row from left to right. The height of the i-th square from the left is H_i.\n\nFor each square, you will perform either of the following operations once:\n\n* Decrease the height of the square by 1.\n* Do nothing.\n\n\n\nDetermine if it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq H_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N\n\n\nOutput\n\nIf it is possible to perform the operations so that the heights of the squares are non-decreasing from left to right, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n5\n1 2 1 1 3\n\n\nOutput\n\nYes\n\n\nInput\n\n4\n1 3 2 1\n\n\nOutput\n\nNo\n\n\nInput\n\n5\n1 2 3 4 5\n\n\nOutput\n\nYes\n\n\nInput\n\n1\n1000000000\n\n\nOutput\n\nYes", "testcase": ["5\n2 2 1 1 4", "4\n1 4 1 1", "4\n1 3 4 1", "5\n1 2 -1 1 3", "4\n2 3 2 2", "5\n2 2 3 4 6", "5\n2 1 3 4 5", "4\n1 4 2 0", "5\n2 2 3 3 5", "1\n1000000001"], "output": ["Yes", "No", "Yes", "Yes"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "You are given a sequence with N integers: A = \\\\{ A_1, A_2, \\cdots, A_N \\\\}. For each of these N integers, we will choose a color and paint the integer with that color. Here the following condition must be satisfied:\n\n* If A_i and A_j (i < j) are painted with the same color, A_i < A_j.\n\n\n\nFind the minimum number of colors required to satisfy the condition.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq A_i \\leq 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N\n\n\nOutput\n\nPrint the minimum number of colors required to satisfy the condition.\n\nExamples\n\nInput\n\n5\n2\n1\n4\n5\n3\n\n\nOutput\n\n2\n\n\nInput\n\n4\n0\n0\n0\n0\n\n\nOutput\n\n4", "testcase": ["5\n2\n1\n4\n3\n3", "5\n2\n2\n4\n6\n3", "5\n2\n1\n3\n5\n4", "4\n0\n1\n1\n0", "4\n-1\n1\n0\n0", "4\n0\n0\n0\n0", "4\n1\n-1\n0\n0", "4\n0\n0\n-1\n-1", "4\n0\n0\n-1\n1", "5\n2\n1\n4\n6\n2"], "output": ["4", "2"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "You are given a simple connected undirected graph with N vertices and M edges. The vertices are numbered 1 to N, and the i-th edge connects Vertex A_i and Vertex B_i. Takahashi will assign one of the two possible directions to each of the edges in the graph to make a directed graph. Determine if it is possible to make a directed graph with an even number of edges going out from every vertex. If the answer is yes, construct one such graph.\n\nConstraints\n\n* 2 \\leq N \\leq 10^5\n* N-1 \\leq M \\leq 10^5\n* 1 \\leq A_i,B_i \\leq N (1\\leq i\\leq M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M\n\n\nOutput\n\nIf it is impossible to assign directions\b to satisfy the requirement, print -1. Otherwise, print an assignment of directions that satisfies the requirement, in the following format:\n\n\nC_1 D_1\n:\nC_M D_M\n\n\nHere each pair (C_i, D_i) means that there is an edge directed from Vertex C_i to Vertex D_i. The edges may be printed in any order.\n\nExamples\n\nInput\n\n4 4\n1 2\n2 3\n3 4\n4 1\n\n\nOutput\n\n1 2\n1 4\n3 2\n3 4\n\n\nInput\n\n5 5\n1 2\n2 3\n3 4\n2 5\n4 5\n\n\nOutput\n\n-1", "testcase": ["5 5\n1 2\n2 3\n3 4\n2 4\n2 4", "5 5\n2 2\n2 3\n3 4\n1 5\n4 5", "4 4\n1 2\n2 3\n3 4\n5 1", "4 4\n1 2\n2 3\n2 4\n3 0", "5 5\n1 2\n3 3\n3 4\n4 6\n4 5", "5 5\n1 2\n2 3\n2 4\n2 5\n3 7", "4 4\n0 2\n0 3\n3 4\n4 1", "4 3\n1 4\n2 3\n3 4\n4 1", "4 4\n1 3\n2 5\n3 4\n4 1", "4 4\n0 2\n2 4\n3 4\n4 2"], "output": ["-1", "1 2\n1 4\n3 2\n3 4"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "You are given two integer sequences S and T of length N and M, respectively, both consisting of integers between 1 and 10^5 (inclusive).\n\nIn how many pairs of a subsequence of S and a subsequence of T do the two subsequences are the same in content?\n\nHere the subsequence of A is a sequence obtained by removing zero or more elements from A and concatenating the remaining elements without changing the order.\n\nFor both S and T, we distinguish two subsequences if the sets of the indices of the removed elements are different, even if the subsequences are the same in content.\n\nSince the answer can be tremendous, print the number modulo 10^9+7.\n\nConstraints\n\n* 1 \\leq N, M \\leq 2 \\times 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 \\leq S_i, T_i \\leq 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}\n\n\nOutput\n\nPrint the number of pairs of a subsequence of S and a subsequence of T such that the subsequences are the same in content, modulo 10^9+7.\n\nExamples\n\nInput\n\n2 2\n1 3\n3 1\n\n\nOutput\n\n3\n\n\nInput\n\n2 2\n1 1\n1 1\n\n\nOutput\n\n6\n\n\nInput\n\n4 4\n3 4 5 6\n3 4 5 6\n\n\nOutput\n\n16\n\n\nInput\n\n10 9\n9 6 5 7 5 9 8 5 6 7\n8 6 8 5 5 7 9 9 7\n\n\nOutput\n\n191\n\n\nInput\n\n20 20\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1\n\n\nOutput\n\n846527861", "testcase": ["4 4\n3 4 5 5\n3 3 4 6", "2 2\n1 0\n1 0", "10 9\n9 5 4 7 5 9 9 6 6 8\n9 6 8 6 5 7 9 9 7", "4 4\n2 3 5 6\n3 5 5 6", "20 20\n1 1 1 1 2 1 1 1 1 1 0 1 2 1 1 1 1 1 0 2\n0 1 1 1 1 1 1 1 -1 0 1 1 1 1 1 2 1 2 1 1", "20 22\n1 2 1 1 1 1 2 0 1 1 2 0 0 1 1 1 1 1 1 1\n1 1 1 1 0 3 1 2 1 1 1 1 1 1 1 1 1 1 1 2", "2 2\n0 3\n3 0", "20 20\n1 1 0 2 1 0 1 1 0 1 1 2 1 1 1 1 1 1 0 1\n1 2 2 1 1 1 1 1 1 0 2 1 1 1 1 1 1 1 2 1", "4 3\n2 4 4 6\n3 4 5 6", "4 4\n3 4 5 5\n3 4 5 6"], "output": ["191", "846527861", "16", "6", "3"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "There is a staircase with N steps. Takahashi is now standing at the foot of the stairs, that is, on the 0-th step. He can climb up one or two steps at a time.\n\nHowever, the treads of the a_1-th, a_2-th, a_3-th, \\ldots, a_M-th steps are broken, so it is dangerous to set foot on those steps.\n\nHow many are there to climb up to the top step, that is, the N-th step, without setting foot on the broken steps? Find the count modulo 1\\ 000\\ 000\\ 007.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 0 \\leq M \\leq N-1\n* 1 \\leq a_1 < a_2 < ... < a_M \\leq N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M\n\n\nOutput\n\nPrint the number of ways to climb up the stairs under the condition, modulo 1\\ 000\\ 000\\ 007.\n\nExamples\n\nInput\n\n6 1\n3\n\n\nOutput\n\n4\n\n\nInput\n\n10 2\n4\n5\n\n\nOutput\n\n0\n\n\nInput\n\n100 5\n1\n23\n45\n67\n89\n\n\nOutput\n\n608200469", "testcase": ["10 3\n5\n5", "6 0\n3", "6 2\n3", "100 5\n1\n23\n45\n67\n88", "10 3\n4\n4", "100 5\n2\n23\n45\n68\n88", "10 3\n5\n5", "10 3\n5\n5", "6 1\n4", "6 1\n2"], "output": ["608200469", "0", "4"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Your friend gave you a dequeue D as a birthday present.\n\nD is a horizontal cylinder that contains a row of N jewels.\n\nThe values of the jewels are V_1, V_2, ..., V_N from left to right. There may be jewels with negative values.\n\nIn the beginning, you have no jewel in your hands.\n\nYou can perform at most K operations on D, chosen from the following, at most K times (possibly zero):\n\n* Operation A: Take out the leftmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n* Operation B: Take out the rightmost jewel contained in D and have it in your hand. You cannot do this operation when D is empty.\n\n* Operation C: Choose a jewel in your hands and insert it to the left end of D. You cannot do this operation when you have no jewel in your hand.\n\n* Operation D: Choose a jewel in your hands and insert it to the right end of D. You cannot do this operation when you have no jewel in your hand.\n\n\n\n\nFind the maximum possible sum of the values of jewels in your hands after the operations.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 50\n* 1 \\leq K \\leq 100\n* -10^7 \\leq V_i \\leq 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N\n\n\nOutput\n\nPrint the maximum possible sum of the values of jewels in your hands after the operations.\n\nExamples\n\nInput\n\n6 4\n-10 8 2 1 2 6\n\n\nOutput\n\n14\n\n\nInput\n\n6 4\n-6 -100 50 -2 -5 -3\n\n\nOutput\n\n44\n\n\nInput\n\n6 3\n-6 -100 50 -2 -5 -3\n\n\nOutput\n\n0", "testcase": ["6 4\n-10 9 3 1 3 6", "6 4\n-6 -100 50 -1 -3 -3", "6 3\n-6 -99 49 -3 -5 -3", "6 3\n-5 -100 50 -3 -5 -3", "6 4\n-6 -100 50 -1 -5 -3", "6 2\n-5 -100 49 -2 -5 -3", "6 2\n-6 -99 49 -2 -5 -3", "6 3\n-6 -101 51 -1 -5 -3", "6 4\n-6 -99 49 -3 -5 -3", "6 5\n-10 8 3 0 2 6"], "output": ["14", "44", "0"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "The restaurant AtCoder serves the following five dishes:\n\n* ABC Don (rice bowl): takes A minutes to serve.\n* ARC Curry: takes B minutes to serve.\n* AGC Pasta: takes C minutes to serve.\n* APC Ramen: takes D minutes to serve.\n* ATC Hanbagu (hamburger patty): takes E minutes to serve.\n\n\n\nHere, the time to serve a dish is the time between when an order is placed and when the dish is delivered.\n\nThis restaurant has the following rules on orders:\n\n* An order can only be placed at a time that is a multiple of 10 (time 0, 10, 20, ...).\n* Only one dish can be ordered at a time.\n* No new order can be placed when an order is already placed and the dish is still not delivered, but a new order can be placed at the exact time when the dish is delivered.\n\n\n\nE869120 arrives at this restaurant at time 0. He will order all five dishes. Find the earliest possible time for the last dish to be delivered.\nHere, he can order the dishes in any order he likes, and he can place an order already at time 0.\n\nConstraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE\n\n\nOutput\n\nPrint the earliest possible time for the last dish to be delivered, as an integer.\n\nExamples\n\nInput\n\n29\n20\n7\n35\n120\n\n\nOutput\n\n215\n\n\nInput\n\n101\n86\n119\n108\n57\n\n\nOutput\n\n481\n\n\nInput\n\n123\n123\n123\n123\n123\n\n\nOutput\n\n643", "testcase": ["101\n87\n119\n109\n57", "29\n21\n7\n35\n119", "101\n86\n119\n109\n58", "29\n21\n7\n34\n120", "123\n123\n122\n123\n122", "29\n20\n7\n34\n121", "29\n19\n7\n35\n121", "29\n21\n8\n35\n120", "29\n21\n6\n35\n120", "101\n86\n120\n107\n57"], "output": ["643", "215", "481"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Takahashi likes the sound when he buys a drink from a vending machine.\n\nThat sound can be heard by spending A yen (the currency of Japan) each time.\n\nTakahashi has B yen. He will hear the sound as many times as he can with that money, but at most C times, as he would be satisfied at that time.\n\nHow many times will he hear the sound?\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A, B, C \\leq 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C\n\n\nOutput\n\nPrint the number of times Takahashi will hear his favorite sound.\n\nExamples\n\nInput\n\n2 11 4\n\n\nOutput\n\n4\n\n\nInput\n\n3 9 5\n\n\nOutput\n\n3\n\n\nInput\n\n100 1 10\n\n\nOutput\n\n0", "testcase": ["100 1 11", "100 1 11", "3 10 5", "100 1 9", "2 10 4", "3 9 4", "3 8 5", "100 2 10", "3 10 5", "100 1 9"], "output": ["3", "4", "0"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "You are given positive integers A and B.\n\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq A \\leq B \\leq 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\n\n\nOutput\n\nIf A is a divisor of B, print A + B; otherwise, print B - A.\n\nExamples\n\nInput\n\n4 12\n\n\nOutput\n\n16\n\n\nInput\n\n8 20\n\n\nOutput\n\n12\n\n\nInput\n\n1 1\n\n\nOutput\n\n2", "testcase": ["4 11", "1 0", "8 19", "8 19", "8 19", "8 19", "4 11", "4 13", "1 2", "8 19"], "output": ["16", "12", "2"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "We will play a one-player game using a number line and N pieces.\n\nFirst, we place each of these pieces at some integer coordinate.\n\nHere, multiple pieces can be placed at the same coordinate.\n\nOur objective is to visit all of the M coordinates X_1, X_2, ..., X_M with these pieces, by repeating the following move:\n\nMove: Choose a piece and let x be its coordinate. Put that piece at coordinate x+1 or x-1.\n\nNote that the coordinates where we initially place the pieces are already regarded as visited.\n\nFind the minimum number of moves required to achieve the objective.\n\nConstraints\n\n* All values in input are integers.\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* -10^5 \\leq X_i \\leq 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M\n\n\nOutput\n\nFind the minimum number of moves required to achieve the objective.\n\nExamples\n\nInput\n\n2 5\n10 12 1 2 14\n\n\nOutput\n\n5\n\n\nInput\n\n3 7\n-10 -3 0 9 -100 2 17\n\n\nOutput\n\n19\n\n\nInput\n\n100 1\n-100000\n\n\nOutput\n\n0", "testcase": ["2 5\n11 11 0 2 14", "100 2\n-100000", "100 1\n-99999", "3 6\n-10 -3 0 9 -100 1 16", "3 7\n-10 -3 -1 9 -100 2 17", "2 5\n12 12 2 2 14", "3 7\n-9 -4 0 8 -100 2 17", "3 7\n-10 -3 0 8 -100 2 15", "3 8\n-10 -3 -1 10 -100 2 17", "2 6\n10 12 3 2 14"], "output": ["19", "5", "0"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03168 Educational DP Contest - Coins", "description": "Let N be a positive odd number.\n\nThere are N coins, numbered 1, 2, \\ldots, N. For each i (1 \\leq i \\leq N), when Coin i is tossed, it comes up heads with probability p_i and tails with probability 1 - p_i.\n\nTaro has tossed all the N coins. Find the probability of having more heads than tails.\n\nConstraints\n\n* N is an odd number.\n* 1 \\leq N \\leq 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 \\ldots p_N\n\n\nOutput\n\nPrint the probability of having more heads than tails. The output is considered correct when the absolute error is not greater than 10^{-9}.\n\nExamples\n\nInput\n\n3\n0.30 0.60 0.80\n\n\nOutput\n\n0.612\n\n\nInput\n\n1\n0.50\n\n\nOutput\n\n0.5\n\n\nInput\n\n5\n0.42 0.01 0.42 0.99 0.42\n\n\nOutput\n\n0.3821815872", "testcase": ["3\n-0.6627663691329089 0.60 0.80", "5\n0.3587179761358011 -0.6949148908775558 0.42 0.99 0.42", "5\n0.42 0.01 -0.15445243744588594 0.99 -0.5675074947776857", "5\n0.42 0.2834761369376393 0.42 1.341910423856466 0.42", "3\n0.2668619642750231 0.60 0.028284623052860614", "1\n0.709724498588377", "3\n0.4502052106734173 0.60 0.6510470511449347", "3\n0.010159905378529677 0.60 1.6589742382095363", "5\n1.3642154456845477 0.01 0.42 0.99 0.6042609973193294", "5\n0.49146905388065476 0.01 0.42 0.99 0.42"], "output": ["0.3821815872", "0.5", "0.612"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "There is a train going from Station A to Station B that costs X yen (the currency of Japan).\n\nAlso, there is a bus going from Station B to Station C that costs Y yen.\n\nJoisino got a special ticket. With this ticket, she can take the bus for half the fare if she travels from Station A to Station B by train and then travels from Station B to Station C by bus.\n\nHow much does it cost to travel from Station A to Station C if she uses this ticket?\n\nConstraints\n\n* 1 \\leq X,Y \\leq 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y\n\n\nOutput\n\nIf it costs x yen to travel from Station A to Station C, print x.\n\nExamples\n\nInput\n\n81 58\n\n\nOutput\n\n110\n\n\nInput\n\n4 54\n\n\nOutput\n\n31", "testcase": ["81 59", "4 53", "4 53", "81 57", "81 57", "4 55", "4 53", "81 59", "81 59", "4 53"], "output": ["110", "31"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "In Republic of Atcoder, there are N prefectures, and a total of M cities that belong to those prefectures.\n\nCity i is established in year Y_i and belongs to Prefecture P_i.\n\nYou can assume that there are no multiple cities that are established in the same year.\n\nIt is decided to allocate a 12-digit ID number to each city.\n\nIf City i is the x-th established city among the cities that belong to Prefecture i, the first six digits of the ID number of City i is P_i, and the last six digits of the ID number is x.\n\nHere, if P_i or x (or both) has less than six digits, zeros are added to the left until it has six digits.\n\nFind the ID numbers for all the cities.\n\nNote that there can be a prefecture with no cities.\n\nConstraints\n\n* 1 \\leq N \\leq 10^5\n* 1 \\leq M \\leq 10^5\n* 1 \\leq P_i \\leq N\n* 1 \\leq Y_i \\leq 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M\n\n\nOutput\n\nPrint the ID numbers for all the cities, in ascending order of indices (City 1, City 2, ...).\n\nExamples\n\nInput\n\n2 3\n1 32\n2 63\n1 12\n\n\nOutput\n\n000001000002\n000002000001\n000001000001\n\n\nInput\n\n2 3\n2 55\n2 77\n2 99\n\n\nOutput\n\n000002000001\n000002000002\n000002000003", "testcase": ["2 3\n3 54\n2 78\n2 99", "2 3\n2 32\n3 62\n1 12", "2 4\n2 55\n2 78\n3 99", "2 3\n2 55\n2 78\n2 99", "2 3\n0 31\n2 64\n1 12", "2 4\n3 55\n3 77\n2 99", "2 4\n2 55\n2 77\n1 100", "2 3\n2 55\n2 77\n3 99", "2 1\n1 32\n2 63\n2 12", "2 5\n1 32\n3 63\n1 12"], "output": ["000001000002\n000002000001\n000001000001", "000002000001\n000002000002\n000002000003"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "A programming competition site AtCode regularly holds programming contests.\n\nThe next contest on AtCode is called ABC, which is rated for contestants with ratings less than 1200.\n\nThe contest after the ABC is called ARC, which is rated for contestants with ratings less than 2800.\n\nThe contest after the ARC is called AGC, which is rated for all contestants.\n\nTakahashi's rating on AtCode is R. What is the next contest rated for him?\n\nConstraints\n\n* 0 ≤ R ≤ 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR\n\n\nOutput\n\nPrint the name of the next contest rated for Takahashi (`ABC`, `ARC` or `AGC`).\n\nExamples\n\nInput\n\n1199\n\n\nOutput\n\nABC\n\n\nInput\n\n1200\n\n\nOutput\n\nARC\n\n\nInput\n\n4208\n\n\nOutput\n\nAGC", "testcase": ["1201", "1199", "1199", "4209", "1200", "4207", "1198", "1200", "1201", "4209"], "output": ["ABC", "ARC", "AGC"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "You are given string S and T consisting of lowercase English letters.\n\nDetermine if S equals T after rotation.\n\nThat is, determine if S equals T after the following operation is performed some number of times:\n\nOperation: Let S = S_1 S_2 ... S_{|S|}. Change S to S_{|S|} S_1 S_2 ... S_{|S|-1}.\n\nHere, |X| denotes the length of the string X.\n\nConstraints\n\n* 2 \\leq |S| \\leq 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT\n\n\nOutput\n\nIf S equals T after rotation, print `Yes`; if it does not, print `No`.\n\nExamples\n\nInput\n\nkyoto\ntokyo\n\n\nOutput\n\nYes\n\n\nInput\n\nabc\narc\n\n\nOutput\n\nNo\n\n\nInput\n\naaaaaaaaaaaaaaab\naaaaaaaaaaaaaaab\n\n\nOutput\n\nYes", "testcase": ["aaaaaaaaayaaaaab\naaaaaaaaaaaaaaab", "knoto\ntokyo", "alaaaaaaaaaaaaab\naaaaaaaaaaaaaaab", "abc\nhrc", "kyoto\ntokwo", "abc\norc", "aaaaapaaaaaaaaab\naaaaaaaaaaaaaaab", "kyoto\nttkyo", "aaaaaaaawaaaaaab\naaaaaaaaaaaaaaab", "aaaaaaaaaaaaaaab\nuaaaaaaaaaaaaaab"], "output": ["Yes", "Yes", "No"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "You are given a positive integer N. Find the minimum positive integer divisible by both 2 and N.\n\nConstraints\n\n* 1 \\leq N \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the minimum positive integer divisible by both 2 and N.\n\nExamples\n\nInput\n\n3\n\n\nOutput\n\n6\n\n\nInput\n\n10\n\n\nOutput\n\n10\n\n\nInput\n\n999999999\n\n\nOutput\n\n1999999998", "testcase": ["9", "11", "11", "999999998", "4", "9", "1000000000", "11", "1000000000", "1000000000"], "output": ["1999999998", "6", "10"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Snuke has an integer sequence A of length N.\n\nHe will freely choose an integer b. Here, he will get sad if A_i and b+i are far from each other. More specifically, the sadness of Snuke is calculated as follows:\n\n* abs(A_1 - (b+1)) + abs(A_2 - (b+2)) + ... + abs(A_N - (b+N))\n\n\n\nHere, abs(x) is a function that returns the absolute value of x.\n\nFind the minimum possible sadness of Snuke.\n\nConstraints\n\n* 1 \\leq N \\leq 2 \\times 10^5\n* 1 \\leq A_i \\leq 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N\n\n\nOutput\n\nPrint the minimum possible sadness of Snuke.\n\nExamples\n\nInput\n\n5\n2 2 3 5 5\n\n\nOutput\n\n2\n\n\nInput\n\n9\n1 2 3 4 5 6 7 8 9\n\n\nOutput\n\n0\n\n\nInput\n\n6\n6 5 4 3 2 1\n\n\nOutput\n\n18\n\n\nInput\n\n7\n1 1 1 1 2 3 4\n\n\nOutput\n\n6", "testcase": ["5\n2 2 2 5 4", "9\n1 3 3 4 5 6 7 8 11", "5\n3 1 3 5 5", "6\n6 5 4 4 2 1", "7\n1 1 0 1 2 2 3", "7\n0 2 1 1 2 3 3", "6\n6 5 5 3 2 1", "7\n1 2 2 1 2 4 4", "9\n2 2 3 4 5 6 7 8 9", "6\n6 4 4 3 0 1"], "output": ["2", "6", "0", "18"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Today, the memorable AtCoder Beginner Contest 100 takes place. On this occasion, Takahashi would like to give an integer to Ringo.\nAs the name of the contest is AtCoder Beginner Contest 100, Ringo would be happy if he is given a positive integer that can be divided by 100 exactly D times.\n\nFind the N-th smallest integer that would make Ringo happy.\n\nConstraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N\n\n\nOutput\n\nPrint the N-th smallest integer that can be divided by 100 exactly D times.\n\nExamples\n\nInput\n\n0 5\n\n\nOutput\n\n5\n\n\nInput\n\n1 11\n\n\nOutput\n\n1100\n\n\nInput\n\n2 85\n\n\nOutput\n\n850000", "testcase": ["0 4", "2 86", "1 10", "2 86", "0 4", "1 10", "0 4", "1 10", "2 86", "1 12"], "output": ["850000", "1100", "5"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Decades have passed since the beginning of AtCoder Beginner Contest.\n\nThe contests are labeled as `ABC001`, `ABC002`, ... from the first round, but after the 999-th round `ABC999`, a problem occurred: how the future rounds should be labeled?\n\nIn the end, the labels for the rounds from the 1000-th to the 1998-th are decided: `ABD001`, `ABD002`, ..., `ABD999`.\n\nYou are given an integer N between 1 and 1998 (inclusive). Print the first three characters of the label of the N-th round of AtCoder Beginner Contest.\n\nConstraints\n\n* 1 \\leq N \\leq 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\n\n\nOutput\n\nPrint the first three characters of the label of the N-th round of AtCoder Beginner Contest.\n\nExamples\n\nInput\n\n999\n\n\nOutput\n\nABC\n\n\nInput\n\n1000\n\n\nOutput\n\nABD\n\n\nInput\n\n1481\n\n\nOutput\n\nABD", "testcase": ["1001", "1482", "1001", "1001", "1482", "1482", "998", "1482", "1482", "1480"], "output": ["ABD", "ABD", "ABC"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "You are given two integers A and B. Find the largest value among A+B, A-B and A \\times B.\n\nConstraints\n\n* -1000 \\leq A,B \\leq 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B\n\n\nOutput\n\nPrint the largest value among A+B, A-B and A \\times B.\n\nExamples\n\nInput\n\n3 1\n\n\nOutput\n\n4\n\n\nInput\n\n4 -2\n\n\nOutput\n\n6\n\n\nInput\n\n0 0\n\n\nOutput\n\n0", "testcase": ["3 0", "0 -1", "3 2", "3 2", "0 1", "3 2", "0 -1", "3 2", "4 -3", "0 1"], "output": ["0", "4", "6"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "You are given a string S of length N consisting of lowercase English letters. We will cut this string at one position into two strings X and Y. Here, we would like to maximize the number of different letters contained in both X and Y. Find the largest possible number of different letters contained in both X and Y when we cut the string at the optimal position.\n\nConstraints\n\n* 2 \\leq N \\leq 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS\n\n\nOutput\n\nPrint the largest possible number of different letters contained in both X and Y.\n\nExamples\n\nInput\n\n6\naabbca\n\n\nOutput\n\n2\n\n\nInput\n\n10\naaaaaaaaaa\n\n\nOutput\n\n1\n\n\nInput\n\n45\ntgxgdqkyjzhyputjjtllptdfxocrylqfqjynmfbfucbir\n\n\nOutput\n\n9", "testcase": ["10\nayaaaaaaaa", "45\ntgxgdqkyjzhyputjjtllptdfxocrylqfojynmfbfucbir", "6\naabbcv", "6\ndabbca", "10\nafaaaaaaaa", "45\ntgxgdqkyjhhyputjjtllptdfxocrylqfqjynmfbfucbir", "45\ntoxgdqkyjzhyputjjtllptdfxocrylqfqjynmfbfucbir", "10\naaaaaaaaqa", "6\nambbca", "6\naabbck"], "output": ["1", "2", "9"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "You are given a sequence (P_1,P_2,...,P_N) which is a permutation of the integers from 1 through N. You would like to sort this sequence in ascending order by repeating the following operation:\n\n* Choose an element in the sequence and move it to the beginning or the end of the sequence.\n\n\n\nFind the minimum number of operations required. It can be proved that it is actually possible to sort the sequence using this operation.\n\nConstraints\n\n* 1 \\leq N \\leq 2\\times 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N\n\n\nOutput\n\nPrint the minimum number of operations required.\n\nExamples\n\nInput\n\n4\n1\n3\n2\n4\n\n\nOutput\n\n2\n\n\nInput\n\n6\n3\n2\n5\n1\n4\n6\n\n\nOutput\n\n4\n\n\nInput\n\n8\n6\n3\n1\n2\n7\n4\n8\n5\n\n\nOutput\n\n5", "testcase": ["6\n4\n3\n5\n1\n3\n6", "8\n6\n4\n0\n2\n6\n4\n8\n5", "8\n6\n3\n1\n2\n7\n3\n6\n5", "8\n6\n3\n1\n2\n6\n3\n8\n6", "8\n6\n2\n2\n1\n7\n4\n8\n5", "8\n7\n3\n2\n1\n7\n4\n8\n5", "8\n6\n4\n0\n2\n8\n4\n8\n5", "6\n3\n1\n5\n0\n4\n7", "6\n1\n1\n5\n1\n4\n6", "8\n6\n2\n1\n1\n6\n4\n8\n5"], "output": ["2", "4", "5"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "In \"Takahashi-ya\", a ramen restaurant, a bowl of ramen costs 700 yen (the currency of Japan), plus 100 yen for each kind of topping (boiled egg, sliced pork, green onions).\n\nA customer ordered a bowl of ramen and told which toppings to put on his ramen to a clerk. The clerk took a memo of the order as a string S. S is three characters long, and if the first character in S is `o`, it means the ramen should be topped with boiled egg; if that character is `x`, it means the ramen should not be topped with boiled egg. Similarly, the second and third characters in S mean the presence or absence of sliced pork and green onions on top of the ramen.\n\nWrite a program that, when S is given, prints the price of the corresponding bowl of ramen.\n\nConstraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint the price of the bowl of ramen corresponding to S.\n\nExamples\n\nInput\n\noxo\n\n\nOutput\n\n900\n\n\nInput\n\nooo\n\n\nOutput\n\n1000\n\n\nInput\n\nxxx\n\n\nOutput\n\n700", "testcase": ["oof", "oyo", "xmx", "xsx", "xpx", "xjx", "ozo", "oao", "vxo", "oxx"], "output": ["900", "700", "1000"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Akaki, a patissier, can make N kinds of doughnut using only a certain powder called \"Okashi no Moto\" (literally \"material of pastry\", simply called Moto below) as ingredient. These doughnuts are called Doughnut 1, Doughnut 2, ..., Doughnut N. In order to make one Doughnut i (1 ≤ i ≤ N), she needs to consume m_i grams of Moto. She cannot make a non-integer number of doughnuts, such as 0.5 doughnuts.\n\nNow, she has X grams of Moto. She decides to make as many doughnuts as possible for a party tonight. However, since the tastes of the guests differ, she will obey the following condition:\n\n* For each of the N kinds of doughnuts, make at least one doughnut of that kind.\n\n\n\nAt most how many doughnuts can be made here? She does not necessarily need to consume all of her Moto. Also, under the constraints of this problem, it is always possible to obey the condition.\n\nConstraints\n\n* 2 ≤ N ≤ 100\n* 1 ≤ m_i ≤ 1000\n* m_1 + m_2 + ... + m_N ≤ X ≤ 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N\n\n\nOutput\n\nPrint the maximum number of doughnuts that can be made under the condition.\n\nExamples\n\nInput\n\n3 1000\n120\n100\n140\n\n\nOutput\n\n9\n\n\nInput\n\n4 360\n90\n90\n90\n90\n\n\nOutput\n\n4\n\n\nInput\n\n5 3000\n150\n130\n150\n130\n110\n\n\nOutput\n\n26", "testcase": ["4 359\n90\n90\n91\n90", "4 360\n90\n89\n90\n91", "3 1001\n120\n100\n141", "3 999\n119\n100\n140", "3 999\n120\n99\n140", "5 3000\n150\n129\n150\n131\n111", "5 3000\n150\n130\n150\n131\n110", "4 360\n91\n90\n91\n90", "5 3000\n151\n130\n151\n130\n111", "5 3000\n150\n130\n150\n129\n110"], "output": ["9", "26", "4"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "We have N cards. A number a_i is written on the i-th card.\nAlice and Bob will play a game using these cards. In this game, Alice and Bob alternately take one card. Alice goes first.\nThe game ends when all the cards are taken by the two players, and the score of each player is the sum of the numbers written on the cards he/she has taken. When both players take the optimal strategy to maximize their scores, find Alice's score minus Bob's score.\n\nConstraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 \\leq i \\leq N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N\n\n\nOutput\n\nPrint Alice's score minus Bob's score when both players take the optimal strategy to maximize their scores.\n\nExamples\n\nInput\n\n2\n3 1\n\n\nOutput\n\n2\n\n\nInput\n\n3\n2 7 4\n\n\nOutput\n\n5\n\n\nInput\n\n4\n20 18 2 18\n\n\nOutput\n\n18", "testcase": ["4\n18 18 2 18", "3\n2 8 3", "3\n2 7 4", "4\n19 18 3 18", "4\n20 18 2 18", "2\n3 0", "3\n2 6 5", "3\n1 6 4", "2\n2 1", "3\n1 7 5"], "output": ["18", "2", "5"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "An X-layered kagami mochi (X ≥ 1) is a pile of X round mochi (rice cake) stacked vertically where each mochi (except the bottom one) has a smaller diameter than that of the mochi directly below it. For example, if you stack three mochi with diameters of 10, 8 and 6 centimeters from bottom to top in this order, you have a 3-layered kagami mochi; if you put just one mochi, you have a 1-layered kagami mochi.\n\nLunlun the dachshund has N round mochi, and the diameter of the i-th mochi is d_i centimeters. When we make a kagami mochi using some or all of them, at most how many layers can our kagami mochi have?\n\nConstraints\n\n* 1 ≤ N ≤ 100\n* 1 ≤ d_i ≤ 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N\n\n\nOutput\n\nPrint the maximum number of layers in a kagami mochi that can be made.\n\nExamples\n\nInput\n\n4\n10\n8\n8\n6\n\n\nOutput\n\n3\n\n\nInput\n\n3\n15\n15\n15\n\n\nOutput\n\n1\n\n\nInput\n\n7\n50\n30\n50\n100\n50\n80\n30\n\n\nOutput\n\n4", "testcase": ["3\n16\n14\n15", "7\n50\n30\n50\n100\n52\n80\n31", "7\n50\n30\n52\n99\n50\n80\n30", "3\n16\n15\n14", "3\n15\n15\n15", "4\n11\n7\n8\n6", "3\n16\n15\n16", "7\n50\n30\n49\n100\n50\n80\n30", "3\n15\n17\n15", "4\n11\n8\n8\n7"], "output": ["4", "1", "3"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "You are going out for a walk, when you suddenly encounter a monster. Fortunately, you have N katana (swords), Katana 1, Katana 2, …, Katana N, and can perform the following two kinds of attacks in any order:\n\n* Wield one of the katana you have. When you wield Katana i (1 ≤ i ≤ N), the monster receives a_i points of damage. The same katana can be wielded any number of times.\n* Throw one of the katana you have. When you throw Katana i (1 ≤ i ≤ N) at the monster, it receives b_i points of damage, and you lose the katana. That is, you can no longer wield or throw that katana.\n\n\n\nThe monster will vanish when the total damage it has received is H points or more. At least how many attacks do you need in order to vanish it in total?\n\nConstraints\n\n* 1 ≤ N ≤ 10^5\n* 1 ≤ H ≤ 10^9\n* 1 ≤ a_i ≤ b_i ≤ 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N\n\n\nOutput\n\nPrint the minimum total number of attacks required to vanish the monster.\n\nExamples\n\nInput\n\n1 10\n3 5\n\n\nOutput\n\n3\n\n\nInput\n\n2 10\n3 5\n2 6\n\n\nOutput\n\n2\n\n\nInput\n\n4 1000000000\n1 1\n1 10000000\n1 30000000\n1 99999999\n\n\nOutput\n\n860000004\n\n\nInput\n\n5 500\n35 44\n28 83\n46 62\n31 79\n40 43\n\n\nOutput\n\n9", "testcase": ["1 10\n3 5", "5 500\n35 43\n28 83\n46 62\n30 79\n40 43", "2 10\n3 6\n2 7", "4 1000000000\n1 2\n1 9999999\n2 30000000\n1 99999999", "4 1000000000\n1 1\n1 9999999\n1 30000000\n1 99999999", "1 10\n4 4", "5 500\n35 44\n28 83\n45 62\n31 77\n39 43", "1 11\n3 4", "1 10\n3 5", "5 500\n34 44\n28 84\n47 62\n31 79\n41 43"], "output": ["860000004", "3", "2", "9"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "We have a string s consisting of lowercase English letters. Snuke can perform the following operation repeatedly:\n\n* Insert a letter `x` to any position in s of his choice, including the beginning and end of s.\n\n\n\nSnuke's objective is to turn s into a palindrome. Determine whether the objective is achievable. If it is achievable, find the minimum number of operations required.\n\nConstraints\n\n* 1 \\leq |s| \\leq 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns\n\n\nOutput\n\nIf the objective is achievable, print the number of operations required. If it is not, print `-1` instead.\n\nExamples\n\nInput\n\nxabxa\n\n\nOutput\n\n2\n\n\nInput\n\nab\n\n\nOutput\n\n-1\n\n\nInput\n\na\n\n\nOutput\n\n0\n\n\nInput\n\noxxx\n\n\nOutput\n\n3", "testcase": ["qxxx", "rb", "oxxk", "xaexa", "j", "xakxa", "mxxx", "xlbxa", "n", "wb"], "output": ["0", "2", "-1", "3"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "We have a grid with N rows and M columns of squares. Initially, all the squares are white.\n\nThere is a button attached to each row and each column. When a button attached to a row is pressed, the colors of all the squares in that row are inverted; that is, white squares become black and vice versa. When a button attached to a column is pressed, the colors of all the squares in that column are inverted.\n\nTakahashi can freely press the buttons any number of times. Determine whether he can have exactly K black squares in the grid.\n\nConstraints\n\n* 1 \\leq N,M \\leq 1000\n* 0 \\leq K \\leq NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K\n\n\nOutput\n\nIf Takahashi can have exactly K black squares in the grid, print `Yes`; otherwise, print `No`.\n\nExamples\n\nInput\n\n2 2 2\n\n\nOutput\n\nYes\n\n\nInput\n\n2 2 1\n\n\nOutput\n\nNo\n\n\nInput\n\n3 5 8\n\n\nOutput\n\nYes\n\n\nInput\n\n7 9 20\n\n\nOutput\n\nNo", "testcase": ["3 4 8", "7 9 19", "2 3 1", "3 4 8", "2 2 3", "2 1 2", "3 5 9", "7 9 19", "7 9 21", "2 1 1"], "output": ["Yes", "No", "No", "Yes"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Snuke loves \"paper cutting\": he cuts out characters from a newspaper headline and rearranges them to form another string.\n\nHe will receive a headline which contains one of the strings S_1,...,S_n tomorrow. He is excited and already thinking of what string he will create. Since he does not know the string on the headline yet, he is interested in strings that can be created regardless of which string the headline contains.\n\nFind the longest string that can be created regardless of which string among S_1,...,S_n the headline contains. If there are multiple such strings, find the lexicographically smallest one among them.\n\nConstraints\n\n* 1 \\leq n \\leq 50\n* 1 \\leq |S_i| \\leq 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n\n\n\nOutput\n\nPrint the lexicographically smallest string among the longest strings that satisfy the condition. If the answer is an empty string, print an empty line.\n\nExamples\n\nInput\n\n3\ncbaa\ndaacc\nacacac\n\n\nOutput\n\naac\n\n\nInput\n\n3\na\naa\nb\n\n\nOutput", "testcase": ["3\nkbac\ndaacc\nacacac", "3\ny\naa\nb", "3\ncbaa\ndzamc\nacacac", "3\ne\naa\nu", "3\ncbar\ndaacc\nacacac", "3\nubaa\ndaacl\nacacac", "3\nc\naa\nb", "3\nq\naa\np", "3\na\not\nb", "3\nx\naa\nw"], "output": ["aac", ""], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "There are an integer sequence A_1,...,A_N consisting of N terms, and N buttons. When the i-th (1 ≦ i ≦ N) button is pressed, the values of the i terms from the first through the i-th are all incremented by 1.\n\nThere is also another integer sequence B_1,...,B_N. Takahashi will push the buttons some number of times so that for every i, A_i will be a multiple of B_i.\n\nFind the minimum number of times Takahashi will press the buttons.\n\nConstraints\n\n* All input values are integers.\n* 1 ≦ N ≦ 10^5\n* 0 ≦ A_i ≦ 10^9(1 ≦ i ≦ N)\n* 1 ≦ B_i ≦ 10^9(1 ≦ i ≦ N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N\n\n\nOutput\n\nPrint an integer representing the minimum number of times Takahashi will press the buttons.\n\nExamples\n\nInput\n\n3\n3 5\n2 7\n9 4\n\n\nOutput\n\n7\n\n\nInput\n\n7\n3 1\n4 1\n5 9\n2 6\n5 3\n5 8\n9 7\n\n\nOutput\n\n22", "testcase": ["7\n3 0\n5 1\n5 10\n3 6\n5 2\n5 8\n9 7", "3\n2 4\n2 8\n9 4", "3\n4 5\n2 7\n9 4", "3\n4 5\n2 8\n9 5", "7\n3 1\n4 1\n5 9\n2 6\n6 3\n5 9\n9 6", "3\n3 6\n2 7\n9 2", "3\n3 5\n0 8\n9 4", "3\n3 4\n2 7\n7 4", "7\n4 0\n4 1\n5 9\n1 7\n5 3\n5 7\n9 7", "7\n3 0\n4 1\n5 9\n3 5\n5 2\n5 7\n9 7"], "output": ["22", "7"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "You are given a string S consisting of lowercase English letters. Another string T is initially empty. Determine whether it is possible to obtain S = T by performing the following operation an arbitrary number of times:\n\n* Append one of the following at the end of T: `dream`, `dreamer`, `erase` and `eraser`.\n\nConstraints\n\n* 1≦|S|≦10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nIf it is possible to obtain S = T, print `YES`. Otherwise, print `NO`.\n\nExamples\n\nInput\n\nerasedream\n\n\nOutput\n\nYES\n\n\nInput\n\ndreameraser\n\n\nOutput\n\nYES\n\n\nInput\n\ndreamerer\n\n\nOutput\n\nNO", "testcase": ["dueamerer", "zrasedream", "krasedream", "kreamerer", "dyeamerer", "drmamerer", "erasedrenm", "erasfdream", "dreamerkser", "dreamerased"], "output": ["NO", "YES", "YES"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Summer vacation ended at last and the second semester has begun. You, a Kyoto University student, came to university and heard a rumor that somebody will barricade the entrance of your classroom. The barricade will be built just before the start of the A-th class and removed by Kyoto University students just before the start of the B-th class. All the classes conducted when the barricade is blocking the entrance will be cancelled and you will not be able to attend them. Today you take N classes and class i is conducted in the t_i-th period. You take at most one class in each period. Find the number of classes you can attend.\n\nConstraints\n\n* 1 \\leq N \\leq 1000\n* 1 \\leq A < B \\leq 10^9\n* 1 \\leq t_i \\leq 10^9\n* All t_i values are distinct.\n\nInput\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN\n\n\nOutput\n\nPrint the number of classes you can attend.\n\nExamples\n\nInput\n\n5 5 9\n4\n3\n6\n9\n1\n\n\nOutput\n\n4\n\n\nInput\n\n5 4 9\n5\n6\n7\n8\n9\n\n\nOutput\n\n1\n\n\nInput\n\n4 3 6\n9\n6\n8\n1\n\n\nOutput\n\n4\n\n\nInput\n\n2 1 2\n1\n2\n\n\nOutput\n\n1", "testcase": ["2 0 2\n0\n2", "5 4 8\n5\n6\n7\n9\n10", "4 3 6\n9\n7\n8\n1", "5 6 9\n5\n6\n8\n8\n9", "5 4 9\n6\n6\n7\n8\n9", "4 3 7\n8\n6\n9\n1", "4 3 6\n9\n6\n7\n1", "4 3 7\n9\n6\n8\n1", "4 4 7\n9\n6\n9\n1", "4 2 6\n9\n6\n8\n1"], "output": ["4", "4", "1", "1"], "difficulty": 0, "time_limit": {"seconds": 1, "nanos": 0}}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Mr. Takahashi has a string s consisting of lowercase English letters. He repeats the following operation on s exactly K times.\n\n* Choose an arbitrary letter on s and change that letter to the next alphabet. Note that the next letter of `z` is `a`.\n\n\n\nFor example, if you perform an operation for the second letter on `aaz`, `aaz` becomes `abz`. If you then perform an operation for the third letter on `abz`, `abz` becomes `aba`.\n\nMr. Takahashi wants to have the lexicographically smallest string after performing exactly K operations on s. Find the such string.\n\nConstraints\n\n* 1≤|s|≤10^5\n* All letters in s are lowercase English letters.\n* 1≤K≤10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK\n\n\nOutput\n\nPrint the lexicographically smallest string after performing exactly K operations on s.\n\nExamples\n\nInput\n\nxyz\n4\n\n\nOutput\n\naya\n\n\nInput\n\na\n25\n\n\nOutput\n\nz\n\n\nInput\n\ncodefestival\n100\n\n\nOutput\n\naaaafeaaivap", "testcase": ["codefesdival\n100", "codefestival\n101", "y\n25", "g\n25", "codefestival\n101", "codefastival\n100", "xyz\n3", "xyk\n4", "codefestival\n99", "a\n26"], "output": ["aaaafeaaivap", "aya", "z"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Snuke lives on an infinite two-dimensional plane. He is going on an N-day trip. At the beginning of Day 1, he is at home. His plan is described in a string S of length N. On Day i(1 ≦ i ≦ N), he will travel a positive distance in the following direction:\n\n* North if the i-th letter of S is `N`\n* West if the i-th letter of S is `W`\n* South if the i-th letter of S is `S`\n* East if the i-th letter of S is `E`\n\n\n\nHe has not decided each day's travel distance. Determine whether it is possible to set each day's travel distance so that he will be back at home at the end of Day N.\n\nConstraints\n\n* 1 ≦ | S | ≦ 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS\n\n\nOutput\n\nPrint `Yes` if it is possible to set each day's travel distance so that he will be back at home at the end of Day N. Otherwise, print `No`.\n\nExamples\n\nInput\n\nSENW\n\n\nOutput\n\nYes\n\n\nInput\n\nNSNNSNSN\n\n\nOutput\n\nYes\n\n\nInput\n\nNNEW\n\n\nOutput\n\nNo\n\n\nInput\n\nW\n\n\nOutput\n\nNo", "testcase": ["J", "NSJNSNSN", "G", "A", "NSNNSNSZ", "SENL", "C", "SEWW", "NLEW", "NSNNSZSN"], "output": ["Yes", "No", "Yes", "No"], "difficulty": 0, "time_limit": {"seconds": 2, "nanos": 0}}

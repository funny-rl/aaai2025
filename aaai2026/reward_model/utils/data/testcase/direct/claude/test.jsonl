{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "testcase": ["a", "hello", "abcdefghij", "zyxwvutsrq", "programming", "qwertyuiop", "aaaaabbbbb", "problemsolving", "thequickbrownfox", "abcdefghijklmnopqrstuvwxyz"]}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "testcase": ["3 5\n2 3 4", "5 1000\n100 200 300 400 500", "1 1\n1", "4 10\n5 5 5 5", "2 1000000000\n999999999 999999999", "6 100\n50 60 70 80 90 100", "3 50000\n40000 45000 48000", "7 777\n100 200 300 400 500 600 700", "4 999999999\n100000000 200000000 300000000 400000000", "2 5000\n4000 4500"]}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 и y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <=10^8). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "testcase": ["1 2\n3 4\n5 6", "0 0\n1 1\n-1 -1", "100000000 100000000\n-100000000 -100000000\n0 0", "-5 10\n15 -20\n8 12", "1000 2000\n-3000 4000\n5000 -6000", "7 -7\n-8 8\n9 -9", "12345 67890\n-98765 -43210\n54321 -12345", "100 200\n300 400\n500 600", "99999999 -99999999\n-88888888 77777777\n66666666 -55555555", "-1 -1\n-2 -2\n-3 -3"]}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "testcase": ["1 1.W", "2 3.WWB.BBW", "3 2.WB.BW.WW", "4 4.WWBB.BBWW.WBWB.BWBW", "5 5.WWWBB.BBBWW.WBWBW.BWBWB.WWWWW", "2 2.WB.BW", "3 3.WWB.BWW.BBW", "4 3.WWB.BWB.WBW.BBW", "3 4.WWBB.BWWB.WBBW", "1 5.WBWBW"]}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "testcase": ["3\n2 3 5\n1 1 2\n5 7 12", "1\n1000000000000000000 1000000000000000000 1000000000000000000", "5\n1 2 3\n4 5 9\n7 8 15\n10 11 21\n13 14 27", "2\n123456789 987654321 999999999\n555555555 444444444 888888888", "4\n1 1 2\n2 2 4\n3 3 6\n4 4 8", "1\n1 1 1", "6\n10 20 30\n40 50 90\n60 70 130\n80 90 170\n100 110 210\n120 130 250", "2\n999999999999999999 888888888888888888 777777777777777777\n111111111111111111 222222222222222222 333333333333333333", "3\n5 5 10\n10 10 20\n15 15 30", "4\n1 2 3\n2 4 6\n3 6 9\n4 8 12"]}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "testcase": ["1\n5", "3\n1 2 3", "5\n-1 2 -3 4 -5", "4\n1000000000 -1000000000 1000000000 -1000000000", "2\n0 0", "6\n1 -1 2 -2 3 -3", "7\n7 -6 5 -4 3 -2 1", "8\n100 200 300 400 500 600 700 800", "10\n1 2 3 4 5 -5 -4 -3 -2 -1", "5\n999999999 888888888 777777777 666666666 555555555"]}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <=10^18, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.", "testcase": ["10 5 3\n2\n4\n7", "5 2 2\n1\n3", "100 50 5\n20\n40\n60\n80\n100", "1000 500 4\n250\n500\n750\n1000", "15 7 6\n3\n6\n9\n12\n14\n15", "20 10 3\n5\n10\n15", "50 25 7\n7\n14\n21\n28\n35\n42\n49", "200 100 4\n50\n100\n150\n200", "30 15 5\n6\n12\n18\n24\n30", "8 4 2\n2\n6"]}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "testcase": ["1 1", "5 7", "999999999 1000000000", "1000000000 1", "1 1000000000", "123456789 987654321", "500000000 500000000", "42 42", "1000000000 1000000000", "789456123 456789123"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["1 3 2 5 3 2", "4 1 3 2 4 1", "2 5 1 3 2 4", "7 3 5 4 3 2", "10 5 8 6 4 3", "3 8 4 5 3 2", "6 2 4 3 2 1", "9 4 7 4 3 2", "5 2 3 2 1 1", "8 3 6 5 4 3"]}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "testcase": ["1\n5", "3\n123", "5\n98765", "10\n1234567890", "2\n42", "7\n1010101", "4\n9999", "6\n123456", "8\n12345678", "15\n123456789012345"]}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "testcase": ["2", "100000", "42", "999", "12345", "67890", "5000", "77777", "23456", "8888"]}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "testcase": ["2", "10", "100", "1000000000", "9999999999", "123456789", "987654321", "5000000000", "7777777777", "4294967296"]}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "testcase": ["a", "hello", "abcdefghij", "zyxwvutsrq", "programming", "aaaaabbbbb", "qwertyuiop", "abcdefghijklmnop", "testcasestring", "pneumonoultramicroscopicsilicovolcanoconiosis"]}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "testcase": ["2", "10", "1000", "999999999", "100000", "5", "1000000000", "777777777", "123456789", "500000000"]}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "testcase": ["1\na", "2\nab", "3\nabc", "4\nzxcv", "5\nhello", "10\nabcdefghij", "15\nqwertyuiopasdfg", "20\nmnbvcxzasdfghjklqwe", "30\npoiuytrewqasdfghjklmnbvcxzxcv", "50\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx"]}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "testcase": ["3\n1 5 2\n3 7 4\n2 9 1", "1\n1 1000000000 1000000000", "5\n1 10 3\n2 15 4\n3 20 5\n4 25 6\n5 30 7", "2\n100 200 50\n500 1000 100", "4\n1 100 10\n200 300 20\n400 500 30\n600 700 40", "1\n999999999 999999999 999999999", "3\n1 1000 5\n2000 3000 10\n4000 5000 15", "6\n1 2 1\n2 4 2\n4 8 3\n8 16 4\n16 32 5\n32 64 6", "2\n1 1000000000 5\n1 1000000000 999999999", "4\n1 5 1\n10 15 2\n20 25 3\n30 35 4"]}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "testcase": ["1", "1000000000", "2000000000", "42", "999999999", "123456789", "987654321", "500000000", "1500000000", "777777777"]}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <=10^5) --- the length of the sought string.", "testcase": ["1", "2", "10", "50", "100", "1000", "10000", "50000", "99999", "100000"]}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "testcase": ["1", "5", "9", "12", "27", "36", "42", "55", "81", "99"]}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "testcase": ["2 5\n1 0 1 1 0", "3 4\n2 1 0 2", "10 3\n5 2 7", "7 6\n6 5 4 3 2 1", "4 1\n3", "5 2\n4 3", "8 3\n7 6 5", "6 4\n5 4 3 2", "9 1\n8", "100 5\n99 88 77 66 55"]}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "testcase": ["1 2 3\n4 5 6", "10 20 30\n25 25 25", "1000 2000 3000\n5000 4000 3000", "50000 40000 30000\n45000 50000 35000", "1 1 1\n1 1 1", "99999 88888 77777\n90000 85000 95000", "5432 6543 7654\n8000 7000 6000", "100 200 300\n250 200 150", "45678 34567 23456\n40000 35000 30000", "789 456 123\n1000 800 600"]}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <=10^6 --- the board's vertical and horizontal sizes and the number of colors respectively.", "testcase": ["1 1 1", "1000 1000 1000000", "500 500 500", "100 200 1000", "42 42 42", "999 999 999999", "777 888 123456", "1 1000 500000", "150 150 150000", "333 444 555555"]}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["2 1\n1 2", "3 2\n1 2\n2 3", "4 5\n1 2\n2 3\n3 4\n4 1\n1 3", "5 10\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5\n4 1\n5 2", "3 6\n1 2\n2 3\n3 1\n1 3\n2 1\n3 2", "4 8\n1 4\n2 3\n3 1\n4 2\n1 3\n2 4\n3 2\n4 1", "5 15\n1 5\n2 4\n3 1\n4 2\n5 3\n1 4\n2 5\n3 2\n4 1\n5 2\n1 3\n2 1\n3 5\n4 3\n5 4", "2 4\n1 2\n2 1\n1 2\n2 1", "3 3\n1 2\n2 3\n3 1", "4 6\n1 3\n2 4\n3 1\n4 2\n1 4\n2 3"]}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "testcase": ["3\nab\nbc\nca", "2\nabc\ncba", "4\na\nb\nc\nd", "5\ncat\ndog\nrat\nhat\nbat", "3\nxyz\nzyx\nabc", "6\na\nab\nabc\nabcd\nabcde\nabcdef", "4\nhello\nworld\ncode\ntest", "3\naaa\nbbb\nccc", "5\nx\ny\nz\nw\nv", "4\nlong\nterm\ntest\ncase"]}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "testcase": ["3\n2 3 1", "5\n3 4 1 2 5", "4\n2 1 4 3", "1\n1", "6\n2 4 6 1 3 5", "2\n1 2", "7\n3 5 1 4 2 7 6", "8\n2 3 4 5 6 7 8 1", "4\n4 3 2 1", "5\n5 4 3 2 1"]}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "testcase": ["1 1", "5 10", "42 100", "1 500000000", "250000000 500000000", "123456 789012", "1000000 2000000", "7 15", "99999 100000", "333333 444444"]}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "testcase": ["1\n5", "3\n1 2 3", "5\n0 1 2 3 4", "2\n1000000 1000000", "4\n0 0 0 0", "6\n5 4 3 2 1 0", "7\n1000000 999999 888888 777777 666666 555555 444444", "2\n0 1", "10\n1 3 5 7 9 2 4 6 8 10", "8\n100000 200000 300000 400000 500000 600000 700000 800000"]}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "testcase": ["a", "hello", "abcdefghij", "zyxwvutsrq", "programming", "aaaaabbbbb", "qwertyuiop", "abcdefghijklmnop", "stringtestcase", "zzzzzzzzzz"]}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "testcase": ["1\n+", "2\n+-", "3\n++-", "4\n--++", "5\n+-+-+", "6\n+++---", "7\n-+-+-+-", "8\n++--++--", "10\n+-+-+-+-+-", "100\n+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-"]}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "testcase": ["2\n0 0\n1 1", "3\n-100 200\n500 -300\n0 0", "4\n1 1\n2 2\n3 3\n4 4", "5\n-1000 1000\n1000 -1000\n0 0\n500 500\n-500 -500", "6\n10 20\n-10 -20\n30 40\n-30 -40\n50 60\n-50 -60", "7\n1234 5678\n-1234 -5678\n2345 6789\n-2345 -6789\n3456 7890\n-3456 -7890\n0 0", "8\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800\n800 900", "10\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "15\n0 1\n1 0\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11\n12 12\n13 13", "20\n-100 100\n-90 90\n-80 80\n-70 70\n-60 60\n-50 50\n-40 40\n-30 30\n-20 20\n-10 10\n0 0\n10 -10\n20 -20\n30 -30\n40 -40\n50 -50\n60 -60\n70 -70\n80 -80\n90 -90"]}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "testcase": ["3\nanna\nbob\nanna", "1\nstudent", "5\nalice\nbob\ncharlie\ndavid\neve", "2\nzack\nzack", "4\nmax\nsam\nmax\njoe", "7\nada\nben\ncid\ndan\neva\nfin\ngil", "6\ncat\ncat\ncat\ndog\ndog\nrat", "8\na\nb\nc\nd\ne\nf\ng\nh", "10\naa\nbb\ncc\ndd\nee\nff\ngg\nhh\nii\njj", "9\nsteve\nalex\nalex\njohn\nmike\nmike\ntom\njack\njack"]}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <=10^9, 1 <= mod <=10^7).", "testcase": ["5 7 100", "1000000000 1000000000 10000000", "0 0 1", "123456 789012 1000000", "987654321 123456789 9999999", "1 1 100", "999999999 999999999 1000", "42 42 42", "777777 888888 555555", "100000 200000 300000"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "10", "15", "25", "50", "75", "89", "99", "100"]}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "testcase": ["0 0 1", "1 1 5", "1000000000000000000 1000000000000000000 1000000000000000000", "5 7 10", "0 10 3", "10 0 2", "123456789 987654321 555555555", "1000 2000 100", "999999999999999999 888888888888888888 777777777777777777", "42 42 42"]}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "testcase": ["1 2 3 4", "5 5 7 8", "1 1 1 9", "4 6 6 10", "2 4 8 8", "1000000000 1000000000 1000000000 1000000000", "123456789 123456789 987654321 1000000000", "1 2 2 5", "7 7 7 10", "100 200 300 400"]}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "testcase": ["4.1 2.2 3.3 4", "2.1 2", "5.1 2.2 3.3 4.4 5", "3.1 2.2 3", "6.1 2.2 3.3 4.4 5.5 6", "7.1 2.2 3.3 4.4 5.5 6.6 7", "4.1 3.2 4.3 2", "5.1 2.2 3.3 1.4 5", "3.1 3.2 1", "8.1 2.2 3.3 4.4 5.5 6.6 7.7 8"]}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "testcase": ["1 1 1 1", "5 3 2 3", "10 20 5 4", "50 50 8 7", "100 100 10 10", "15 25 3 6", "30 40 7 8", "2 3 2 2", "80 90 9 10", "45 55 6 5"]}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "testcase": ["30", "45", "67", "89", "100", "55", "78", "92", "33", "61"]}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "testcase": ["1 2 10", "5 3 20", "2 4 15", "7 8 30", "10 9 50", "3 6 25", "4 5 40", "8 7 35", "6 1 45", "9 10 60"]}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "testcase": ["5\n1 2 3 4 5", "3\n150000 149999 150000", "1\n1", "7\n10 20 30 40 50 60 70", "4\n5 5 5 5", "10\n1 2 3 1 2 3 1 2 3 1", "6\n150000 1 150000 1 150000 1", "8\n100 200 300 400 500 600 700 800", "2\n150000 150000", "9\n1 1 1 1 1 1 1 1 1"]}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "testcase": ["1010", "11111", "000000", "101010101", "1", "0", "11001100", "0000011111", "1111100000", "10"]}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "testcase": ["10\n1 2 3\n5 7 10\n0 0 0\n1000000000 1000000000 1000000000\n42 17 99\n123 456 789\n9 9 9\n1 1 1000000\n777 888 999\n100 200 300", "5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5", "3\n100 200 300\n400 500 600\n700 800 900", "7\n0 1 2\n3 4 5\n6 7 8\n9 10 11\n12 13 14\n15 16 17\n18 19 20", "4\n1000000000 1000000000 1000000000\n999999999 999999999 999999999\n888888888 888888888 888888888\n777777777 777777777 777777777", "6\n1 10 100\n10 100 1000\n100 1000 10000\n1000 10000 100000\n10000 100000 1000000\n100000 1000000 10000000", "2\n0 0 1000000000\n1000000000 1000000000 0", "8\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n13 14 15\n16 17 18\n19 20 21\n22 23 24", "1\n500000000 500000000 500000000", "9\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n8 8 8\n9 9 9"]}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "testcase": ["5\n3\n1 2 3\n4\n2 1 4 3\n2\n100000 100000\n6\n5 4 3 2 1 6\n1\n500000", "3\n4\n1000 2000 3000 4000\n3\n5 5 5\n2\n999999 1000000", "2\n5\n10 20 30 40 50\n3\n100 200 300", "4\n2\n1 2\n3\n3 2 1\n4\n5 5 5 5\n1\n6", "1\n7\n1 3 2 4 6 5 7", "2\n4\n10000 20000 30000 40000\n3\n500000 400000 300000", "3\n2\n999999 888888\n3\n777777 666666 555555\n1\n444444", "1\n5\n1 1 1 1 1", "2\n3\n100 200 300\n4\n400 300 200 100", "1\n6\n123456 234567 345678 456789 567890 678901"]}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "testcase": ["3\n101\n0\n11", "2\n1010\n0011", "1\n10101", "4\n1\n0\n1\n0", "2\n11111\n00000", "5\n1\n11\n111\n1111\n11111", "1\n10", "3\n100\n010\n001", "2\n101010\n010101", "6\n1\n0\n11\n00\n10\n01"]}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "2 1", "3 2", "4 10", "5 20", "6 100", "7 1000", "8 10000", "9 100000", "10 1000000"]}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "testcase": ["a", "z", "hello", "abcdefghijklmnop", "zyxwvutsrqponmlk", "aaaaaaaaaaaaaaa", "qwertyuiopasdfgh", "mnbvcxzlkjhgfdsa", "abcdefghijklmnopqrstuvwxyz", "aaaaaaabbbbbbccccccdddddd"]}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "testcase": ["3\n2\n5\n10", "5\n4\n7\n9\n15\n20", "2\n1000000000\n999999999", "4\n100\n200\n300\n400", "1\n5", "6\n8\n16\n32\n64\n128\n256", "2\n2\n3", "7\n11\n22\n33\n44\n55\n66\n77", "3\n999\n9999\n99999", "4\n2\n3\n4\n5"]}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "testcase": ["1\n1 2 3", "2\n2 1 5\n2 3 7", "3\n3 1 4\n3 2 6\n3 5 9", "4\n2 1 3\n2 4 7\n2 2 5\n2 6 8", "1\n4 10 20\n4 15 25\n4 5 30\n4 1 40", "2\n3 100 200\n3 150 300\n3 250 400", "3\n1 1000000 2000000", "4\n2 5000 10000\n2 7000 15000", "5\n1 999999999 1000000000", "1\n5 1 5\n5 2 6\n5 3 7\n5 4 8\n5 5 9"]}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "testcase": ["1 2 3 4", "100 100 100 100", "50 50 50 50", "1 1 1 1", "25 75 32 18", "99 88 77 66", "10 20 30 40", "5 15 25 35", "42 42 42 42", "67 89 12 34"]}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "testcase": ["5 2\n12345", "1 0\n7", "6 3\n123456", "4 1\n9999", "3 3\n100", "7 4\n1234567", "2 1\n42", "8 5\n98765432", "10 6\n1234567890", "5 5\n10203"]}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "testcase": ["1 1", "100000 100000", "5 7", "10 20", "50000 60000", "12345 67890", "99999 1", "1 99999", "42 42", "75000 25000"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000000"]}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "testcase": ["1\n3\n2 3 1", "2\n4\n2 1 4 3\n2\n1 2", "3\n2\n2 1\n3\n1 3 2\n4\n3 1 4 2", "1\n5\n2 3 4 5 1", "2\n3\n2 1 3\n4\n1 3 2 4", "1\n6\n2 1 4 3 6 5", "3\n2\n1 2\n4\n3 1 4 2\n3\n2 3 1", "2\n5\n3 4 1 2 5\n3\n2 1 3", "1\n4\n3 4 1 2", "2\n2\n2 1\n5\n3 1 4 5 2"]}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "testcase": ["a", "hello", "abcdefghij", "zzzzz", "qwertyuiop", "aaaaabbbbb", "programming", "testingcase", "abcdefghijklmnopqrstuvwxyz", "thequickbrownfoxjumpsoverthelazydog"]}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "testcase": ["3\n123\n456\n789", "5\n1\n22\n333\n4444\n55555", "2\n999999\n111111", "4\n12345\n67890\n11111\n22222", "1\n987654321", "6\n1\n12\n123\n1234\n12345\n123456", "3\n9\n99\n999", "2\n123456789\n987654321", "4\n1111\n2222\n3333\n4444", "5\n1\n10\n100\n1000\n10000"]}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "testcase": ["3\n5 10\n8 15\n12 6", "2\n100 200\n999999999 1000000000", "4\n1 9\n15 3\n7 21\n42 13", "1\n500000000 750000000", "5\n1 1\n2 2\n3 3\n4 4\n5 5", "2\n123456789 987654321\n555555555 444444444", "3\n10 20\n30 40\n50 60", "4\n999 1000\n888 777\n555 444\n111 222", "1\n1000000000 1", "2\n1 1000000000\n1000000000 1"]}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "testcase": ["1", "5", "10", "100", "1000", "2345", "5678", "8765", "9999", "10000"]}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "testcase": ["RGGR", "BBBGGGRRRYYY", "ABC", "RRRRR", "RGBRGBRGB", "AAAABBBBCCCC", "Z", "QWERTYUIOP", "XYZZYX", "MMMNNN"]}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "testcase": ["1\n0", "2\n01\n10", "3\n101\n010\n101", "4\n1010\n0101\n1010\n0101", "5\n10101\n01010\n10101\n01010\n10101", "2\n00\n11", "3\n000\n111\n000", "4\n0000\n1111\n0000\n1111", "3\n110\n011\n101", "5\n11111\n00000\n11111\n00000\n11111"]}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "testcase": ["10\n5 3\n7 4\n10 8\n3 2\n15 10\n100 50\n1000 999\n999999999 500000000\n123456789 987654321\n1 1", "5\n3 2\n8 4\n12 6\n1000 500\n1 1", "3\n100 50\n200 150\n300 250", "7\n5 2\n10 8\n15 12\n20 15\n25 20\n30 25\n35 30", "4\n1000000000 500000000\n800000000 400000000\n600000000 300000000\n400000000 200000000", "6\n10 5\n20 15\n30 25\n40 35\n50 45\n60 55", "8\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8", "2\n999999999 999999999\n1 1", "9\n100 50\n200 100\n300 150\n400 200\n500 250\n600 300\n700 350\n800 400\n900 450", "1\n500000000 250000000"]}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "testcase": ["3\n2\n1 2\n3 4\n3\n5 6\n7 8\n9 10", "2\n3\n1 1\n2 2\n3 3\n4\n4 4\n5 5\n6 6\n7 7", "1\n2\n10 20\n30 40", "4\n1\n5 5\n2\n6 6\n7 7\n1\n8 8\n1\n9 9", "2\n2\n100 200\n300 400\n3\n500 600\n700 800\n900 1000", "1\n5\n1 2\n3 4\n5 6\n7 8\n9 10", "3\n1\n1 1\n2\n2 2\n3 3\n1\n4 4", "2\n4\n10 20\n30 40\n50 60\n70 80\n3\n90 100\n110 120\n130 140", "1\n3\n15 25\n35 45\n55 65", "2\n2\n8 9\n10 11\n2\n12 13\n14 15"]}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <=10^9) without leading zeroes. The second lines contains one integer m (0 <= m <=10^9) --- Bob's answer, possibly with leading zeroes.", "testcase": ["1\n1", "123\n123", "5\n05", "1000\n1000", "0\n0", "42\n042", "999999999\n999999999", "7\n007", "10000\n00010000", "50505\n50505"]}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "testcase": ["()", "(())", "((()))", "(()())", "())", "(()", "()()", "(()(()))", "(((())))", "()((()))"]}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "testcase": ["1.2 1.aa.1", "2.3 2.abc.1 2", "1.4 3.abcd.1 2 3", "3.3 1.xyz.2.4 2.rst.1.5 3.pqr.2", "1.5 4.hello.1 2 3 4", "2.6 3.system.2 1 2.4 2.data.1 3", "1.7 5.program.1 2 3 4 5", "2.4 2.code.1 3.5 3.test.2 4", "1.8 6.computer.1 2 3 4 5 6", "3.3 2.abc.1 1.4 3.def.2 1.5 2.ghi.3 1"]}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "testcase": ["2\n1 2\n2 1", "3\n1 2 3\n3 2 1", "4\n5 2 7 1\n1 3 2 8", "5\n1 2 3 4 5\n5 4 3 2 1", "3\n999999999 888888888 777777777\n111111111 222222222 333333333", "6\n1 3 5 7 9 11\n2 4 6 8 10 12", "4\n1000000000 999999999 999999998 999999997\n1 2 3 4", "7\n7 6 5 4 3 2 1\n1 2 3 4 5 6 7", "5\n5 5 5 5 5\n1 2 3 4 5", "8\n1 2 3 4 5 6 7 8\n8 7 6 5 4 3 2 1"]}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "testcase": ["10\n1 1\n2 3\n5 7\n100 200\n999999999 1000000000\n123456 789012\n42 42\n987654321 123456789\n777777 888888\n1000000000 999999999", "3\n5 10\n15 20\n25 30", "1\n999999999 999999999", "5\n1 1000000000\n2 999999999\n1000000000 1\n123456789 987654321\n555555555 444444444", "2\n42 314159\n271828 161803", "4\n1 2\n10 20\n100 200\n1000 2000", "6\n9 9\n99 99\n999 999\n9999 9999\n99999 99999\n999999 999999", "7\n1 1000000000\n2 999999999\n3 888888888\n4 777777777\n5 666666666\n6 555555555\n7 444444444", "8\n11111 22222\n33333 44444\n55555 66666\n77777 88888\n99999 11111\n22222 33333\n44444 55555\n66666 77777", "9\n123 456\n789 012\n345 678\n901 234\n567 890\n123 987\n456 321\n789 654\n012 345"]}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "testcase": ["3\nNS\nEW\nNSEW", "2\nSSNE\nWEWE", "4\nN\nS\nE\nW", "1\nNESWNESW", "2\nNSEWNSEW\nSWNE", "5\nN\nE\nS\nW\nNESW", "1\nNESWNESWNESW", "3\nNE\nSW\nEW", "2\nNSNS\nEWEW", "4\nNSEW\nSWNE\nEWNS\nWENS"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["10\n2 1\n3 2\n4 3\n5 4\n6 5\n7 6\n8 7\n9 8\n10 9\n11 10", "5\n100 50\n200 100\n300 150\n400 200\n500 250", "3\n1000000000 999999999\n999999999 999999998\n999999998 999999997", "4\n15 7\n25 12\n35 17\n45 22", "6\n1000 500\n2000 1000\n3000 1500\n4000 2000\n5000 2500\n6000 3000", "2\n123456789 87654321\n987654321 123456789", "7\n10 5\n20 10\n30 15\n40 20\n50 25\n60 30\n70 35", "3\n999999 888888\n888888 777777\n777777 666666", "4\n2 1\n3 1\n4 1\n5 1", "8\n100000000 50000000\n200000000 100000000\n300000000 150000000\n400000000 200000000\n500000000 250000000\n600000000 300000000\n700000000 350000000\n800000000 400000000"]}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "testcase": ["1\n4 2\n1 2 3 4\n4 3 2 1", "2\n3 1\n2 2 2\n1 1 1\n5 3\n1 2 3 4 5\n5 4 3 2 1", "1\n5 0\n1 1 1 1 1\n2 2 2 2 2", "3\n2 1\n1 2\n2 1\n3 2\n3 2 1\n1 2 3\n4 3\n1 2 3 4\n4 3 2 1", "1\n6 4\n1 2 3 4 5 6\n6 5 4 3 2 1", "2\n4 2\n1 1 1 1\n2 2 2 2\n3 1\n3 3 3\n1 1 1", "1\n3 3\n1 2 3\n3 2 1", "4\n2 0\n1 1\n2 2\n2 1\n2 2\n1 1\n2 2\n1 2\n2 1\n2 1\n2 1\n1 2", "1\n7 5\n1 2 3 4 5 6 7\n7 6 5 4 3 2 1", "2\n5 2\n1 2 3 4 5\n5 4 3 2 1\n4 3\n2 4 6 8\n8 6 4 2"]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["5\n1\n3\n4\n2\n1", "3\n10\n20\n5", "2\n100\n50", "4\n7\n8\n9\n6", "1\n200", "6\n1\n2\n3\n4\n5\n6", "2\n15\n25", "3\n30\n40\n30", "4\n12\n13\n14\n11", "1\n150"]}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "testcase": ["5\n1 1\n100 200\n5000 5000\n1234 4321\n9999 9999", "3\n42 73\n8888 7777\n10000 10000", "7\n123 456\n789 321\n555 555\n777 888\n999 111\n444 666\n2345 6789", "4\n2468 1357\n9876 5432\n1111 2222\n3333 4444", "6\n159 753\n852 963\n741 852\n369 258\n147 258\n963 741", "2\n5555 5555\n7777 7777", "8\n111 222\n333 444\n555 666\n777 888\n999 1000\n1234 5678\n9876 4321\n1515 2525", "1\n10000 1", "9\n1 10000\n2000 3000\n4000 5000\n6000 7000\n8000 9000\n1500 2500\n3500 4500\n5500 6500\n7500 8500", "10\n11 22\n33 44\n55 66\n77 88\n99 100\n111 222\n333 444\n555 666\n777 888\n999 1000"]}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "testcase": ["10\n1 2\n3 9\n5 25\n10 100\n7 49\n2 16\n15 225\n4 16\n8 64\n6 36", "5\n100 10000\n2 4\n7 14\n9 81\n12 144", "3\n1000000 1000000000000\n5 125\n2 32", "4\n123456 987654321\n999999 999999999999\n1 1000000000000000000\n2 1024", "6\n777 777777\n888 888888\n999 999999\n111 111111\n222 222222\n333 333333", "2\n1 1000000000000000000\n1000000000000000000 1000000000000000000", "7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7", "3\n123456789 987654321987654321\n987654321 123456789123456789\n111111111 999999999999999999", "8\n11 121\n22 484\n33 1089\n44 1936\n55 3025\n66 4356\n77 5929\n88 7744", "4\n999999999999999999 999999999999999999\n1 2\n2 4\n4 16"]}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "testcase": ["10\n5 3\n0 0\n1000000000 1000000000\n42 17\n100 200\n7 7\n1 0\n999999999 123456789\n55555 44444\n123 456", "5\n1 1\n2 2\n3 3\n4 4\n5 5", "3\n1000000000 0\n0 1000000000\n500000000 500000000", "7\n123456 789012\n0 1\n1 0\n999999 999999\n1000 2000\n5000 5000\n10 20", "4\n987654321 123456789\n111111111 222222222\n333333333 444444444\n555555555 666666666", "6\n1 1\n10 10\n100 100\n1000 1000\n10000 10000\n100000 100000", "8\n9 8\n7 6\n5 4\n3 2\n1 0\n0 1\n2 3\n4 5", "2\n999999999 999999999\n0 0", "1\n500000000 500000000", "9\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14\n15 16\n17 18"]}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <=10^9). Both numbers are written in decimal notation.", "testcase": ["0 0", "1 1", "999999999 999999999", "123456789 987654321", "0 999999999", "999999999 0", "42 42", "100000 200000", "555555555 444444444", "777777777 888888888"]}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "testcase": ["10\n1 0\n2 3\n3 5\n4 8\n5 10\n6 15\n7 20\n8 30\n9 40\n10 50", "5\n2 4\n3 9\n4 16\n5 25\n6 36", "3\n10 100\n15 225\n20 400", "4\n8 64\n7 49\n6 36\n5 25", "6\n3 8\n4 12\n5 20\n6 30\n7 42\n8 56", "2\n12 144\n15 225", "7\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7", "3\n25 625\n20 400\n15 225", "4\n11 121\n12 144\n13 169\n14 196", "5\n9 81\n8 64\n7 49\n6 36\n5 25"]}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "testcase": ["3\n101\n0\n11", "5\n101\n0\n11\n00\n1", "1\n1010101", "4\n1\n0\n1\n0", "2\n11111\n00000", "6\n1\n11\n111\n1111\n11111\n111111", "7\n10\n01\n101\n010\n1010\n0101\n1001", "1\n10101010101010101010", "10\n1\n0\n1\n0\n1\n0\n1\n0\n1\n0", "2\n1100110011\n0011001100"]}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n5\n1 2 3 4 5", "2\n3\n7 8 9\n4\n1 3 5 7", "3\n2\n10 20\n3\n100 200 300\n1\n5", "1\n7\n4 8 15 16 23 42 100", "2\n4\n1000 2000 3000 4000\n3\n1 2 3", "1\n6\n999999999 888888888 777777777 666666666 555555555 444444444", "3\n2\n1 1\n2\n2 2\n2\n3 3", "1\n10\n1 2 3 4 5 6 7 8 9 10", "2\n5\n5 4 3 2 1\n5\n1 3 5 7 9", "1\n8\n11 22 33 44 55 66 77 88"]}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "testcase": ["1\n5", "2\n1\n1000000000", "3\n7\n42\n999999999", "1\n123456789", "4\n9\n99\n999\n9999", "2\n54321\n12345", "3\n1\n2\n3", "1\n987654321", "2\n500000000\n500000001", "5\n1\n10\n100\n1000\n10000"]}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "testcase": ["3", "10", "100", "1000", "10000", "100000", "500000", "750000", "999999", "1000000"]}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "testcase": ["1\n5", "3\n1\n4\n9", "2\n1000000000\n999999999", "4\n7\n3\n8\n2", "5\n10\n20\n30\n40\n50", "1\n1", "2\n5\n5", "3\n100\n200\n300", "4\n1\n2\n3\n4", "6\n15\n25\n35\n45\n55\n65"]}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "testcase": ["123", "5", "999999", "1000000", "42", "7654321", "1", "88888", "123456789", "9876543210"]}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "testcase": ["10\n1 2\n0 5\n1000 500\n999999 1\n500000 500000\n0 0\n123456 654321\n987654 123456\n10 10\n42 42", "5\n100 200\n300 400\n500 600\n700 800\n900 1000", "3\n0 1000000\n1000000 0\n500000 500000", "6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "4\n123 456\n789 012\n345 678\n901 234", "2\n999999 999999\n0 0", "7\n1000 2000\n3000 4000\n5000 6000\n7000 8000\n9000 10000\n11000 12000\n13000 14000", "1\n500000 500000", "8\n1 100\n100 200\n200 300\n300 400\n400 500\n500 600\n600 700\n700 800", "3\n999999 1\n1 999999\n500000 500000"]}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "testcase": ["1 2 1 1 1", "10 20 5 15 3", "100 200 50 100 40", "1000000000 1000000000 1 1 1000000000", "5 7 3 2 4", "15 12 10 8 5", "1000 2000 500 1000 300", "50000 40000 30000 20000 10000", "123456789 987654321 123456788 987654320 1000000", "777777777 888888888 777777776 888888887 100000000"]}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "testcase": ["3\n2\n42\n3\n123\n1\n5", "2\n4\n1234\n3\n789", "1\n5\n12345", "4\n1\n7\n2\n15\n3\n999\n1\n4", "2\n6\n123456\n4\n8765", "3\n2\n55\n3\n777\n4\n1001", "1\n7\n1234567", "5\n1\n9\n2\n10\n3\n101\n2\n99\n1\n8", "2\n3\n555\n5\n98765", "4\n2\n11\n3\n222\n4\n3333\n5\n44444"]}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["3\n2 5 8\n3\n4 7 2 9\n2\n1000000000 999999999", "4\n5 7 2 1 3\n2\n100 200\n3\n1 2 3\n4\n10 20 30 40", "2\n15 25\n3\n100 200 300", "5\n1 2 3 4 5\n2\n999999999 1000000000", "3\n7 8 9\n4\n11 12 13 14\n2\n100 200", "2\n500000 600000\n3\n1 2 3\n4\n4 5 6 7", "3\n10000 20000 30000\n2\n40000 50000", "4\n1 3 5 7\n3\n2 4 6\n2\n8 9", "2\n999999998 999999999\n3\n1000000000 999999999 999999998", "5\n1 10 100 1000 10000\n2\n100000 1000000"]}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <=10^9).", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "testcase": ["3\n2 1\n5 10", "4\n3 2\n1 2 3 4", "2\n1 1\n100000000 200000000", "5\n4 2\n5 8 12 1 3", "3\n2 1\n1000000000 999999999 998999999", "6\n5 3\n10 20 30 40 50 60", "4\n3 1\n7 3 9 2", "2\n1 1\n5 15", "5\n3 2\n100 200 300 400 500", "3\n2 1\n45 67 89"]}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "testcase": ["3\n2 5\n1 2\n3 10\n4 5 6\n1 3\n7", "2\n4 100\n5 10 15 20\n3 50\n25 30 35", "4\n2 1000\n500 600\n3 2000\n100 200 300\n2 3000\n400 500\n1 4000\n600", "1\n5 999999\n1000 2000 3000 4000 5000", "2\n1 0\n0\n2 1000000\n999999 1000000", "3\n4 5000\n1 2 3 4\n3 6000\n5 6 7\n2 7000\n8 9", "1\n3 500000\n250000 300000 400000", "2\n2 100000\n50000 60000\n4 200000\n70000 80000 90000 100000", "4\n1 1\n1\n2 2\n1 2\n3 3\n1 2 3\n4 4\n1 2 3 4", "1\n6 777777\n100000 200000 300000 400000 500000 600000"]}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "testcase": ["10\n1 1\n2 1\n3 2\n4 3\n5 2\n10 5\n100 50\n1000 500\n10000 5000\n100000 50000", "5\n3 2\n7 4\n15 10\n50 25\n100 75", "3\n5 3\n10 7\n15 12", "7\n2 1\n4 2\n8 4\n16 8\n32 16\n64 32\n128 64", "4\n6 3\n12 6\n24 12\n48 24", "6\n1 1\n10 5\n100 50\n1000 500\n10000 5000\n100000 50000", "8\n5 2\n15 7\n25 12\n35 17\n45 22\n55 27\n65 32\n75 37", "2\n99999 50000\n100000 75000", "9\n11 5\n22 10\n33 15\n44 20\n55 25\n66 30\n77 35\n88 40\n99 45", "1\n100000 100000"]}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "testcase": ["3\nabcdef\nxyzzz\naaaa", "2\nqwerty\nasdfgh", "4\nabc\ndef\nghi\njkl", "1\nzzzzzz", "5\na\nb\nc\nd\ne", "2\nmnbvcx\npoiuyt", "3\nab\ncd\nef", "4\naaaaa\nbbbbb\nccccc\nddddd", "1\nabcdefghijklmnop", "6\nx\ny\nz\na\nb\nc"]}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <=10^6.", "testcase": ["1 1 1 1", "1000000 1000000 1000000 1000000", "5 7 2 9", "123456 789012 345678 901234", "999999 888888 777777 666666", "42 42 42 42", "1 1000000 500000 250000", "654321 987654 246810 135790", "111111 222222 333333 444444", "7 14 21 28"]}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "testcase": ["3\n2 5\n1 2\n3 10\n4 5 6\n1 7\n3", "2\n4 8\n1 2 3 4\n5 15\n2 4 6 8 10", "1\n3 100\n5 10 15", "4\n2 7\n3 4\n1 9\n8\n3 12\n2 4 6\n2 5\n1 2", "2\n6 20\n1 3 5 7 9 11\n4 15\n2 4 6 8", "3\n2 30\n10 20\n3 25\n5 10 15\n1 40\n7", "1\n5 50\n2 4 6 8 10", "2\n3 60\n15 30 45\n4 35\n5 10 15 20", "3\n2 70\n25 45\n1 80\n30\n3 90\n10 20 30", "1\n4 100\n12 34 56 78"]}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "testcase": ["3\nabcdef\nz\nqwerty", "4\na\nab\nabc\nabcd", "2\nhello\nworld", "5\ncat\ndog\nrat\nowl\nfox", "1\nprogram", "6\na\nb\nc\nd\ne\nf", "2\ncomputer\nkeyboard", "3\ntest\ncase\ndata", "4\none\ntwo\nfour\nfive", "2\nstring\narray"]}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "testcase": ["10\n1 1\n2 3\n5 7\n100 200\n999999999 1000000000\n123456 789012\n42 42\n987654321 123456789\n1 1000000000\n777777 888888", "3\n5 10\n15 20\n25 30", "5\n100 200\n300 400\n500 600\n700 800\n900 1000", "1\n999999999 999999999", "7\n1 2\n3 4\n5 6\n7 8\n9 10\n11 12\n13 14", "2\n123456789 987654321\n555555555 444444444", "4\n1 1000000000\n2 999999999\n3 999999998\n4 999999997", "6\n11111 22222\n33333 44444\n55555 66666\n77777 88888\n99999 11111\n12345 67890", "8\n1 10\n20 30\n40 50\n60 70\n80 90\n100 110\n120 130\n140 150", "9\n987654 123456\n876543 234567\n765432 345678\n654321 456789\n543210 567890\n432109 678901\n321098 789012\n210987 890123\n109876 901234"]}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "testcase": ["1,2,3,4,100", "2,4,6,8,1000", "1,1,1,1,10", "10,9,8,7,50000", "5,5,5,5,1000", "3,6,9,2,75", "7,3,5,1,99999", "4,8,2,6,500", "1,3,5,7,25000", "10,10,10,10,100000"]}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "testcase": ["3\n1\n1000000000000\n5", "5\n7\n42\n999999999999\n1\n100", "1\n123456789012", "4\n1\n2\n3\n4", "2\n999999999999\n1", "6\n12\n34\n56\n78\n90\n123", "1\n1", "7\n1000000000000\n1\n2\n3\n4\n5\n6", "2\n123456789012\n987654321098", "4\n9999\n99999\n999999\n9999999"]}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "testcase": ["4\n1\n1000\n999999999999999999\n42", "3\n7\n77\n777", "5\n123\n456\n789\n101112\n131415", "2\n999999999\n888888888", "6\n1\n2\n3\n4\n5\n6", "3\n1000000000000\n2000000000000\n3000000000000", "4\n11111\n22222\n33333\n44444", "2\n987654321\n123456789", "5\n9\n99\n999\n9999\n99999", "3\n555555555555\n666666666666\n777777777777"]}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "testcase": ["5\nabcde\naa\nxyz\npqrst\nmnop", "3\nabc\ndef\nghi", "1\nz", "4\naaaaa\nbbbb\nccc\ndd", "2\nqwerty\nasdfgh", "6\na\nb\nc\nd\ne\nf", "1\nabcdefghijklmnop", "3\nzzzz\nyyyy\nxxxx", "2\nmnbvcx\npoiuyt", "4\nqq\nww\nee\nrr"]}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <=10^13).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "42", "999999999999", "1000000000000", "123456789012", "7777777777777", "5000000000000", "9999999999999", "2468135790123", "1357924680123"]}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "testcase": ["3\nANT\nNOT\nTON", "4\nA\nN\nO\nT", "2\nANTON\nTONAT", "1\nANTANTANT", "5\nAO\nNT\nAN\nTO\nNO", "2\nANTONANTON\nTONATONATO", "3\nANO\nTNO\nATO", "1\nANTONTONATONAT", "4\nANT\nTON\nNAT\nOAT", "2\nANTOANTO\nTONATNOA"]}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "testcase": ["3\n1?0\n10?\n?", "2\n1?\n0?1", "1\n1?0?1", "4\n0\n1\n?\n??", "2\n1?0?1?\n0?1", "1\n1?1?1?1?1", "3\n0?0\n1?1\n???", "2\n1?0?1?0?\n?1", "1\n0?1?0?1?0", "5\n1\n0\n?\n??\n???"]}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <=10^9, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "testcase": ["1 3 5 7", "2 4 6 8", "1 5 6 9", "3 6 7 9", "1 4 7 10", "2 5 8 11", "1 3 8 10", "4 7 8 11", "1 6 7 11", "2 7 8 11"]}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "testcase": ["5 3\n2 10\n4 20\n3 15\n5 30\n1 5", "3 2\n1 10\n2 15\n3 20", "4 1\n2 25\n3 30\n1 15\n4 40", "2 2\n5 45\n3 30", "6 4\n4 35\n2 20\n5 40\n3 25\n1 10\n6 50", "1 1\n3 15", "7 5\n2 20\n4 35\n6 45\n1 10\n3 25\n5 40\n7 50", "4 3\n1 5\n3 20\n2 15\n4 25", "5 2\n5 40\n3 25\n4 35\n2 15\n1 10", "3 3\n2 20\n4 35\n3 25"]}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <=10^4, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "testcase": ["10 5 50", "100 50 75", "1000 500 120", "5000 2500 200", "9999 5000 150", "1 1 100", "500 250 80", "2000 1500 90", "8000 4000 180", "10000 8000 250"]}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "testcase": ["1", "2", "3", "4", "5", "2", "1", "4", "3", "5"]}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "testcase": ["100 50 10", "500 200 15", "800 400 20", "1000 500 30", "300 150 25", "600 300 40", "750 500 50", "900 600 35", "400 200 45", "950 700 60"]}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <=10^6 --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "testcase": ["1 1 1 1", "2 3 4 100", "5 2 3 1000", "10 5 6 500", "3 4 5 999999", "100 200 300 400", "1000 2 4 5000", "50 60 70 80", "777 888 999 1000", "500000 1 1 1000000"]}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <=10^18) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "testcase": ["1 1", "1 10", "5 15", "100 200", "1000 5000", "123456 789012", "1000000 2000000", "999999999 1000000000", "100000000000 200000000000", "123456789012345 999999999999999"]}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "testcase": ["1 2 3", "0 0 1", "1000000 2000000 3000000", "2147483647 2147483647 2147483647", "0 1 0", "5000 0 7000", "1234567 7654321 9876543", "2147483647 0 0", "100 200 300", "987654321 123456789 567891234"]}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "testcase": ["1", "2", "5", "10", "50", "100", "250", "500", "750", "1000"]}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <=10^5) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "testcase": ["2\n3 3", "3\n1 2 3", "4\n5 5 5 5", "5\n1 1 2 2 3", "6\n10 20 30 10 20 30", "7\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "8\n1 2 3 4 4 3 2 1", "9\n5 4 3 2 1 1 2 3 4", "10\n1 2 3 4 5 5 4 3 2 1", "100000\n1 1 1 1 1"]}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <=10^9). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <=10^9).", "testcase": ["5 3\n1 2 3 4 5", "3 10\n7 8 9", "1 0\n5", "4 1000000000\n1000000000 999999999 999999998 999999997", "2 42\n10 20", "6 7\n0 1 2 3 4 5", "3 100000\n500000 600000 700000", "4 555\n1 10 100 1000", "2 999999999\n123456789 987654321", "7 12345\n1 2 4 8 16 32 64"]}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "testcase": ["2 2\n1 2\n2 1", "10 3\n5 5\n7 2\n4 3", "100 4\n90 10\n85 15\n70 20\n95 5", "5000 5\n4000 1000\n3000 2000\n2000 3000\n1000 4000\n500 5000", "1 1\n1 0", "50 3\n30 20\n40 10\n20 30", "1000 2\n500 500\n800 200", "8000 4\n7000 1000\n6000 2000\n5000 3000\n4000 4000", "150 3\n100 50\n120 30\n80 70", "300 2\n200 100\n250 50"]}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "500000", "750000", "999999", "1000000"]}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <=10^9; <image> <=10^5).", "testcase": ["1 2 10", "5 3 20", "10 4 50", "2 5 30", "7 6 40", "3 7 25", "8 8 45", "4 9 35", "6 10 60", "9 11 55"]}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "testcase": ["xy", "xxy", "yyx", "xyxy", "xxxyyy", "yxyxyx", "yyyyxx", "xxyxyy", "xyyyxx", "yxxxxxy"]}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "testcase": ["1 0 0\n0 1 0\n0 0 1", "0 0 0\n0 0 0\n0 0 0", "100 100 100\n100 100 100\n100 100 100", "1 1 1\n1 1 1\n1 1 1", "0 1 0\n1 0 1\n0 1 0", "2 3 4\n1 2 3\n4 5 6", "10 20 30\n40 50 60\n70 80 90", "5 5 5\n5 5 5\n5 5 5", "99 98 97\n96 95 94\n93 92 91", "7 8 9\n4 5 6\n1 2 3"]}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "testcase": ["1", "3", "5", "7", "9", "11", "13", "15", "16", "2"]}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <=10^18, 2 <= k <=10^9).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "testcase": ["1 2", "1000000000000000000 999999999", "42 7", "987654321 123456789", "1 1000000000", "123456789012345678 100000000", "555555555 5555", "999999999999999999 999999998", "777777777 88888", "100000000000000000 500000000"]}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "testcase": ["3 2 1", "4 3 2", "10 5 5", "100 50 50", "1000 500 500", "4000 2000 2000", "3000 1500 1800", "2000 1000 1200", "500 250 300", "4000 3000 1000"]}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3.10^7) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.", "testcase": ["2 3 1\n*..\n...", "3 4 5\n....\n.*..\n....", "5 5 10\n.....\n.*.*.\n.....\n.*.*.\n.....", "1 1 1\n*", "4 3 15\n...\n.*.\n...\n.*.", "3 3 7\n***\n...\n***", "2 2 3\n.*\n*.", "6 4 25\n....\n.*..\n....\n.*..\n....\n....", "4 4 12\n....\n.*..\n...*\n....", "3 5 20\n.....\n.*.*.\n....."]}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <=10^7).", "testcase": ["1 1", "10 20", "100 50", "5000 7000", "1000000 2000000", "9999999 9999999", "123456 654321", "7777777 8888888", "1 10000000", "10000000 1"]}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "testcase": ["+-", "++-", "-+-", "++--", "+-+-", "+++---", "-+-+-+", "++--++--", "+-+-+-+-", "++++----"]}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <=10^9).", "testcase": ["3 5\n12\n45\n789", "1 0\n123456789", "5 2\n1\n2\n3\n4\n5", "4 9\n1000000000\n999999999\n888888888\n777777777", "2 3\n42\n17", "6 7\n123\n456\n789\n321\n654\n987", "3 1\n9999\n8888\n7777", "7 4\n11\n22\n33\n44\n55\n66\n77", "1 8\n5000", "4 6\n12345\n67890\n11111\n99999"]}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "testcase": ["1\n1234\n5678\n9...\n....", "2\n1...\n.2..\n..3.\n...4", "3\n1234\n....\n....\n....", "4\n1...\n2...\n3...\n4...", "5\n12..\n34..\n56..\n....", "1\n....\n....\n...1\n....", "2\n1234\n5678\n....\n....", "3\n....\n1234\n5678\n9...", "4\n1...\n.2..\n..3.\n...4", "5\n9876\n5432\n1...\n...."]}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <=10^6.\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "testcase": ["4 5 2 3 1 2", "100 100 50 50 10 20", "1000000 1000000 500000 500000 1000000 1000000", "5 5 1 1 2 2", "10 8 3 4 5 6", "1000 2000 500 1000 100 200", "999999 999999 1 1 500000 500000", "6 6 3 3 4 4", "100000 100000 50000 50000 1 1", "777777 888888 123456 234567 100000 200000"]}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "testcase": ["1 2", "1000 1000", "500 500", "42 73", "999 998", "123 456", "777 888", "15 20", "444 555", "100 200"]}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4.10^7).", "testcase": ["0", "1", "25", "100", "1000", "10000", "100000", "1000000", "10000000", "40000000"]}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "7"]}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <=10^6, containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "testcase": ["1*2?0", "*1?2", "?*?", "12*2?", "?*1*2", "0?1*", "*?*", "2*1?2*", "?2*1", "1*?2*1"]}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "testcase": ["5\n3 8 5 1 4", "3\n2 2 2", "7\n10 5 8 9 4 6 7", "1\n5", "4\n1 2 3 4", "6\n7 7 7 7 7 7", "2\n1 1", "8\n3 5 2 8 1 9 4 6", "10\n1 2 3 4 5 6 7 8 9 10", "9\n4 4 4 4 4 4 4 4 4"]}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "testcase": ["1 -5 2 7", "100000 0 50000 1", "5000 -100000 7500 100000", "1234 567 8910 -567", "99999 1 99999 -1", "50000 -50000 50000 50000", "777 -999 888 999", "12345 67890 54321 -67890", "100 42 200 -42", "9876 -5432 1234 5432"]}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "testcase": ["ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ALICE", "PROGRAMMING", "CONTEST", "CODEFORCES", "ALGORITHMIC", "COMPETITION", "DEVELOPER", "ENGINEERING", "MICROSOFT"]}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "testcase": ["5 3\n2 -4 7 -1 3", "1 1\n5", "10 5\n1 2 3 4 5 6 7 8 9 10", "8 2\n-1000 -500 0 500 1000 -750 250 -250", "3 4\n-1 0 1", "15 7\n-100 200 -300 400 -500 600 -700 800 -900 1000 -800 700 -600 500 -400", "4 6\n999 -999 1000 -1000", "7 1\n7 -7 6 -6 5 -5 4", "12 8\n100 -100 200 -200 300 -300 400 -400 500 -500 600 -600", "2 10\n42 -42"]}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "testcase": ["5 100\n1 2 3 4 5", "3 50\n10 20 30", "1 1000\n42", "10 5000\n1 1 1 1 1 1 1 1 1 1", "7 300\n15 25 35 45 55 65 75", "4 999\n100 99 98 97", "8 777\n50 51 52 53 54 55 56 57", "2 8888\n1 100", "6 444\n33 44 55 66 77 88", "9 2500\n10 20 30 40 50 60 70 80 90"]}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <=10^5). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <=10^5).", "testcase": ["5 3\n2 4 1 5 3", "1 1\n5", "10 7\n1 2 3 4 5 6 7 8 9 10", "3 100\n50 75 25", "8 15\n12 9 6 3 15 18 21 24", "4 42\n13 42 17 28", "7 99\n11 22 33 44 55 66 77", "2 50000\n25000 75000", "6 10000\n5000 15000 25000 35000 45000 55000", "9 88\n10 20 30 40 50 60 70 80 90"]}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5.10^5) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <=10^6 --- the values of the array elements.", "testcase": ["5\n1 2 3 4 5", "3\n1000000 500000 250000", "1\n42", "10\n1 1 1 1 1 1 1 1 1 1", "7\n123456 234567 345678 456789 567890 678901 789012", "4\n999999 888888 777777 666666", "2\n1 1000000", "8\n12345 23456 34567 45678 56789 67890 78901 89012", "6\n500000 400000 300000 200000 100000 50000", "9\n1 10 100 1000 10000 100000 200000 500000 1000000"]}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "testcase": ["(a, b, c)", "(x, y, z)", "(a)", "(p, q)", "(m, n, o, p)", "(a, b, c, d, e, f)", "(r, s)", "(h, i, j, k)", "(w)", "(t, u, v)"]}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "testcase": ["1 0 0 0", "10 5 5 5", "100 50 25 75", "1000 500 500 500", "5000 2500 1000 3000", "9999 4999 4999 4999", "10000 5000 5000 5000", "8765 4321 3210 1234", "2468 1357 2468 3579", "7531 951 753 159"]}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "453_E. Little Pony and Lord Tirek", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 105) --- the number of ponies. Each of the next n lines contains three integers si, mi, ri (0 <= si <= mi <= 105; 0 <= ri <= 105), describing a pony. \n\nThe next line contains an integer m (1 <= m <= 105) --- the number of instructions. Each of the next m lines contains three integers ti, li, ri (0 <= ti <= 109; 1 <= li <= ri <= n), describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti (all ti are distinct).", "testcase": ["3\n1 2 3\n4 5 6\n7 8 9\n2\n1 1 2\n3 2 3", "1\n5 10 15\n1\n7 1 1", "5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n3\n1 1 3\n5 2 4\n10 3 5", "2\n10 20 30\n40 50 60\n4\n1 1 1\n2 1 2\n5 2 2\n8 1 2", "4\n0 1 2\n3 4 5\n6 7 8\n9 10 11\n1\n100 1 4", "3\n100 100 100\n200 200 200\n300 300 300\n2\n5 1 2\n10 2 3", "6\n1 2 3\n4 5 6\n7 8 9\n10 11 12\n13 14 15\n16 17 18\n3\n1 1 3\n2 2 4\n3 4 6", "2\n0 0 0\n1 1 1\n5\n1 1 1\n2 1 2\n3 2 2\n4 1 2\n5 1 1", "4\n5 10 15\n20 25 30\n35 40 45\n50 55 60\n3\n100 1 2\n200 2 3\n300 3 4", "1\n100000 100000 100000\n1\n1000000000 1 1"]}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "testcase": ["5\n2 1 3\n3 2 4 5", "3\n1 2\n2 1 3", "10\n4 1 3 5 7\n3 2 4 6", "1\n1 1\n0", "7\n3 2 4 6\n2 1 7", "4\n0\n2 1 3", "8\n5 1 3 5 7 8\n2 2 4", "2\n1 1\n1 2", "6\n2 3 5\n4 1 2 4 6", "9\n3 1 5 9\n5 2 3 4 6 8"]}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "testcase": ["1 2", "5000 5", "10000 10", "42 7", "999 3", "2468 6", "7777 9", "123 4", "8765 8", "3456 5"]}
{"name": "476_C. Dreamoon and Sums", "description": "Input\n\nThe single line of the input contains two integers a, b (1 <= a, b <= 107).", "testcase": ["1 1", "10000000 10000000", "5432 9876", "1000 2000", "9999999 8888888", "123456 654321", "7777777 1234567", "1 10000000", "4567890 1234567", "2468 13579"]}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "testcase": ["0 0 0 0 0", "100 100 100 100 100", "50 25 75 30 40", "10 20 30 40 50", "1 2 3 4 5", "99 98 97 96 95", "15 15 15 15 15", "0 100 50 25 75", "33 44 55 66 77", "87 65 43 21 9"]}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2.10^9) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "testcase": ["0 0 0", "1 2 3", "1000000000 1000000000 1000000000", "5 0 7", "2000000000 1500000000 1000000000", "123456789 987654321 555555555", "1 1 1", "2000000000 0 2000000000", "999999999 888888888 777777777", "42 42 42"]}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <=10^9; 2 <= x < y <= 3.10^4) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "testcase": ["2 3 2 3", "100 200 3 5", "1000 2000 11 13", "5000000 6000000 17 19", "123456 789012 23 29", "999999 999999 31 37", "500000000 400000000 41 43", "100000000 200000000 47 53", "333333333 333333333 59 61", "777777777 111111111 67 71"]}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <=10^9).", "testcase": ["0", "1", "-1", "1000000000", "-1000000000", "42", "-42", "999999999", "-999999999", "123456789"]}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "testcase": ["4 10\n2 3 6 8", "2 5\n0 5", "3 100\n20 40 80", "5 1000\n0 200 400 600 1000", "1 5\n2", "6 15\n0 3 6 9 12 15", "4 999999999\n0 333333333 666666666 999999999", "3 10\n5 5 5", "7 100\n0 10 20 30 40 50 100", "2 1000000000\n0 1000000000"]}
{"name": "49_D. Game", "description": "Input\n\nThe first line contains number n (1 <= n <= 1000) which represents the stripe's length. The second line contains exactly n symbols --- the line's initial coloring. 0 corresponds to a white square, 1 corresponds to a black one.", "testcase": ["5\n10101", "3\n000", "4\n1111", "7\n1010101", "2\n01", "6\n101010", "8\n11110000", "1\n1", "10\n1010101010", "9\n000111000"]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 3", "5 7", "7 15", "9 25", "11 30", "13 45", "15 50", "21 33", "35 40", "49 48"]}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "testcase": ["2 2\nAB\nBA", "3 4\nABCD\nDCBA\nABCD", "4 3\nABC\nDEF\nGHI\nJKL", "5 5\nABCDE\nFGHIJ\nKLMNO\nPQRST\nUVWXY", "2 3\nABC\nCBA", "3 3\nABC\nDEF\nGHI", "4 4\nAAAA\nBBBB\nCCCC\nDDDD", "3 5\nABCDE\nEDCBA\nABCDE", "2 4\nABCD\nDCBA", "4 2\nAB\nCD\nEF\nGH"]}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "testcase": ["1 2 3 4", "5 10 2 3", "15 20 4 5", "30 25 6 7", "40 45 8 9", "50 48 10 12", "7 9 2 4", "12 14 5 6", "35 33 7 8", "22 27 4 3"]}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "testcase": ["1\n*", "3\n.*.", "5\n*...*", "7\n..*...*", "4\n****", "6\n......", "10\n**.*....**", "8\n..*..*..", "2\n..", "9\n.*.*.*.*."]}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <=10^5).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <=10^6 for i-th query.", "testcase": ["2 5 3\n1 4 2\n2 3 1\n3 5 3", "1 3 2\n1 2 3\n2 3 1", "4 8 4\n1 6 2\n2 5 3\n3 7 1\n4 8 2", "3 6 1\n2 4 3", "5 10 2\n1 7 4\n3 8 2", "2 4 3\n1 3 2\n2 3 1\n1 4 3", "1 7 2\n2 5 3\n3 6 2", "6 9 4\n1 7 2\n2 8 3\n3 8 1\n4 9 2", "3 8 3\n1 5 2\n2 6 3\n3 7 1", "4 7 2\n2 5 3\n3 6 2"]}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^6.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "500000", "750000", "999999", "1000000"]}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <=10^9) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "testcase": ["1\n1 5", "2\n1 3\n4 2", "3\n2 5\n7 1\n9 4", "4\n1 2\n3 4\n5 6\n7 8", "5\n1 10\n3 7\n6 4\n8 2\n10 5", "3\n100 200\n500 300\n900 100", "4\n5 10\n15 20\n25 15\n35 25", "6\n1 5\n3 8\n6 2\n8 7\n10 3\n12 6", "5\n11 15\n23 12\n35 18\n47 9\n59 14", "7\n2 4\n5 7\n8 3\n11 9\n14 5\n17 8\n20 6"]}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "testcase": ["A", "HELLO", "PROGRAMMING", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "ZZZZZ", "AEIOU", "CONTEST", "ALGORITHM", "CODEFORCES", "COMPETITION"]}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "testcase": ["5\n1 2 3 4 5", "3\n1000 1000 1000", "1\n2000", "7\n5 4 3 2 1 6 7", "4\n1 1 1 1", "10\n2000 1999 1998 1997 1996 1995 1994 1993 1992 1991", "2\n1 2000", "6\n500 600 700 800 900 1000", "8\n1 1 2 2 3 3 4 4", "9\n100 200 300 400 500 600 700 800 900"]}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "testcase": ["hello", "a", "z", "abcdefghijklmnopqrst", "programming", "test", "algorithm", "contest", "codeforces", "python"]}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "testcase": ["abcde\nzyxwv", "hello\nworld", "aaa\nbbb", "programming\ncompetition", "cat\ndog", "zzz\naaa", "abcdefghij\nklmnopqrst", "test\ncase", "algorithm\nstructure", "x\ny"]}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "testcase": ["5 7\n3 2\n4 1", "10 10\n5 5\n4 4", "8 6\n3 2\n2 4", "15 20\n7 8\n6 5", "100 200\n50 40\n30 60", "4 4\n2 1\n1 2", "1000 1000\n500 500\n400 400", "12 15\n6 4\n5 7", "25 30\n10 12\n8 15", "50 40\n20 15\n18 12"]}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <=10^8, 2 <= hi <=10^8) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "testcase": ["3\n1 5\n4 3\n7 4", "5\n-2 3\n0 4\n3 6\n7 5\n10 8", "1\n0 2", "4\n-5 10\n2 7\n8 4\n15 6", "2\n-1 3\n2 4", "6\n-10 5\n-5 7\n0 4\n5 6\n10 3\n15 8", "7\n-20 6\n-15 4\n-10 8\n-5 3\n0 5\n5 7\n10 4", "4\n-100 50\n0 30\n100 40\n200 60", "3\n-1000000 1000\n0 500\n1000000 2000", "5\n-50 20\n-20 15\n10 25\n40 30\n70 35"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["10 5", "1000 1000", "999999999 123456789", "100 50", "1000000000 1", "5 3", "1234 567", "987654321 876543210", "2 1", "500000000 250000000"]}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3.10^5, 0 <= l <= 3.10^5).", "testcase": ["1 1 1 0", "1 2 3 10", "100 200 300 1000", "3 2 1 5", "150 150 150 300", "1000 2000 3000 5000", "5 4 3 10", "10000 20000 30000 50000", "300000 200000 100000 300000", "250000 250000 250000 300000"]}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "testcase": ["3\n1\n1000000000\n5", "5\n7\n23\n456\n789123\n1000000000", "1\n999999999", "4\n42\n100\n9999\n12345", "2\n1\n2", "6\n1\n10\n100\n1000\n10000\n100000", "7\n9\n99\n999\n9999\n99999\n999999\n9999999", "3\n123456789\n987654321\n555555555", "8\n1\n2\n3\n4\n5\n6\n7\n8", "4\n1000000000\n999999999\n999999998\n999999997"]}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <=10^8) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "testcase": ["1 2 3", "5 7 4", "10 8 6", "100 200 150", "1000000 2000000 1500000", "99999999 88888888 77777777", "1 1 1", "42 42 42", "12345678 87654321 45678912", "50000000 60000000 45000000"]}
{"name": "599_C. Day at the Beach", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains n integers hi (1 <= hi <= 109). The i-th of these integers corresponds to the height of the i-th castle.", "testcase": ["1\n5", "3\n1 2 3", "5\n10 20 30 40 50", "4\n1000000000 999999999 999999998 999999997", "2\n1 1", "6\n5 4 3 2 1 6", "7\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "8\n1 3 5 7 9 11 13 15", "10\n42 17 29 35 11 89 64 93 75 50", "9\n100 200 300 400 500 600 700 800 900"]}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.", "testcase": ["()", "((()))", "(()())", "((())())", "()((()))", "(((())))", "(())(())", "(()()())", "((()()))", "()()()"]}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "testcase": ["5\n3 8 1 9 4", "1\n5", "7\n1 2 3 4 5 6 7", "3\n999999999 888888888 777777777", "10\n1 3 5 7 9 2 4 6 8 10", "4\n1000000000 2 3 4", "6\n42 17 29 53 88 91", "2\n123456789 987654321", "8\n11 22 33 44 55 66 77 88", "9\n100 200 300 400 500 600 700 800 900"]}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "testcase": ["1", "5", "10", "100", "1000", "10000", "100000", "1000000000", "10000000000", "100000000000000"]}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <=10^9) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "testcase": ["2\n1 2", "3\n5 4 3", "4\n1 1 1 1", "5\n2 3 4 5 6", "10\n1 2 3 4 5 6 7 8 9 10", "26\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "15\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111 100000000 200000000 300000000 400000000 500000000 600000000", "6\n10 20 30 40 50 60", "8\n100 200 300 400 500 600 700 800", "20\n5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5"]}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <=10^18) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <=10^18, 1 <= c < b <=10^18) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "testcase": ["5\n2\n4\n1", "100\n5\n10\n3", "1000\n20\n50\n15", "999999\n100\n200\n50", "1000000000\n1000\n2000\n500", "123456789\n5000\n10000\n2500", "987654321\n10000\n20000\n5000", "10\n2\n5\n1", "500\n10\n25\n8", "777777\n300\n900\n200"]}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "testcase": ["0 1", "1 0", "1000000 0", "0 1000000", "500000 500000", "123456 789012", "999999 1", "1 999999", "42 42", "987654 321"]}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "testcase": ["1 1 1", "10 5 3", "50 25 12", "100 50 30", "200 150 100", "300 250 200", "400 300 250", "450 400 300", "500 450 400", "500 500 500"]}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2.10^18) --- the power in which you need to raise number 5.", "testcase": ["2", "3", "4", "5", "10", "15", "100", "1000", "1000000000", "2000000000000000000"]}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "testcase": ["1 1 100", "50 50 1000", "100 100 10000", "1 100 5000", "100 1 5000", "25 75 2500", "10 20 500", "99 99 9999", "15 85 3000", "60 40 4000"]}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["4 0", "6 2", "10 4", "8 6", "12 8", "100 96", "1000 992", "10000 9984", "100000 99840", "1000000 999424"]}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "testcase": ["Hello.World", "abc123.def456", "Test.Case.1", "ThisIsATestCase", "12345.67890", "a.b.c.d.e", "Programming.101", "ABC.xyz.123", "Test....Test", "abcdefghijklmnopqrstuvwxyz.1234567890"]}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "testcase": ["0 0 0 0 0 0", "1 2 3 4 5 6", "1000 1000 1000 1000 1000 1000", "500 500 500 500 500 500", "123 456 789 321 654 987", "0 1000 0 1000 0 1000", "777 888 999 111 222 333", "10 20 30 40 50 60", "444 555 666 777 888 999", "100 200 300 400 500 600"]}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <=10^9) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "testcase": ["1 2 3", "-5 0 2", "1000000000 999999999 -1", "0 0 0", "-1000000000 1000000000 5", "42 42 1", "-999999999 -999999998 2", "123456789 987654321 100", "-500000000 500000000 1000", "777777777 -777777777 -1000"]}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "testcase": ["1 2 3 4 5", "10 20 30 40 50", "1 1 1 1 1", "100 99 98 97 96", "55 44 33 22 11", "7 14 21 28 35", "100 100 100 100 100", "1 100 50 25 75", "33 33 33 33 33", "12 23 34 45 56"]}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <=10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "1000000000", "1000000000000", "1000000000000000"]}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "testcase": ["1", "42", "999", "1000000", "123456789", "987654321", "10000000000000000000", "999999999999999999999999", "123456789123456789123456789", "987654321987654321987654321987654321"]}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "testcase": ["1", "10", "100", "1000", "10000", "100000", "1000000", "10000000", "100000000", "1000000000"]}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "testcase": ["1", "2.1 2", "3.1 2.1 3", "4.1 2.2 3.3 4", "5.1 2.2 3.2 4.3 5", "6.1 2.2 3.3 4.4 5.5 6", "7.1 2.2 3.3 4.4 5.5 6.6 7", "8.1 2.2 3.3 4.4 5.5 6.6 7.7 8", "9.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9", "10.1 2.2 3.3 4.4 5.5 6.6 7.7 8.8 9.9 10"]}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "testcase": ["4\n1 2 3 0", "1\n2", "7\n1 3 2 0 2 1 3", "3\n0 1 2", "5\n3 3 1 2 0", "2\n1 1", "6\n2 2 1 3 0 1", "8\n3 2 1 0 2 3 1 2", "10\n1 2 3 1 2 3 0 1 2 3", "9\n0 0 1 2 3 2 1 0 3"]}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "testcase": ["0 0 0 0", "1 2 3 4", "1000000000 1000000000 1000000000 1000000000", "5 7 2 9", "123456789 987654321 567891234 432109876", "0 1000000000 0 1000000000", "42 42 42 42", "999999999 888888888 777777777 666666666", "1 1 1 1", "100000 200000 300000 400000"]}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <=10^7, 1 <= x, y <=10^9) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "testcase": ["1 1 1", "10 5 7", "100 15 20", "1000 999 999", "10000 5000 6000", "100000 99999 99999", "1000000 500000 600000", "5000000 1000000000 1000000000", "9999999 999999999 999999999", "10000000 1000000000 1000000000"]}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <=10^9, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <=10^9). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "testcase": ["4 5 10 0 3.0 1 2.0 2 3.1 3 5.2 1 4.1 2 3", "5 6 15 1 4.0 1 3.0 2 4.1 3 2.2 3 5.3 1 4.0 4 2", "3 3 8 0 2.0 1 1.1 2 3.2 1 2", "6 8 20 2 5.0 1 4.1 2 3.2 3 5.3 4 2.0 5 1.1 3 4.2 4 5", "4 4 12 1 3.0 1 2.0 2 3.1 2 0.2 3 4", "7 10 25 0 6.0 1 3.0 2 4.1 3 5.2 4 6.3 5 2.0 6 1.1 2 5.2 3 6.3 4 5", "5 7 18 2 4.0 1 3.0 2 4.1 3 2.2 3 0.3 1 4.0 4 2.1 2 3", "3 2 6 0 2.0 1 3.1 2 2", "8 12 30 1 7.0 1 4.1 2 5.2 3 6.3 4 7.0 5 2.1 6 3.2 7 4.3 2 6.0 3 7.1 4 5", "4 6 14 0 3.0 1 2.0 2 3.1 3 2.2 1 3.1 2 0.2 3 1"]}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <=10^9) --- the number which Vasily has and the number he wants to have.", "testcase": ["1 2", "5 10", "100 200", "1000 2000", "9999 10000", "123456 789012", "1 1000000000", "500000000 999999999", "42 420", "777777 888888"]}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <=10^9, 1 <= di <= 5.10^6), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "testcase": ["1\n1 1", "2\n100 2\n200 3", "3\n1000 1\n2000 2\n3000 3", "4\n5000 4\n6000 3\n7000 2\n8000 1", "5\n10000 5\n20000 4\n30000 3\n40000 2\n50000 1", "3\n999999999 5000000\n888888888 4000000\n777777777 3000000", "2\n123456789 1234567\n987654321 2345678", "4\n1 1\n2 2\n3 3\n4 4", "3\n500000000 2500000\n400000000 1500000\n300000000 1000000", "5\n1 5\n10 4\n100 3\n1000 2\n10000 1"]}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "testcase": ["A", "Z", "ABC", "HELLO", "PROGRAMMING", "ABCDEFGHIJKLMNOPQRSTUVWXYZ", "CONTEST", "CODEFORCES", "AAAAAAAAAABBBBBBBBBB", "ZZZZZZZZZZYYYYYYYYYXXXXXXXXXX"]}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "testcase": ["2", "1000000000", "2000000000", "123456789", "987654321", "500000000", "42", "1234567", "9999999", "1000"]}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <=10^9).", "testcase": ["0", "1", "999999999", "500000000", "123456789", "987654321", "42", "1000000", "777777777", "100"]}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "testcase": ["1.1.1", "5.3.2", "10.10.10", "999.888.777", "123.456.789", "1000.1000.1000", "500.500.500", "42.17.23", "777.555.333", "100.200.300"]}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <=10^6.", "testcase": ["2 2", "1000000 1000000", "5 7", "100 200", "999999 999999", "456789 234567", "1000 1000", "42 42", "123456 654321", "777777 888888"]}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "testcase": ["5\n2 4 1 3 5", "1\n1000000", "10\n5 2 8 1 9 3 7 4 6 0", "3\n0 0 0", "7\n1000000 999999 888888 777777 666666 555555 444444", "4\n42 17 23 8", "8\n100 200 300 400 500 600 700 800", "2\n500000 500001", "6\n123456 234567 345678 456789 567890 678901", "9\n1 10 100 1000 10000 100000 1000000 100 10"]}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <=10^9, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "testcase": ["5 7 3", "1 1 1", "10 15 4", "8 10 8", "3 5 2", "100 200 50", "9 9 5", "4 8 1", "7 12 6", "2 4 2"]}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "testcase": ["3\n2 3 4", "4\n1 2 3 4", "5\n5 5 5 5 5", "6\n10 20 30 40 50 60", "7\n100 200 300 400 500 600 700", "8\n1 1 1 1 1 1 1 1", "9\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111", "10\n1 2 3 4 5 6 7 8 9 10", "4\n1000000000 1000000000 1000000000 1000000000", "5\n123456789 987654321 555555555 111111111 999999999"]}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "testcase": ["1", "12", "123", "1234", "12345", "123456", "1234567", "12345678", "123456789", "1234567890"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "1 10", "5 7", "3 5", "2 4", "8 9", "6 8", "4 6", "7 10", "9 9"]}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "testcase": ["2 1", "100000 20", "5 3", "10 5", "1000 15", "50000 10", "75000 18", "25 7", "500 12", "15000 8"]}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "testcase": ["a", "hello", "abcdefg", "xyz123", "test", "programming", "UPPERCASE", "123456", "mix3dCas3", "abcdefghijklmno"]}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "2", "10", "50", "100", "1000", "10000", "50000", "99999", "100000"]}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <=10^9).", "testcase": ["2 3", "5 10", "100 200", "1000 2000", "10000 20000", "123456 987654", "1000000 2000000", "500000000 999999999", "2 1000000000", "999999998 999999999"]}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "5", "10", "42", "99999", "100000", "77777", "12345", "50000", "9876"]}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <=10^9, min(A, B) <= 12).", "testcase": ["1 2", "12 1000000000", "5 8", "1000000000 7", "3 999999999", "11 100000", "4 87654321", "9 500000000", "2 123456789", "8 999888777"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["1 1 1 1 1", "10 5 3 2 4", "100 20 15 10 8", "500 100 200 50 30", "1000 500 300 100 150", "50 25 30 15 20", "200 150 100 45 60", "750 400 350 75 80", "300 250 200 90 95", "150 80 70 25 35"]}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <=10^6 --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <=10^9).", "testcase": ["5\n2 4 6 8 10", "3\n1000000000 999999999 998999999", "1\n42", "6\n7 12 0 9 3 1", "4\n1000 2000 3000 4000", "2\n0 0", "8\n1 2 3 4 5 6 7 8", "7\n999999999 888888888 777777777 666666666 555555555 444444444 333333333", "10\n1 2 3 4 5 6 7 8 9 10", "9\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000"]}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <=10^9, 0 <= k <= n).", "testcase": ["1 0", "1 1", "10 5", "100 50", "1000 500", "10000 5000", "100000 50000", "1000000 500000", "100000000 50000000", "1000000000 500000000"]}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <=10^9, 1 <= k <=10^4) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "testcase": ["10 15 3 2", "100 200 40 3", "1000 2000 500 4", "50 100 20 5", "500 1000 250 6", "20 30 10 3", "300 600 150 4", "75 150 25 2", "800 1600 400 5", "45 90 15 3"]}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <=10^5, 1 <= S <=10^5), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <=10^5, 1 <= ai <=10^5, 1 <= bi <=10^5), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "testcase": ["2 5\n1 2 3\n2 4 1", "3 10\n2 5 3\n4 2 1\n1 3 4", "1 7\n3 6 6", "4 15\n2 3 4\n1 5 2\n3 1 6\n2 4 3", "2 20\n5 7 8\n4 3 9", "5 50\n3 4 5\n2 6 7\n4 2 8\n1 9 3\n5 1 4", "3 30\n6 8 9\n4 7 5\n2 3 6", "1 100\n10 15 20", "4 25\n3 5 7\n2 8 4\n4 6 9\n1 3 5", "2 40\n8 12 15\n7 9 11"]}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <=10^6.", "testcase": ["1 2", "5 1000", "999999 1000000", "1 1000000", "54321 12345", "100000 1", "777777 123456", "500000 499999", "234567 876543", "999999 1"]}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <=10^5).", "testcase": ["1", "5", "10", "100", "1000", "10000", "50000", "75000", "99999", "100000"]}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2.10^5) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2.10^5) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "testcase": ["1\n0", "3\n1 2 3", "5\n0 1 0 1 0", "4\n5 5 5 5", "6\n1 3 5 7 9 11", "2\n200000 199999", "7\n0 1 2 1 0 2 1", "4\n100 200 300 400", "8\n1 1 1 2 2 2 3 3", "5\n150000 160000 170000 180000 190000"]}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "testcase": ["3\n1\n2\n3", "5\n1\n1\n2\n2\n3", "1\n2", "4\n3\n3\n3\n3", "2\n1\n1", "6\n2\n1\n3\n2\n1\n2", "7\n1\n2\n3\n1\n2\n3\n1", "8\n1\n1\n1\n2\n2\n2\n3\n3", "10\n1\n2\n3\n1\n2\n3\n1\n2\n3\n1", "9\n2\n2\n2\n1\n1\n1\n3\n3\n3"]}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "testcase": ["5\n1\n2\n3\n4\n5", "3\n7\n8\n9", "1\n100", "4\n15\n25\n35\n45", "2\n50\n60", "6\n10\n20\n30\n40\n50\n60", "7\n1\n2\n3\n4\n5\n6\n7", "3\n99\n98\n97", "8\n11\n22\n33\n44\n55\n66\n77\n88", "4\n100\n75\n50\n25"]}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "testcase": ["1", "2", "5", "10", "25", "50", "75", "87", "99", "100"]}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "1000000000000000000 1999", "42 17", "987654321 1234", "123456789 2000", "1 1000", "9876543210 500", "555555555 1500", "999999999999 750", "7777777 1750"]}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "testcase": ["1\n0 0 5", "2\n1 1 3\n-2 -2 4", "3\n0 0 1\n5 5 2\n-3 4 3", "1\n-5 7 10", "2\n3 -4 6\n-1 2 7", "3\n1 1 2\n-1 -1 2\n0 0 3", "1\n10 10 8", "2\n4 -3 5\n-6 8 4", "3\n2 2 1\n-2 -2 1\n0 0 1", "2\n7 -8 9\n-9 6 10"]}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "10 5", "100 10", "1000 100", "999999999999999999 1999", "123456789012345678 1500", "987654321098765432 2000", "555555555555555555 1234", "777777777777777777 1888", "333333333333333333 567"]}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "testcase": ["1\n100", "3\n0 50 100", "5\n10 20 30 40 50", "4\n600 0 300 450", "2\n500 500", "7\n100 200 300 0 0 400 500", "6\n55 66 77 88 99 100", "8\n1 2 3 0 4 5 6 7", "10\n10 20 30 40 50 60 70 80 90 100", "9\n0 0 0 0 0 0 0 0 1"]}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "testcase": ["0 0 0", "1 2 3", "10 10 5", "100 100 100", "50 30 20", "0 100 50", "100 0 25", "15 15 0", "77 88 99", "33 44 55"]}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <=10^12), the number of vertices in the graph.", "testcase": ["2", "10", "100", "1000", "10000", "100000", "1000000", "100000000", "1000000000", "1000000000000"]}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "testcase": ["1 1", "999999999 1000000000", "1000000000 1", "1 1000000000", "42 73", "123456789 987654321", "555555555 444444444", "1000000000 1000000000", "123 456", "987654321 123456789"]}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "testcase": ["1", "2", "10", "100", "1000", "10000", "100000", "1000000", "100000000", "1000000000"]}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "testcase": ["5 3\n2 4 1 5 3", "4 2\n1 2 3 4", "7 5\n4 2 6 1 3 7 5", "3 1\n2 1 3", "6 4\n5 3 1 4 2 6", "2 2\n1 2", "8 6\n7 3 5 1 4 2 6 8", "1 1\n1", "10 7\n5 2 8 1 4 6 3 9 7 10", "9 4\n3 6 1 4 8 2 5 7 9"]}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "testcase": ["ROYGBV", "VBGYOR", "RRYOBV", "GBVORY", "VROGBY", "YOBVRG", "BVRYOG", "OGBVRY", "RYBVOG", "VBYORG"]}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "testcase": ["1 2", "4 4", "2 6", "5 3", "6 1", "3 3", "2 4", "1 6", "5 5", "4 2"]}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <=10^6.", "testcase": ["2.1.2", "3.2.3.1", "4.5.3.2.1", "5.1.2.3.4.5", "3.1000000.500000.250000", "6.4.5.2.1.3.6", "4.999999.888888.777777.666666", "5.10.20.30.40.50", "7.1.2.3.4.5.6.7", "3.500.400.300"]}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "testcase": ["abc.def", "abc.xyz.pqr", "hello.world", "this.is.a.test", "one.two.three.four", "programming.contest", "codeforces.div2", "atcoder.beginner", "leetcode.easy", "hackerrank.medium"]}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "testcase": ["5\n1 2 3 4 5", "3\n10 20 30", "7\n1 3 5 7 9 11 13", "4\n100 200 300 400", "6\n2 4 6 8 10 12", "2\n1000 2000", "8\n5 10 15 20 25 30 35 40", "1\n42", "10\n1 2 3 4 5 6 7 8 9 10", "9\n11 22 33 44 55 66 77 88 99"]}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "testcase": ["5\n1 2 3 4 5", "3\n10 20 30", "7\n1 3 5 7 9 11 13", "4\n100 200 300 400", "6\n2 4 6 8 10 12", "2\n1000 2000", "8\n1 2 3 4 5 6 7 8", "1\n42", "10\n1 2 3 4 5 6 7 8 9 10", "9\n10 20 30 40 50 60 70 80 90"]}
{"name": "p02271 Exhaustive Search", "description": "Input\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "testcase": ["5.1 2 3 4 5.3.2 4 1", "3.10 20 30.2.15 25", "4.7 8 9 10.1.8", "6.1 3 5 7 9 11.4.2 4 6 8", "2.100 200.3.150 175 125", "7.1 2 3 4 5 6 7.2.4 6", "4.10 20 30 40.5.15 25 35 45 55", "3.5 10 15.1.10", "8.2 4 6 8 10 12 14 16.3.6 10 14", "5.1 3 5 7 9.4.2 4 6 8"]}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "testcase": ["3 10.1 2 2.2 3 1.3 2 1", "4 15.1 3 2.2 4 1.3 5 2.4 2 3", "2 8.1 5 3.2 2 2", "5 20.1 2 1.2 3 2.3 4 3.4 2 1.5 3 2", "3 12.1 4 2.2 2 3.3 5 1", "4 18.1 3 3.2 4 2.3 2 1.4 5 2", "2 6.1 2 1.2 3 2", "5 25.1 5 2.2 3 1.3 4 3.4 2 2.5 3 1", "3 14.1 3 2.2 4 1.3 2 3", "4 16.1 2 3.2 3 2.3 4 1.4 5 2"]}
{"name": "p02390 Watch", "description": "Input\n\nAn integer $S$ is given in a line.", "testcase": ["1", "-5", "0", "100", "-999", "1000000", "-1000000", "42", "7", "123456"]}
{"name": "p02417 Counting Characters", "description": "Input\n\nA sentence in English is given in several lines.", "testcase": ["The quick brown fox jumps over the lazy dog.", "Hello world, how are you doing today?", "I love programming and solving complex problems.", "She sells seashells by the seashore.", "The sun rises in the east and sets in the west.", "Life is beautiful when you appreciate small things.", "Learning new skills can be challenging but rewarding.", "The rain in Spain stays mainly in the plain.", "A journey of a thousand miles begins with a single step.", "Time flies like an arrow, fruit flies like a banana."]}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["1", "42", "100", "999", "5", "77", "123", "888", "444", "777"]}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "1", "2", "3", "4", "5", "6", "7", "8", "9"]}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "testcase": ["3 2\n1 2 3", "5 3\n5 4 3 2 1", "4 1\n2 4 6 8", "6 4\n1 3 5 7 9 11", "2 1\n10 20", "7 5\n7 6 5 4 3 2 1", "4 3\n15 10 5 0", "5 2\n2 4 6 8 10", "3 1\n100 200 300", "6 3\n1 2 3 4 5 6"]}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10", "100", "1000", "10000", "100000", "500000", "750000", "900000", "1000000"]}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "testcase": ["2 3.1 2 3.4 5 6.1 2 3.2 4 6.3 5 7", "1 2.5 6 7.8 9 1.2 3 4", "3 1.1 2 3.4 5 6.7 8 9.2 3 4", "2 2.1 3 5.6 7 9.1 4 7.2 5 8", "4 3.1 2 3.4 5 6.7 8 9.2 3 4.5 6 7.8 9 1.1 2 3.2 4 5", "1 1.5 6 7.3 4 5", "3 2.1 2 3.4 5 6.7 8 9.1 2 3.2 3 4", "2 4.5 6 7.8 9 1.2 3 4.3 5 6.4 7 8.5 8 9", "1 3.7 8 9.1 2 3.2 4 5.3 5 6", "4 2.1 2 3.4 5 6.7 8 9.2 3 4.1 2 3.2 4 5"]}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "testcase": ["2\n3 5", "1\n10 20", "5\n7 9", "3\n15 25", "4\n12 16", "6\n8 14", "8\n30 40", "7\n22 28", "9\n18 24", "10\n35 45"]}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "testcase": ["1 2 3", "10 20 5", "100 200 7", "5 10 4", "15 25 6", "50 75 8", "3 6 2", "30 40 9", "8 16 5", "25 35 4"]}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN K", "testcase": ["1 1", "10 5", "100 50", "1000 500", "5 3", "20 15", "50 25", "200 100", "15 7", "3 2"]}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "testcase": ["3 2\n1 2 3", "5 3\n2 4 6 8 10", "4 1\n5 5 5 5", "2 4\n7 3", "6 2\n1 3 5 7 9 11", "1 1\n10", "7 5\n2 4 1 8 3 6 9", "3 3\n4 4 4", "4 2\n1 3 2 4", "5 4\n6 2 8 4 10"]}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["1", "42", "100", "999", "500", "777", "123", "888", "444", "666"]}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nC", "testcase": ["C", "C", "C", "C", "C", "C", "C", "C", "C", "C"]}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nK X", "testcase": ["1 5", "2 10", "3 15", "4 20", "5 25", "6 30", "7 35", "8 40", "9 45", "10 50"]}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "10 20", "100 200", "5 7", "42 73", "999 888", "15 30", "3 9", "250 500", "67 89"]}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "testcase": ["abc\n2", "atcoder\n3", "xyz\n1", "hello\n4", "programming\n5", "test\n2", "abcdefg\n3", "contest\n4", "python\n3", "algorithm\n5"]}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "testcase": ["3 2\n1 2 3", "5 3\n5 4 3 2 1", "4 1\n2 2 2 2", "6 4\n1 3 5 7 9 11", "2 1\n10 20", "7 5\n7 6 5 4 3 2 1", "3 3\n100 200 300", "4 2\n5 5 5 5", "8 6\n1 2 3 4 5 6 7 8", "5 4\n10 8 6 4 2"]}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "testcase": ["3.1 2.4.2 5.8.3 1.2", "4.5 7.2.8 3.1.4 6.9.2 1.5", "2.1 1.2.3 4.5", "5.2 3.4.6 7.8.1 2.3.4 5.6.7 8.9", "1.0 0", "6.1 2.3 4.5 6.7 8.9 10.11 12", "3.2 2.4 4.6 6", "4.1 1.2 2.3 3.4 4", "2.5 5.6 6", "5.1 2.3 4.5 6.7 8.9 10"]}
{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "testcase": ["3 2\n1 2\n2 3\n1 5\n2 7", "4 3\n1 2\n2 3\n3 4\n1 6\n2 8\n3 9", "2 1\n1 2\n1 4", "5 4\n1 2\n2 3\n3 4\n4 5\n1 7\n2 8\n3 9\n4 10", "3 3\n1 2\n2 3\n1 4\n2 5\n3 6", "4 2\n1 2\n2 3\n3 4\n1 5\n2 6", "2 2\n1 2\n1 3\n2 4", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6\n1 7\n2 8\n3 9\n4 10\n5 11", "3 1\n1 2\n2 3\n1 4", "4 4\n1 2\n2 3\n3 4\n1 5\n2 6\n3 7\n4 8"]}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "testcase": ["3\n1 2 3", "5\n4 8 2 1 5", "4\n10 20 30 40", "6\n7 3 9 2 5 1", "2\n100 200", "7\n15 25 35 45 55 65 75", "4\n9 8 7 6", "5\n11 22 33 44 55", "3\n500 250 750", "6\n17 28 39 41 52 63"]}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "testcase": ["3\n1\n2\n3", "5\n10\n20\n30\n40\n50", "1\n100", "4\n5\n4\n3\n2", "2\n7\n8", "6\n1\n2\n3\n4\n5\n6", "3\n15\n25\n35", "4\n100\n200\n300\n400", "2\n1000\n2000", "5\n1\n3\n5\n7\n9"]}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "testcase": ["3 2\n1 2\n2 3", "4 3\n1 2\n2 3\n3 4", "5 4\n1 3\n2 4\n3 5\n4 1", "2 1\n1 2", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "4 2\n1 3\n2 4", "3 3\n1 2\n2 3\n3 1", "5 3\n1 2\n3 4\n4 5", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "4 4\n1 2\n2 3\n3 4\n4 1"]}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "testcase": ["2 3\n1 2\n4 5 6", "4 2\n10 20 30 40\n50 60", "1 1\n5\n7", "3 4\n1 2 3\n4 5 6 7", "5 3\n1 2 3 4 5\n6 7 8", "2 2\n100 200\n300 400", "4 4\n1 3 5 7\n2 4 6 8", "3 3\n10 20 30\n40 50 60", "6 2\n1 2 3 4 5 6\n7 8", "2 5\n9 8\n7 6 5 4 3"]}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "testcase": ["5 3\n1\n2\n3", "10 5\n4\n2\n7\n1\n9", "7 2\n3\n6", "15 4\n8\n3\n12\n5", "20 6\n10\n7\n15\n2\n9\n4", "3 1\n2", "12 3\n6\n11\n4", "8 4\n5\n2\n7\n3", "25 7\n13\n8\n20\n4\n16\n9\n2", "6 2\n4\n1"]}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "testcase": ["3 2\n1 2 3", "5 3\n4 7 2 9 1", "4 1\n5 5 5 5", "6 4\n10 20 30 40 50 60", "2 2\n100 200", "7 5\n1 3 5 7 9 11 13", "4 3\n15 25 35 45", "8 6\n2 4 6 8 10 12 14 16", "3 1\n1000 2000 3000", "5 4\n11 22 33 44 55"]}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "testcase": ["1.2.3.4.5", "10.20.30.40.50", "2.4.6.8.10", "5.10.15.20.25", "100.200.300.400.500", "7.14.21.28.35", "3.6.9.12.15", "50.100.150.200.250", "25.50.75.100.125", "1.3.5.7.9"]}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "testcase": ["1 2 3", "10 20 30", "5 7 9", "100 200 300", "15 25 35", "42 56 78", "8 16 24", "91 92 93", "67 89 12", "444 555 666"]}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 2", "10 20", "100 200", "5 7", "15 25", "3 9", "42 67", "88 99", "123 456", "777 888"]}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "testcase": ["3 2\n1 2", "5 3\n4 2 1", "4 4\n1 2 3 4", "6 2\n5 3", "2 1\n1", "7 5\n3 1 4 2 6", "8 3\n7 5 2", "4 3\n2 3 1", "5 4\n3 2 4 1", "3 3\n2 1 3"]}
{"name": "p03168 Educational DP Contest - Coins", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "testcase": ["3\n1 2 3", "5\n5 4 3 2 1", "1\n42", "4\n10 20 30 40", "2\n7 8", "6\n1 3 5 7 9 11", "4\n100 200 300 400", "3\n15 25 35", "7\n1 2 3 4 5 6 7", "2\n99 100"]}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "10 20", "100 200", "5 7", "42 13", "999 888", "123 456", "777 333", "55 66", "8 9"]}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "testcase": ["3 2.1 1.2 2", "5 3.1 2.2 3.4 1", "4 4.1 1.2 2.3 3.4 4", "6 2.1 3.2 5", "2 1.1 1", "7 5.1 2.2 3.3 4.4 5.5 6", "4 3.1 2.2 3.3 4", "5 2.1 1.2 2", "3 3.1 1.2 2.3 3", "8 4.1 2.2 3.3 4.4 5"]}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nR", "testcase": ["R", "R", "R", "R", "R", "R", "R", "R", "R", "R"]}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "testcase": ["abc\ndef", "hello\nworld", "test\ncase", "atcoder\ncodechef", "aaa\nbbb", "xyz\nabc", "programming\ncontest", "string\ntext", "input\noutput", "sample\ndata"]}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["3\n1 2 3", "5\n5 4 3 2 1", "1\n100", "4\n10 20 30 40", "2\n7 8", "6\n1 3 5 7 9 11", "7\n2 4 6 8 10 12 14", "8\n1 1 2 2 3 3 4 4", "9\n9 8 7 6 5 4 3 2 1", "10\n1 2 3 4 5 6 7 8 9 10"]}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nD N", "testcase": ["5 3", "10 7", "2 1", "8 4", "15 10", "1 1", "20 12", "6 5", "12 8", "3 2"]}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "5", "10", "20", "50", "100", "500", "1000", "9999", "10000"]}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 2", "10 20", "100 200", "5 7", "15 25", "3 9", "42 99", "777 888", "123 456", "50 75"]}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "testcase": ["3\nabcde", "5\nhello", "4\ntest", "6\nstring", "2\nxy", "7\nprogram", "4\ncode", "8\ncomputer", "5\nworld", "3\ncat"]}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "testcase": ["3\n1\n2\n3", "5\n10\n20\n30\n40\n50", "4\n5\n7\n2\n9", "2\n100\n200", "6\n1\n3\n5\n7\n9\n11", "1\n42", "7\n11\n22\n33\n44\n55\n66\n77", "4\n15\n25\n35\n45", "3\n99\n88\n77", "5\n1\n10\n100\n1000\n10000"]}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nS", "testcase": ["abc", "xyz", "hello", "test", "world", "python", "coding", "string", "input", "output"]}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "testcase": ["3 10\n5\n3\n8", "5 20\n4\n7\n12\n3\n9", "2 5\n2\n3", "4 15\n6\n8\n4\n7", "6 30\n10\n5\n8\n12\n15\n7", "1 7\n7", "7 25\n3\n6\n9\n12\n4\n8\n5", "3 12\n4\n5\n6", "4 18\n8\n3\n5\n9", "5 22\n7\n4\n6\n11\n8"]}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "testcase": ["3\n1 2 3", "5\n5 4 3 2 1", "1\n7", "4\n10 20 30 40", "6\n1 1 1 1 1 1", "2\n42 17", "7\n1 3 5 7 9 11 13", "4\n100 200 300 400", "8\n8 7 6 5 4 3 2 1", "5\n11 22 33 44 55"]}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "testcase": ["3\n1\n2\n3", "5\n10\n20\n30\n40\n50", "1\n100", "4\n5\n15\n25\n35", "2\n7\n14", "6\n2\n4\n6\n8\n10\n12", "7\n1\n3\n5\n7\n9\n11\n13", "3\n100\n200\n300", "4\n1\n10\n100\n1000", "2\n42\n84"]}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "testcase": ["3 10\n2 3\n1 4\n5 2", "4 15\n3 4\n2 5\n6 2\n1 3", "2 8\n4 2\n3 3", "5 20\n1 5\n2 4\n3 3\n4 2\n5 1", "1 5\n2 3", "6 25\n4 3\n2 5\n1 4\n3 2\n5 3\n2 2", "3 12\n3 3\n3 3\n3 3", "4 18\n5 2\n4 3\n3 4\n2 5", "2 10\n5 1\n5 1", "5 30\n6 4\n4 5\n3 6\n5 3\n2 4"]}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\ns", "testcase": ["abc", "hello", "12345", "test", "xyz123", "atcoder", "programming", "contest", "abcdefg", "codeforces"]}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "testcase": ["1 1 1", "2 3 4", "5 7 2", "10 15 8", "3 6 1", "8 12 4", "4 9 3", "6 8 5", "9 11 7", "7 10 6"]}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Input\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "testcase": ["3\ncat\ndog\nrat", "5\nhello\nworld\ncode\ntest\ncase", "2\nab\ncd", "4\nmath\nbook\npen\ndesk", "1\ntest", "6\none\ntwo\nthree\nfour\nfive\nsix", "3\nred\nblue\ngreen", "4\napple\nbanana\norange\ngrape", "2\nyes\nno", "5\nfirst\nsecond\nthird\nfourth\nfifth"]}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Input\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "testcase": ["3\n1 2\n3 4\n5 6", "5\n10 20\n30 40\n50 60\n70 80\n90 100", "2\n7 8\n9 10", "4\n15 25\n35 45\n55 65\n75 85", "1\n100 200", "6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "3\n11 22\n33 44\n55 66", "4\n8 16\n24 32\n40 48\n56 64", "2\n500 1000\n1500 2000", "5\n5 10\n15 20\n25 30\n35 40\n45 50"]}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Input\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["hello", "world", "programming", "abcdefghijklmnop", "atcoder", "codeforces", "xyz", "contest", "string", "algorithm"]}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "testcase": ["3 10 20\n5\n15\n7", "4 1 100\n50\n25\n75\n30", "2 5 15\n10\n8", "5 1 50\n20\n30\n40\n10\n25", "1 1 10\n5", "6 2 30\n15\n25\n10\n5\n20\n8", "3 5 25\n12\n18\n22", "4 10 40\n35\n15\n25\n30", "2 3 12\n6\n9", "5 8 35\n20\n15\n25\n30\n10"]}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Input\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "testcase": ["abcde.2", "hello.3", "world.1", "python.4", "coding.2", "atcoder.3", "contest.1", "program.2", "string.4", "testing.3"]}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Input\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["abc", "xyz", "hello", "world", "test", "string", "sample", "input", "coding", "atcoder"]}

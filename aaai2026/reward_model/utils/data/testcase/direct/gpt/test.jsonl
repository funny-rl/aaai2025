{"name": "1008_A. Romaji", "description": "Input\n\nThe first line of the input contains the string s consisting of |s| (1<= |s|<= 100) lowercase Latin letters.", "testcase": ["a", "hello", "programming", "testcase", "jsonformat", "specification", "example", "knowledge", "letters", "abcdefghij"]}
{"name": "1016_A. Death Note", "description": "Input\n\nThe first line of the input contains two integers n, m (1 <= n <= 2 * 10^5, 1 <= m <= 10^9) --- the number of days you will write names in the notebook and the number of names which can be written on each page of the notebook.\n\nThe second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i means the number of names you will write in the notebook during the i-th day.", "testcase": ["2 100\n50 50", "3 1000\n300 300 400", "5 500\n100 200 100 50 50", "1 1000000\n999999", "4 250\n10 20 30 190", "6 300000\n100000 100000 50000 25000 20000 10000", "8 12345\n123 456 789 1011 1213 1415 1617 1819", "2 1000000000\n999999999 1", "7 777777\n111111 222222 333333 44444 55555 66666 77777", "3 333\n333 333 333"]}
{"name": "101_C. Vectors", "description": "Input\n\nThe first line contains integers x1 и y1 --- the coordinates of the vector A ( - 108 <= x1, y1 <=10^8). The second and the third line contain in the similar manner vectors B and C (their coordinates are integers; their absolute value does not exceed 108).", "testcase": ["0 0\n0 0\n0 0", "-100000000 100000000\n-99999999 99999999\n-99999998 99999998", "50000000 -50000000\n40000000 -40000000\n30000000 -30000000", "12345678 87654321\n12345678 87654321\n12345678 87654321", "-1 -1\n-2 -2\n-3 -3", "21474836 21474836\n21474836 21474836\n21474836 21474836", "0 -100000000\n100000000 0\n-100000000 100000000", "435345 65342\n546456 -456456\n324324 -654646", "-9999999 9999999\n8888888 -7777777\n6666666 -5555555", "1 0\n0 1\n-1 -1"]}
{"name": "1028_A. Find Square", "description": "Input\n\nThe first line contains two integers n and m (1 <= n, m <= 115) --- the number of rows and the number of columns in the table.\n\nThe i-th of the next n lines contains a string of m characters s_{i1} s_{i2} ... s_{im} (s_{ij} is 'W' for white cells and 'B' for black cells), describing the i-th row of the table.", "testcase": ["3 4\nWBWB\nBWBW\nWBWB", "1 1\nW", "2 2\nBB\nBB", "5 5\nWBWBW\nBWBWB\nWBWBW\nBWBWB\nWBWBW", "10 10\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB\nBWBWBWBWBW\nWBWBWBWBWB", "7 8\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB\nBWBWBWBW\nWBWBWBWB", "4 3\nBBB\nWWW\nBBB\nWWW", "6 7\nWBWBWBW\nBWBWBWB\nWBWBWBW\nBWBWBWB\nWBWBWBW\nBWBWBWB", "8 6\nWBWBWB\nBWBWBW\nWBWBWB\nBWBWBW\nWBWBWB\nBWBWBW\nWBWBWB\nBWBWBW", "9 9\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB\nWWWBBBWWW\nBBBWWWBBB"]}
{"name": "1036_B. Diagonal Walking v.2", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 10^4) --- the number of queries.\n\nThen q lines follow. The i-th of these q lines contains three integers n_i, m_i and k_i (1 <= n_i, m_i, k_i <= 10^{18}) --- x-coordinate of the destination point of the query, y-coordinate of the destination point of the query and the number of moves in the query, correspondingly.", "testcase": ["1\n1000000000000000000 1000000000000000000 1000000000000000000", "2\n123456789123456789 987654321987654321 111111111111111111\n222222222222222222 333333333333333333 444444444444444444", "3\n500000000000000000 600000000000000000 700000000000000000\n800000000000000000 900000000000000000 1000000000000000000\n1000000000000000000 2000000000000000000 3000000000000000000", "4\n1 1 1\n2 2 2\n3 3 3\n4 4 4", "5\n10 10 10\n20 20 20\n30 30 30\n40 40 40\n50 50 50", "6\n100000000000 100000000000 100000000000\n200000000000 200000000000 200000000000\n300000000000 300000000000 300000000000\n400000000000 400000000000 400000000000\n500000000000 500000000000 500000000000\n600000000000 600000000000 600000000000", "7\n123456789 987654321 192837465\n234567890 123456789 987654321\n345678901 234567890 123456789\n456789012 345678901 234567890\n567890123 456789012 345678901\n678901234 567890123 456789012\n789012345 678901234 567890123", "8\n111111111 222222222 333333333\n444444444 555555555 666666666\n777777777 888888888 999999999\n1111111110 2222222220 3333333330\n4444444440 5555555550 6666666660\n7777777770 8888888880 9999999990\n11111111100 22222222200 33333333300\n44444444400 55555555500 66666666600", "9\n4289045398102143 1021398102351239 190238102301239\n3210951820395021 3850198203918203 1204918203981209\n2094832109843201 1820394810293840 1203948209384012\n2039849283409823 3928401982012381 3019283049123094\n2039481098238103 1283094810293810 2039481029380192\n1049381029310293 1209839102938931 2304981020398123\n1028391023983091 1290839128391293 2394812039812398\n2093810239812093 1983019820394810 2390481230981230\n1029830198230123 2918391283012931 1982039102938102", "10\n987654987654987654 123456123456123456 234567234567234567\n456789456789456789 567890567890567890 678901678901678901\n789012789012789012 890123890123890123 901234901234901234\n123456712345671234567 234567823456782345678 345678934567893456789\n456789045678904567890 567890156789015678901 678901267890126789012\n789012378901237890123 890123489012348901234 901234590123459012345\n123456712346571234567 234567823457682345678 345678934568793456789\n456789045678904567890 567890156789015678901 678901267890126789012\n789012378901237890123 890123489012348901234 901234590123459012345\n987654321987654321 123456789123456789 987654321987654321"]}
{"name": "1037_A. Packets", "description": "Input\n\nThe only line contains a single integer n (1 <= n <= 10^9) --- the number of coins you have.", "testcase": ["1", "10", "123456789", "999999999", "500000000", "234567890", "42", "987654321", "100000000", "76543210"]}
{"name": "1038_D. Slime", "description": "Input\n\nThe first line of the input contains an integer n (1 <= n <= 500 000) denoting the number of slimes.\n\nThe next line contains n integers a_i (-10^9 <= a_i <= 10^9), where a_i is the value of i-th slime.", "testcase": ["1\n0", "2\n-1000000000 1000000000", "3\n-3 0 2", "4\n100 200 300 400", "5\n-1000000 -999999 -999998 -999997 -999996", "10\n0 0 0 0 0 0 0 0 0 0", "6\n123456789 -123456789 987654321 -987654321 123456 -123456", "3\n-500000 -400000 300000", "7\n-1 -2 -3 -4 -5 -6 -7", "8\n10000000 -10000000 20000000 -20000000 15000000 -15000000 1234567 -1234567"]}
{"name": "103_C. Russian Roulette", "description": "Input\n\nThe first line contains three integers n, k and p (1 <= n <=10^18, 0 <= k <= n, 1 <= p <= 1000) --- the number of slots in the cylinder, the number of bullets and the number of queries. Then follow p lines; they are the queries. Each line contains one integer xi (1 <= xi <= n) the number of slot to describe.\n\nPlease do not use the %lld specificator to read or write 64-bit numbers in С++. It is preferred to use cin, cout streams or the %I64d specificator.", "testcase": ["1 0 1\n1", "10 5 2\n3\n7", "100 20 3\n15\n60\n80", "1000 500 5\n200\n400\n600\n800\n1000", "10000 1000 4\n1000\n2000\n3000\n4000", "100000 50000 6\n15000\n30000\n45000\n60000\n75000\n90000", "1000000 999999 3\n1\n500000\n999999", "1000000000 1 2\n500000000\n1000000000", "123456789101112 222222 10\n111111\n222222\n333333\n444444\n555555\n666666\n777777\n888888\n999999\n101010", "987654321987654 876543 5\n765431\n876542\n987653\n123456\n234567"]}
{"name": "1047_D. Little C Loves 3 II", "description": "Input\n\nA single line contains two integers n and m (1 <= n,m <= 10^9) --- the number of rows and the number of columns of the chessboard.", "testcase": ["1 1", "2 2", "1000000000 1000000000", "999999999 1", "123456789 987654321", "10 50", "500 500", "999 888", "300000000 700000000", "1 999999999"]}
{"name": "1054_A. Elevator or Stairs?", "description": "Input\n\nThe only line contains six integers x, y, z, t_1, t_2, t_3 (1 <= x, y, z, t_1, t_2, t_3 <= 1000) --- the floor Masha is at, the floor Masha wants to get to, the floor the elevator is located on, the time it takes Masha to pass between two floors by stairs, the time it takes the elevator to pass between two floors and the time it takes for the elevator to close or open the doors.\n\nIt is guaranteed that x != y.", "testcase": ["3 10 5 2 1 3", "1 1000 500 10 2 8", "100 200 150 3 5 4", "250 750 600 7 2 6", "999 1 500 4 3 3", "500 400 300 5 1 2", "42 24 13 8 2 5", "1000 1 100 10 10 10", "2 999 333 1 1 1", "123 321 213 6 5 7"]}
{"name": "1060_A. Phone Numbers", "description": "Input\n\nThe first line contains an integer n --- the number of cards with digits that you have (1 <= n <= 100).\n\nThe second line contains a string of n digits (characters \"0\", \"1\", ..., \"9\") s_1, s_2, ..., s_n. The string will not contain any other characters, such as leading or trailing spaces.", "testcase": [""]}
{"name": "1062_D. Fun with Integers", "description": "Input\n\nA single line contains a single integer n (2 <= n <= 100 000) --- the given integer described above.", "testcase": ["2", "100", "99999", "50000", "35432", "26354", "87654", "11111", "22222", "33333"]}
{"name": "1068_B. LCM", "description": "Input\n\nThe only line contains one integer --- b (1 <= b <= 10^{10}).", "testcase": ["1", "2", "100", "9999999999", "9876543210", "123456789", "4294967296", "1048576", "99999999", "100000000"]}
{"name": "1076_B. Divisor Subtraction", "description": "Input\n\nThe only line contains a single integer n (2 <= n <= 10^{10}).", "testcase": ["2", "9999999999", "5000000000", "1000000000", "123456789", "9876543210", "3141592653", "2718281828", "7062029977", "42"]}
{"name": "1084_C. The Fair Nut and String", "description": "Input\n\nThe first line contains the string s (1 <= |s| <= 10^5) consisting of lowercase Latin letters.", "testcase": ["abcdefghijklmnopqrstuvwxyz", "a", "hello", "thisismylongteststringtestingthelength", "anotherlargetestcasetocheckboundaries", "x", "maximummaxlengthstringtesttoreachthecharlimitsoftheproblemandcheckingift", "minimal", "justanotherstringofletters", "short"]}
{"name": "1091_C. New Year and the Sphere Transmission", "description": "Input\n\nThe only line consists of a single integer n (2 <= n <= 10^9) --- the number of people playing with the ball.", "testcase": ["2", "3", "17", "100", "99999999", "150", "987654321", "999999999", "500000000", "42"]}
{"name": "1095_A. Repeating Cipher", "description": "Input\n\nThe first line contains integer n (1 <= n <= 55) --- the length of the encrypted string. The second line of the input contains t --- the result of encryption of some string s. It contains only lowercase Latin letters. The length of t is exactly n.\n\nIt is guaranteed that the answer to the test exists.", "testcase": ["5\nabcde", "10\nhelloworld", "3\nxyz", "8\npassword", "1\na", "15\nflyingelephant", "4\ntest", "6\nqwerty", "55\npneumonoultramicroscopicsilicovolcanoconiosis", "14\nbrilliantidea"]}
{"name": "1101_A. Minimum Integer", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 500) --- the number of queries.\n\nThen q lines follow, each containing a query given in the format l_i r_i d_i (1 <= l_i <= r_i <= 10^9, 1 <= d_i <= 10^9). l_i, r_i and d_i are integers.", "testcase": ["1\n1 1000000000 500000000", "3\n100 200 50\n300 400 25\n500 600 75", "2\n1 10 1\n20 30 10", "4\n123456789 987654321 123456\n234567890 345678901 234567\n345678901 456789012 345678\n456789012 567890123 456789", "5\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5", "2\n500000000 1000000000 250000000\n200000000 800000000 300000000", "1\n100000 999999999 9999999", "3\n215435 98765432 741852\n11111111 22222222 333333\n444444 5555555 666666", "4\n10 20 5\n20 30 5\n30 40 5\n40 50 5", "3\n1 50 1\n50 100 1\n100 150 1"]}
{"name": "1102_A. Integer Sequence Dividing", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2 * 10^9).", "testcase": ["1", "2", "100", "999999999", "123456789", "2000000000", "987654321", "1500000000", "42", "172839506"]}
{"name": "110_B. Lucky String", "description": "Input\n\nThe single line contains a positive integer n (1 <= n <=10^5) --- the length of the sought string.", "testcase": ["1", "99999", "12345", "54321", "10000", "23456", "98765", "11111", "22222", "100"]}
{"name": "110_C. Lucky Sum of Digits", "description": "Input\n\nThe single line contains an integer n (1 <= n <=10^6 --- the sum of digits of the required lucky number.", "testcase": ["1", "4", "7", "10", "13", "16", "19", "22", "25", "28"]}
{"name": "1110_A. Parity", "description": "Input\n\nThe first line contains two integers b and k (2<= b<= 100, 1<= k<= 10^5) --- the base of the number and the number of digits.\n\nThe second line contains k integers a_1, a_2, ..., a_k (0<= a_i < b) --- the digits of n.\n\nThe representation of n contains no unnecessary leading zero. That is, a_1 can be equal to 0 only if k = 1.", "testcase": ["2 3\n1 0 1", "10 1\n7", "5 5\n1 2 3 4 0", "100 4\n99 1 45 67", "15 6\n14 8 7 1 1 2", "3 10\n2 1 0 2 1 0 2 1 0 2", "7 4\n6 3 2 5", "8 9\n7 4 2 1 0 6 5 7 3", "20 3\n17 4 3", "23 5\n22 7 6 0 1"]}
{"name": "1114_A. Got Any Grapes?", "description": "Input\n\nThe first line contains three integers x, y and z (1 <= x, y, z <= 10^5) --- the number of grapes Andrew, Dmitry and Michal want to eat.\n\nThe second line contains three integers a, b, c (1 <= a, b, c <= 10^5) --- the number of green, purple and black grapes in the box.", "testcase": ["3 4 5\n6 7 8", "2 2 2\n3 3 3", "10000 20000 30000\n15000 25000 35000", "99999 88888 77777\n100000 90000 80000", "50000 50000 50000\n50000 50000 50000", "1 1 1\n100000 100000 100000", "43534 23423 64565\n84567 32454 23423", "87654 54321 12345\n98765 67890 54321", "22222 33333 44444\n55555 66666 77777", "10203 30405 50607\n20708 40902 60301"]}
{"name": "111_D. Petya and Coloring", "description": "Input\n\nThe first line contains space-separated integers n, m and k (1 <= n, m <= 1000, 1 <= k <=10^6 --- the board's vertical and horizontal sizes and the number of colors respectively.", "testcase": ["1 1 1", "2 3 100", "5 5 1000000", "10 10 500", "1000 1000 1000000", "250 750 987654", "100 200 300000", "333 444 123456", "999 888 777666", "500 600 1000"]}
{"name": "1129_A2. Toy Train", "description": "Input\n\nThe first line contains two space-separated integers n and m (2 <= n <= 5 000; 1 <= m <= 20 000) --- the number of stations and the number of candies, respectively.\n\nThe i-th of the following m lines contains two space-separated integers a_i and b_i (1 <= a_i, b_i <= n; a_i != b_i) --- the station that initially contains candy i and the destination station of the candy, respectively.", "testcase": ["3 5\n1 2\n2 3\n3 1\n1 3\n2 1", "2 1\n2 1", "4 2\n1 3\n4 2", "5 4\n1 2\n2 3\n3 4\n4 5", "5 8\n1 2\n2 3\n3 4\n4 5\n5 1\n1 3\n2 4\n3 5", "6 10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 1\n1 4\n2 5\n3 6\n4 1", "7 14\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 1\n7 2", "10 20\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n10 1\n1 5\n2 6\n3 7\n4 8\n5 9\n6 10\n7 1\n8 2\n9 3\n10 4", "8 16\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 1\n1 3\n2 4\n3 5\n4 6\n5 7\n6 8\n7 1\n8 2", "5 6\n5 1\n4 5\n3 4\n2 3\n1 2\n5 3"]}
{"name": "1131_E. String Multiplication", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 100 000) --- the number of strings, wroted by Denis.\n\nNext n lines contain non-empty strings p_1, p_2, ..., p_n, consisting of lowercase english letters.\n\nIt's guaranteed, that the total length of the strings p_i is at most 100 000, and that's the beauty of the resulting product is at most 10^9.", "testcase": ["2\n['abc', 'def']", "3\n['hello', 'world', 'test']", "5\n['quick', 'brown', 'fox', 'jumps', 'lazy']", "4\n['algorithm', 'data', 'structure', 'graph']", "6\n['one', 'two', 'three', 'four', 'five', 'six']", "7\n['rainbow', 'orange', 'purple', 'green', 'blue', 'indigo', 'violet']", "8\n['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday', 'week']", "10\n['january', 'february', 'march', 'april', 'may', 'june', 'july', 'august', 'september', 'october']", "9\n['apple', 'banana', 'cherry', 'date', 'elderberry', 'fig', 'grape', 'honeydew', 'kiwi']", "2\n['aa', 'bb']"]}
{"name": "1140_A. Detective Book", "description": "Input\n\nThe first line contains single integer n (1 <= n <= 10^4) --- the number of pages in the book.\n\nThe second line contains n integers a_1, a_2, ..., a_n (i <= a_i <= n), where a_i is the number of page which contains the explanation of the mystery on page i.", "testcase": ["1\n1", "5\n2 3 4 5 1", "2\n1 2", "10\n10 1 2 3 4 5 6 7 8 9", "4\n4 3 2 1", "6\n2 4 6 1 3 5", "3\n2 3 1", "7\n1 3 5 7 2 4 6", "8\n5 2 8 6 1 3 7 4", "9\n2 1 4 3 6 5 8 7 9"]}
{"name": "1141_A. Game 23", "description": "Input\n\nThe only line of the input contains two integers n and m (1 <= n <= m <= 5*10^8).", "testcase": ["1 5", "1234567 12345678", "25000000 50000000", "350 400", "98765432 123456789", "1 500000000", "500000 500000", "40000000 40000001", "100000 200000", "2345678 23456789"]}
{"name": "1144_B. Parity Alternated Deletions", "description": "Input\n\nThe first line of the input contains one integer n (1 <= n <= 2000) --- the number of elements of a.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6), where a_i is the i-th element of a.", "testcase": ["1\n0", "2\n1000000 0", "3\n500000 500000 500000", "4\n0 1 2 3", "5\n999999 999998 999997 999996 999995", "6\n1 2 3 4 5 6", "10\n0 10 20 30 40 50 60 70 80 90", "7\n100 200 300 400 500 600 700", "8\n888888 777777 666666 555555 444444 333333 222222 111111", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "1146_B. Hate \"A\"", "description": "Input\n\nThe first line of input contains a string t (1 <= |t| <= 10^5) consisting of lowercase English letters.", "testcase": ["a", "xy", "pqrst", "abcdefgh", "kotlinpython", "java", "abcdefghijklmnopqrst", "testcasegeneration", "maximuminputsizeisonehundredthousandcharacters", "finaltestcaseexample"]}
{"name": "1159_A. A pile of stones", "description": "Input\n\nThe first line contains one positive integer n --- the number of operations, that have been made by Vasya (1 <= n <= 100).\n\nThe next line contains the string s, consisting of n symbols, equal to \"-\" (without quotes) or \"+\" (without quotes). If Vasya took the stone on i-th operation, s_i is equal to \"-\" (without quotes), if added, s_i is equal to \"+\" (without quotes).", "testcase": ["1\n+", "2\n+-", "3\n+++", "4\n-+-+", "5\n++--+", "6\n+-+-+-", "7\n++--+-+", "8\n+-++-+-+", "9\n-+-+-+-++", "10\n++---+--++"]}
{"name": "1163_C1. Power Transmission (Easy Edition)", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 50) --- the number of electric poles.\n\nEach of the following n lines contains two integers x_i, y_i (-10^4 <= x_i, y_i <= 10^4) --- the coordinates of the poles.\n\nIt is guaranteed that all of these n points are distinct.", "testcase": ["3\n0 1\n1 2\n2 3", "2\n-100 100\n100 -100", "4\n1000 2000\n3000 4000\n-5000 30\n400 -320", "5\n123 456\n789 1011\n-1213 1415\n1617 1819\n-2021 2223", "6\n-9999 5000\n8888 -2121\n333 -4444\n5555 -666\n7777 8888\n999 -1000", "7\n102 103\n204 205\n306 307\n408 409\n510 511\n612 613\n714 715", "8\n-11 12\n13 -14\n15 16\n-17 18\n19 -20\n21 22\n-23 24\n25 -26", "9\n0 0\n100 200\n-300 400\n500 -600\n700 800\n-900 1000\n-1100 1200\n1300 -1400\n1500 1600", "10\n326 789\n-987 654\n123 -456\n-789 321\n456 -123\n-654 987\n789 -321\n123 456\n-321 789\n987 -654", "5\n111 222\n-333 444\n555 -666\n777 888\n-999 1001"]}
{"name": "1166_A. Silent Classroom", "description": "Input\n\nThe first line contains a single integer n (1<= n <= 100) --- the number of students.\n\nAfter this n lines follow.\n\nThe i-th line contains the name of the i-th student.\n\nIt is guaranteed each name is a string of lowercase English letters of length at most 20. Note that multiple students may share the same name.", "testcase": ["3\nalice\nbob\ncarol", "1\nalice", "2\nbob\nbob", "4\neve\nalice\nmike\njohn", "5\nanna\nanna\nlucas\nlucas\nanna", "6\njake\nliam\nnoah\nemma\nolivia\nava", "7\nmia\nmason\njacob\nwilliam\nethan\njames\nalexander", "2\nsophia\nsophia", "8\ncharlotte\namelia\nisabella\nmila\nharper\nluna\nlayla\nsophie", "10\nzoe\nriley\navery\naubrey\ncamila\nhannah\nscarlett\nnora\nstella\nemily"]}
{"name": "117_B. Very Interesting Game", "description": "Input\n\nThe first line contains three integers a, b, mod (0 <= a, b <=10^9, 1 <= mod <=10^7).", "testcase": ["0 0 10000000", "1000000000 1000000000 10000000", "500000000 400000000 1", "999999999 0 123456", "350000000 750000000 98765", "123456789 987654321 10000", "0 999999999 999999", "111111111 222222222 333333", "876543210 123456789 99999", "555555 444444 8888"]}
{"name": "1180_A. Alex and a Rhombus", "description": "Input\n\nThe first and only input line contains integer n (1 <= n <= 100) --- order of a rhombus whose numbers of cells should be computed.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "1181_A. Chunga-Changa", "description": "Input\n\nThe first line contains three integers x, y and z (0 <= x, y <= 10^{18}, 1 <= z <= 10^{18}) --- the number of chizhics Sasha has, the number of chizhics Masha has and the price of a coconut.", "testcase": ["0 0 1", "10 5 2", "999999999999999999 999999999999999999 1000000000000000000", "123456789012345678 987654321098765432 999999999999999", "0 10 1000000000000000000", "500000000000000000 500000000000000000 3", "350000000000000000 700000000000000000 800000000000000000", "1 1 1", "1000000000000000000 1000000000000000000 1000000000000000000", "123 456 789"]}
{"name": "1185_A. Ropewalkers", "description": "Input\n\nThe only line of the input contains four integers a, b, c, d (1 <= a, b, c, d <= 10^9). It is possible that any two (or all three) ropewalkers are in the same position at the beginning of the performance.", "testcase": ["1 2 3 4", "1000000000 1000000000 1000000000 1000000000", "234 234 234 987", "999 1000 1000 1001", "500000000 500000000 500000000 999999999", "1 1 1 1", "856 856 342 475", "123456789 987654321 123456789 987654310", "10203040 40506070 50607080 10203040", "999999999 888888888 777777777 666666666"]}
{"name": "1189_D1. Add on a Tree", "description": "Input\n\nThe first line contains a single integer n (2 <= n <= 10^5) --- the number of nodes.\n\nEach of the next n-1 lines contains two integers u and v (1 <= u, v <= n, u != v), meaning that there is an edge between nodes u and v. It is guaranteed that these edges form a tree.", "testcase": ["3\n1 2\n2 3", "4\n1 2\n1 3\n1 4", "5\n1 2\n2 3\n3 4\n4 5", "6\n1 2\n2 3\n3 4\n4 5\n5 6", "7\n1 2\n2 3\n3 4\n1 5\n5 6\n6 7", "8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9\n1 2\n3 1\n1 4\n4 5\n5 6\n6 7\n1 8\n8 9", "10\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10", "5\n1 2\n1 3\n1 4\n1 5", "7\n1 2\n2 3\n2 4\n4 5\n4 6\n4 7"]}
{"name": "118_D. Caesar's Legions", "description": "Input\n\nThe only line contains four space-separated integers n1, n2, k1, k2 (1 <= n1, n2 <= 100, 1 <= k1, k2 <= 10) which represent how many footmen and horsemen there are and the largest acceptable number of footmen and horsemen standing in succession, correspondingly.", "testcase": ["1 1 1 1", "10 20 5 3", "4 7 2 10", "15 5 10 2", "8 12 4 4", "30 25 10 10", "100 50 7 5", "42 42 3 6", "60 75 8 2", "3 99 1 10"]}
{"name": "1191_A. Tokitsukaze and Enhancement", "description": "Input\n\nThe only line contains a single integer x (30 <= x <= 100) --- the value Tokitsukaze's HP currently.", "testcase": ["30", "45", "55", "60", "70", "75", "80", "90", "95", "100"]}
{"name": "119_A. Epic Game", "description": "Input\n\nThe only string contains space-separated integers a, b and n (1 <= a, b, n <= 100) --- the fixed numbers Simon and Antisimon have received correspondingly and the initial number of stones in the pile.", "testcase": ["3 5 10", "1 2 50", "6 4 22", "10 1 100", "9 8 37", "5 3 67", "2 7 18", "8 9 45", "3 3 99", "1 1 34"]}
{"name": "1203_E. Boxers", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 150000) --- the number of boxers. The next line contains n integers a_1, a_2, ..., a_n, where a_i (1 <= a_i <= 150000) is the weight of the i-th boxer.", "testcase": ["3\n1 2 3", "5\n5 5 5 5 5", "2\n12345 12345", "4\n101 102 103 104", "6\n150000 149999 150000 149998 150000 149997", "1\n1", "8\n148 149 150 151 152 153 154 155", "10\n10000 20000 30000 40000 50000 60000 70000 80000 90000 100000", "7\n135790 12345 67890 54321 24680 98765 111213", "9\n1500 2500 3500 4500 5500 6500 7500 8500 9500"]}
{"name": "1204_D1. Kirk and a Binary String (easy version)", "description": "Input\n\nThe first line contains a binary string of length not more than 2\\: 000.", "testcase": ["11010101011101010101", "00000000000000000000", "11111111111111111111", "10101010101010101010", "01010101010101010101", "10000000000000000001", "11100011100010111000", "00011100011100011100", "10110011001100110110", "11001100110011001100"]}
{"name": "1208_A. XORinacci", "description": "Input\n\nThe input contains one or more independent test cases.\n\nThe first line of input contains a single integer T (1 <= T <= 10^3), the number of test cases.\n\nEach of the T following lines contains three space-separated integers a, b, and n (0 <= a, b, n <= 10^9) respectively.", "testcase": ["1\n0 0 0", "2\n10 20 30\n40 50 60", "3\n100 200 300\n400 500 600\n700 800 900", "1\n123456789 987654321 123456789", "2\n0 1 1000000000\n1 0 999999999", "1\n999999999 999999999 999999999", "3\n345 678 901\n234 567 890\n123 456 789", "4\n111 222 333\n444 555 666\n777 888 999\n100000000 200000000 300000000", "5\n0 0 1\n1 1 0\n2 2 2\n3 3 3\n4 4 4", "1\n100000000 100000000 100000000"]}
{"name": "1213_B. Bad Prices", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10000) --- the number of sets of input data in the test. Input data sets must be processed independently, one after another.\n\nEach input data set consists of two lines. The first line contains an integer n (1 <= n <= 150000) --- the number of days. The second line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^6), where a_i is the price on the i-th day.\n\nIt is guaranteed that the sum of n over all data sets in the test does not exceed 150000.", "testcase": ["1\n5\n1 2 3 4 5", "3\n2\n1000000 1000000\n3\n100 200 300\n5\n999999 123456 234567 345678 456789", "2\n10\n10 20 30 40 50 60 70 80 90 100\n4\n1234 5678 91011 121314", "1\n7\n100000 200000 300000 400000 500000 600000 700000", "2\n3\n45000 45001 45002\n8\n210000 220000 230000 240000 250000 260000 270000 280000", "1\n6\n100000 900000 800000 700000 600000 500000", "4\n1\n500000\n1\n400000\n1\n300000\n1\n200000", "2\n4\n123456 789012 345678 901234\n2\n100000 200000", "3\n3\n1024 2048 4096\n5\n1 1 1 1 1\n2\n999999 1000000", "1\n10\n95000 96000 97000 98000 99000 100000 101000 102000 103000 104000"]}
{"name": "1217_C. The Number Of Good Substrings", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of queries.\n\nThe only line of each query contains string s (1 <= |s| <= 2 * 10^5), consisting of only digits 0 and 1.\n\nIt is guaranteed that sum_{i=1}^{t} |s_i| <= 2 * 10^5.", "testcase": ["1\n0", "2\n01\n10", "3\n110\n001\n111", "4\n1010\n1001\n0110\n1000", "5\n11111\n00000\n10101\n01010\n11100", "6\n100100\n001001\n110011\n111000\n000111\n101010", "7\n1000000\n0101010\n0011001\n0000001\n1111111\n1101101\n1010101", "8\n10001000\n0110110\n01010101\n11110000\n00001111\n10101010\n10000001\n010101010", "9\n111111111\n000000000\n101010101\n010101010\n111000111\n000111000\n100001000\n011110111\n001100110", "10\n0110110\n1001001\n1011011\n1100110\n1000000\n0111000\n0101010\n0011100\n1111110\n0000001"]}
{"name": "121_C. Lucky Permutation", "description": "Input\n\nThe first line contains two integers n and k (1 <= n, k <=10^9) --- the number of elements in the permutation and the lexicographical number of the permutation.", "testcase": ["1 1", "5 1", "8 42", "10 999999", "123456789 987654321", "1000000000 1", "1000000000 999999999", "9 362880", "999999 123456", "100 100000"]}
{"name": "1220_C. Substring Game in the Lesson", "description": "Input\n\nThe first line of the input contains a single string s (1 <= |s| <= 5 * 10^5) consisting of lowercase English letters.", "testcase": ["a", "bc", "defg", "hijkl", "mnopqr", "stuvwxy", "abcdefgh", "ijklmnopqrst", "uvwxyzabcdefg", "hijklmnopqrstuvwxy"]}
{"name": "1223_A. CME", "description": "Input\n\nThe first line contains one integer q (1 <= q <= 100) --- the number of queries.\n\nThe only line of each query contains one integer n (2 <= n <= 10^9) --- the number of matches.", "testcase": ["3\n2\n100000000\n500", "2\n234567890\n987654321", "1\n999999999", "4\n123456789\n234567890\n345678901\n456789012", "5\n100000002\n200000003\n300000004\n400000005\n500000006", "10\n2\n4\n6\n8\n10\n12\n14\n16\n18\n20", "6\n99999994\n88888885\n77777776\n66666667\n55555558\n44444449", "8\n100\n1000\n10000\n100000\n1000000\n10000000\n100000000\n999999999", "3\n429496729\n214748364\n107374182", "7\n2\n4\n8\n16\n32\n64\n128"]}
{"name": "1227_A. Math Problem", "description": "Input\n\nThe first line contains integer number t (1 <= t <= 100) --- the number of test cases in the input. Then t test cases follow.\n\nThe first line of each test case contains one integer n (1 <= n <= 10^{5}) --- the number of segments. The following n lines contain segment descriptions: the i-th of them contains two integers l_i,r_i (1 <= l_i <= r_i <= 10^{9}).\n\nThe sum of all values n over all the test cases in the input doesn't exceed 10^5.", "testcase": ["3\n2\n1 5\n6 10\n1\n1000000000 1000000000\n4\n1 2\n2 3\n3 4\n4 5", "1\n3\n10 20\n30 40\n50 60", "2\n5\n1 10\n2 9\n3 8\n4 7\n5 6\n2\n20 30\n15 25", "4\n1\n40 50\n1\n60 70\n1\n80 90\n1\n100 110", "1\n6\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6", "2\n2\n100 200\n300 400\n3\n500 600\n600 700\n700 800", "1\n10\n15 25\n25 35\n35 45\n45 55\n55 65\n65 75\n75 85\n85 95\n95 105\n105 115", "5\n1\n123 456\n1\n789 101112\n1\n131415 161718\n1\n192021 222324\n1\n252627 282930", "3\n7\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n1\n90 100\n3\n110 200\n210 300\n310 400", "4\n2\n111 222\n333 444\n2\n555 666\n777 888\n2\n999 101010\n102030 103040\n2\n104050 105060\n106070 107080"]}
{"name": "1230_A. Dawid and Bags of Candies", "description": "Input\n\nThe only line contains four integers a_1, a_2, a_3 and a_4 (1 <= a_i <= 100) --- the numbers of candies in each bag.", "testcase": ["1 1 1 1", "2 5 4 8", "99 99 99 99", "15 23 45 67", "88 14 63 27", "34 21 56 78", "42 42 42 42", "19 37 84 26", "73 8 47 59", "31 93 74 100"]}
{"name": "1230_B. Ania and Minimizing", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200 000, 0 <= k <= n) --- the number of digits in the decimal representation of S and the maximum allowed number of changed digits.\n\nThe second line contains the integer S. It's guaranteed that S has exactly n digits and doesn't contain any leading zeroes.", "testcase": ["2 1\n12", "3 2\n345", "4 0\n9876", "5 3\n12345", "1 0\n9", "6 2\n112233", "7 4\n7654321", "8 1\n87654321", "9 5\n123456789", "10 10\n1029384756"]}
{"name": "1239_A. Ivan the Fool and the Probability Theory", "description": "Input\n\nThe only line contains two integers n and m (1 <= n, m <= 100 000), the number of rows and the number of columns of the field.", "testcase": ["1 1", "2 100000", "100000 2", "12345 67890", "50000 50000", "99999 99999", "100000 100000", "54321 12345", "100 200", "200 100"]}
{"name": "1242_A. Tile Painting", "description": "Input\n\nThe first line of input contains a single integer n (1 <= n <= 10^{12}), the length of the path.", "testcase": ["1", "3", "999999999999", "1234567890", "987654321", "100000000000", "500000000000", "102030405060", "99999999999", "100000000001"]}
{"name": "1249_B1. Books Exchange (easy version)", "description": "Input\n\nThe first line of the input contains one integer q (1 <= q <= 200) --- the number of queries. Then q queries follow.\n\nThe first line of the query contains one integer n (1 <= n <= 200) --- the number of kids in the query. The second line of the query contains n integers p_1, p_2, ..., p_n (1 <= p_i <= n, all p_i are distinct, i.e. p is a permutation), where p_i is the kid which will get the book of the i-th kid.", "testcase": ["2\n4\n2 1 4 3\n5\n5 3 1 4 2", "1\n6\n6 4 2 5 3 1", "1\n7\n1 2 3 4 5 6 7", "3\n2\n2 1\n3\n1 3 2\n4\n4 1 2 3", "1\n10\n10 9 8 7 6 5 4 3 2 1", "1\n8\n3 5 6 1 7 8 2 4", "1\n15\n2 5 8 6 4 1 14 11 3 7 10 9 15 13 12", "2\n3\n3 1 2\n9\n9 1 2 3 4 5 6 7 8", "1\n12\n8 4 1 10 5 12 6 3 11 7 2 9", "1\n20\n4 2 5 9 1 16 8 12 7 14 17 10 3 13 18 19 6 20 11 15"]}
{"name": "124_C. Prime Permutation", "description": "Input\n\nThe only line contains the initial string s, consisting of small Latin letters (1 <= |s| <= 1000).", "testcase": ["abcde", "xyz", "teststring", "a", "pneumonoultramicroscopicsilicovolcanoconiosis", "hello", "abcdefghijklmnopqrstuvwxy", "singlecharacter", "mixedcasesarefun", "lasttestcase"]}
{"name": "1251_C. Minimize The Integer", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4) --- the number of test cases in the input.\n\nThe only line of each test case contains the integer a, its length n is between 1 and 3 * 10^5, inclusive.\n\nIt is guaranteed that the sum of all values n does not exceed 3 * 10^5.", "testcase": ["1\n123", "2\n56\n789", "3\n1\n234\n5678", "4\n91011\n1213\n141516\n171819", "2\n202122\n23242526", "1\n2728293031", "3\n3233\n34353637\n383940", "2\n4142434445\n4647484950", "4\n51\n525354\n5556575859\n606162636465", "1\n6667686970717273"]}
{"name": "1257_B. Magic Stick", "description": "Input\n\nThe first line contains single integer T (1 <= T <= 10^4) --- the number of test cases. Each test case consists of two lines.\n\nThe first line of each test case contains two integers x and y (1 <= x, y <= 10^9) --- the current number and the number that Petya wants to get.", "testcase": ["1\n3 1000000000", "1\n999999999 1000000000", "1\n500000000 999999999", "1\n100000000 123456789", "1\n250000000 750000000", "1\n10000000 900000000", "1\n9999999 888888888", "1\n12345678 876543210", "1\n987654321 1000000000", "1\n1 2"]}
{"name": "125_A. Measuring Lengths in Baden", "description": "Input\n\nThe only line contains an integer n (1 <= n <= 10000).", "testcase": ["1", "2345", "876", "10000", "4321", "5000", "7698", "9999", "100", "482"]}
{"name": "1267_B. Balls of Buma", "description": "Input\n\nThe only line contains a non-empty string of uppercase English letters of length at most 3 * 10^5. Each letter represents a ball with the corresponding color.", "testcase": ["A", "BCA", "ZZTOP", "QWERTYUIOPASDFGHJKLZXCVBNM", "ABCDEFGHIJKLMNOPQRSTUVWX", "YYXXZZAAABBBCCCDDDEEEFFF", "ABCDEFGHIJKLMNOPQRST", "ABCABCABCABCABCABCABCABCABCABC", "QWERQWERQWERQWERQWERQWERQWERQWERQWERQWER", "ZXCASDQWE"]}
{"name": "127_E. E-reader Display", "description": "Input\n\nThe first line contains number n (1 <= n <= 2000).\n\nNext n lines contain n characters each: the description of the picture that needs to be shown. \"0\" represents the white color and \"1\" represents the black color.", "testcase": ["2\n00\n01", "3\n010\n111\n001", "1\n1", "4\n0000\n0101\n0010\n0000", "5\n00100\n00100\n11111\n00100\n00100", "6\n000000\n011110\n010010\n010010\n011110\n000000", "7\n0000000\n0001000\n0001000\n0001000\n0001000\n0001000\n0000000", "8\n01111110\n01000010\n01000010\n01000010\n01000010\n01000010\n01000010\n01111110", "9\n0011100\n0100010\n1000001\n1000001\n1000001\n0100010\n0011100\n", "10\n0000000000\n0111111110\n0100000010\n0100000010\n0100000010\n0100000010\n0100000010\n0100000010\n0111111110\n0000000000"]}
{"name": "1288_A. Deadline", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 50) --- the number of test cases.\n\nThe next T lines contain test cases -- one per line. Each line contains two integers n and d (1 <= n <= 10^9, 1 <= d <= 10^9) --- the number of days before the deadline and the number of days the program runs.", "testcase": ["1\n3 2", "1\n10 5", "1\n1000000000 500000000", "1\n7 3", "1\n999999999 999999998", "1\n123456789 98765432", "1\n500000000 250000000", "1\n800000000 400000000", "1\n350000000 175000000", "1\n234567890 123456789"]}
{"name": "1294_B. Collecting Packages", "description": "Input\n\nThe first line of the input contains an integer t (1 <= t <= 100) --- the number of test cases. Then test cases follow.\n\nThe first line of a test case contains one integer n (1 <= n <= 1000) --- the number of packages.\n\nThe next n lines contain descriptions of packages. The i-th package is given as two integers x_i and y_i (0 <= x_i, y_i <= 1000) --- the x-coordinate of the package and the y-coordinate of the package.\n\nIt is guaranteed that there are no two packages at the same point. It is also guaranteed that the point (0, 0) doesn't contain a package.\n\nThe sum of all values n over test cases in the test doesn't exceed 1000.", "testcase": ["1\n5\n10 10\n20 20\n30 30\n40 40\n50 50", "2\n2\n5 5\n10 10\n3\n1 2\n3 4\n5 6", "1\n4\n0 1\n1 0\n2 2\n3 3", "3\n1\n100 100\n2\n200 200\n300 300\n3\n400 400\n500 500\n600 600", "1\n7\n0 5\n5 0\n2 2\n8 8\n3 4\n6 6\n7 7", "1\n8\n10 1\n20 2\n30 3\n40 4\n50 5\n60 6\n70 7\n80 8", "1\n10\n9 8\n7 6\n5 4\n3 2\n1 1\n0 2\n2 0\n4 5\n6 7\n8 9", "2\n3\n100 101\n101 100\n102 103\n4\n10 11\n11 10\n12 13\n13 12", "1\n6\n33 44\n55 66\n77 88\n99 111\n222 333\n444 555", "1\n9\n21 22\n23 24\n25 26\n24 27\n0 31\n31 30\n29 28\n35 38\n40 42"]}
{"name": "12_B. Correct Solution?", "description": "Input\n\nThe first line contains one integer n (0 <= n <=10^9) without leading zeroes. The second lines contains one integer m (0 <= m <=10^9) --- Bob's answer, possibly with leading zeroes.", "testcase": ["9\n000000009", "100000000\n001", "0\n0000000000", "500000000\n123456789", "999999999\n000098765", "23456789\n023456789", "10\n0000000010", "1\n0000000001", "8463728\n08463728", "1234\n00001234"]}
{"name": "1305_B. Kuroni and Simple Strings", "description": "Input\n\nThe only line of input contains a string s (1 <= |s| <= 1000) formed by characters '(' and ')', where |s| is the length of s.", "testcase": ["()", "(())", "))((", "(()())", "(()()(()))", "(((())))", ")()(()())(", "()()", "(()))(()", "((())())()"]}
{"name": "1311_C. Perform the Combo", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases.\n\nThen t test cases follow.\n\nThe first line of each test case contains two integers n and m (2 <= n <= 2 * 10^5, 1 <= m <= 2 * 10^5) --- the length of s and the number of tries correspondingly.\n\nThe second line of each test case contains the string s consisting of n lowercase Latin letters.\n\nThe third line of each test case contains m integers p_1, p_2, ..., p_m (1 <= p_i < n) --- the number of characters pressed right during the i-th try.\n\nIt is guaranteed that the sum of n and the sum of m both does not exceed 2 * 10^5 (sum n <= 2 * 10^5, sum m <= 2 * 10^5).\n\nIt is guaranteed that the answer for each letter does not exceed 2 * 10^9.", "testcase": ["1\n2 1\nab\n1", "3\n3 2\nabc\n1 2\n4 1\nabcd\n3\n5 3\nabcde\n1 2 4", "1\n5 1\nabcde\n4", "2\n6 2\nfedcba\n2 5\n7 3\nabcdefg\n1 3 6", "1\n8 3\nhgfedcba\n2 3 7", "4\n3 1\nxyz\n1\n4 2\nabcd\n1 3\n5 1\nqwert\n2\n6 3\nuvwxyz\n1 5 6", "1\n9 2\nabcdefghi\n3 7", "2\n4 1\nabab\n2\n10 1\naabbaabbab\n9", "1\n7 4\ncdefghi\n1 3 5 6", "1\n10 3\nzxcvbnmasd\n2 4 8"]}
{"name": "1324_D. Pair of Topics", "description": "Input\n\nThe first line of the input contains one integer n (2 <= n <= 2 * 10^5) --- the number of topics.\n\nThe second line of the input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), where a_i is the interestingness of the i-th topic for the teacher.\n\nThe third line of the input contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 10^9), where b_i is the interestingness of the i-th topic for the students.", "testcase": ["2\n1 10\n10 1", "3\n1000000000 1000000000 1000000000\n1 1 1", "5\n1 2 3 4 5\n5 4 3 2 1", "4\n999999999 999999999 999999999 999999999\n888888888 888888888 888888888 888888888", "6\n10 20 30 40 50 60\n60 50 40 30 20 10", "2\n345678910 987654321\n123456789 987654321", "7\n1 1 2 3 5 8 13\n21 34 55 89 144 233 377", "8\n2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647 2147483647\n1 2 3 4 5 6 7 8", "9\n9 8 7 6 5 4 3 2 1\n1 2 3 4 5 6 7 8 9", "10\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000 90000000 100000000\n100000000 90000000 80000000 70000000 60000000 50000000 40000000 30000000 20000000 10000000"]}
{"name": "1328_A. Divisibility Problem", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains two integers a and b (1 <= a, b <= 10^9).", "testcase": ["1 2", "12 345", "123456789 987654321", "1000000000 1", "2 2", "999999999 999999999", "100 200", "500 500", "234567890 123456789", "10 10"]}
{"name": "1351_C. Skier", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach set is given by one nonempty string of the characters 'S', 'N', 'W', 'E'. The length of the string does not exceed 10^5 characters.\n\nThe sum of the lengths of t given lines over all test cases in the input does not exceed 10^5.", "testcase": ["3\nS\nN\nW", "1\nE", "2\nNESS\nSW", "5\nS\nW\nE\nN\nS", "4\nNEWS\nSSSS\nEEEE\nWWWW", "6\nE\nE\nE\nE\nE\nE", "10\nN\nN\nN\nN\nN\nN\nN\nN\nN", "3\nSWNW\nWSEN\nENWS", "7\nSSSW\nWNEN\nESEW\nSWNE\nWE\nSN\nEN", "1\nSSSSSWWWWWNNNNNEEEE"]}
{"name": "1352_C. K-th Not Divisible by n", "description": "Input\n\nThe first line contains an integer t (1 <= t <= 1000) --- the number of test cases in the input. Next, t test cases are given, one per line.\n\nEach test case is two positive integers n (2 <= n <= 10^9) and k (1 <= k <= 10^9).", "testcase": ["1 100", "2 500", "3 999", "4 1500", "5 2000", "6 2500", "7 3000", "8 3500", "9 4000", "10 4500"]}
{"name": "1353_B. Two Arrays And Swaps", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 200) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains two integers n and k (1 <= n <= 30; 0 <= k <= n) --- the number of elements in a and b and the maximum number of moves you can do. The second line of the test case contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 30), where a_i is the i-th element of a. The third line of the test case contains n integers b_1, b_2, ..., b_n (1 <= b_i <= 30), where b_i is the i-th element of b.", "testcase": ["1\n10 5\n1 2 3 4 5 6 7 8 9 10\n10 9 8 7 6 5 4 3 2 1", "3\n4 1\n4 2 6 8\n5 9 3 1\n2 0\n10 20\n20 10\n5 2\n5 4 1 2 3\n8 1 7 6 5", "1\n6 3\n5 2 3 6 1 4\n10 11 12 13 14 15", "2\n8 0\n11 12 9 5 3 1 2 10\n2 4 6 7 8 13 14 16\n3 2\n15 4 5\n12 8 3", "1\n7 2\n4 5 6 7 8 9 10\n1 3 5 7 9 11 13", "1\n30 10\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30\n30 29 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1", "2\n5 4\n3 1 5 7 9\n2 6 4 8 10\n10 7\n10 9 8 7 6 1 2 3 4 5\n5 3 1 2 6 7 8 9 10 11", "1\n15 8\n9 12 6 3 17 14 10 8 2 15 5 7 13 11 4\n5 14 10 1 3 19 20 2 22 8 17 13 9 12 6", "3\n6 2\n4 8 15 16 23 42\n42 23 16 15 8 4\n3 1\n2 4 8\n16 15 23\n4 0\n1 1 2 2\n3 3 4 4", "1\n9 3\n5 7 12 6 4 8 11 13 2\n14 1 3 9 10 6 5 2 8"]}
{"name": "1353_D. Constructing the Array", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n100000", "2\n150000\n50000", "3\n70000\n80000\n50000", "4\n5000\n40000\n60000\n50000", "5\n12345\n23456\n34567\n45678\n56789", "6\n11111\n22222\n33333\n44444\n55555\n66666", "7\n10000\n20000\n30000\n40000\n50000\n60000\n70000", "8\n2500\n7500\n12500\n17500\n22500\n27500\n32500\n37500", "9\n20000\n18000\n16000\n14000\n12000\n10000\n8000\n6000\n4000", "10\n1000\n2000\n3000\n4000\n5000\n6000\n7000\n8000\n9000\n10000"]}
{"name": "1358_A. Park Lighting", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- the number of test cases in the input. Then t test cases follow.\n\nEach test case is a line containing two integers n, m (1 <= n, m <= 10^4) --- park sizes.", "testcase": ["1\n1 1", "2\n10 100\n20 200", "3\n30 300\n40 400\n50 500", "4\n100 1000\n200 2000\n300 3000\n400 4000", "5\n60 600\n70 700\n80 800\n90 900\n100 1000", "6\n110 1100\n120 1200\n130 1300\n140 1400\n150 1500\n160 1600", "7\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10\n11 11", "8\n150 150\n200 250\n300 350\n400 450\n500 550\n600 650\n700 750\n800 850", "9\n15 150\n25 250\n35 350\n45 450\n55 550\n65 650\n75 750\n85 850\n95 950", "10\n1000 1000\n2000 2000\n3000 3000\n4000 4000\n5000 5000\n6000 6000\n7000 7000\n8000 8000\n9000 9000\n10000 10000"]}
{"name": "1362_A. Johnny and Ancient Computer", "description": "Input\n\nThe input consists of multiple test cases. The first line contains an integer t (1 <= t <= 1000) --- the number of test cases. The following t lines contain a description of test cases.\n\nThe first and only line in each test case contains integers a and b (1 <= a, b <= 10^{18}) --- the initial and target value of the variable, respectively.", "testcase": ["1\n1000000000000000000 1000000000000000000", "1\n500 999999999999999999", "1\n123456789012345678 234567890123456789", "1\n100000000000000000 200000000000000000", "1\n246802468024680246 135791357913579135", "1\n1 10", "1\n999999999999999999 1000000000000000000", "1\n987654321098765432 123456789012345678", "1\n10000000000000000 999999999999999999", "1\n555555555555555555 777777777777777777"]}
{"name": "1366_A. Shovels and Swords", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe only line of each test case contains two integers a and b (0 <= a, b <= 10^9) --- the number of sticks and the number of diamonds, respectively.", "testcase": ["1\n500000000 500000000", "2\n0 0\n1000000000 1000000000", "3\n123456789 987654321\n111111111 111111111\n222222222 333333333", "4\n5 10\n15 20\n25 30\n35 40", "5\n345 678\n9012 3456\n78901 23456\n345678 901234\n567890 123456", "2\n0 999999999\n1000000000 0", "3\n444444444 555555555\n666666666 777777777\n888888888 999999999", "1\n123 456", "2\n234 567\n890 123", "4\n1234 5678\n9012 3456\n7890 1234\n5678 9012"]}
{"name": "136_B. Ternary Logic", "description": "Input\n\nThe first line contains two integers a and c (0 <= a, c <=10^9). Both numbers are written in decimal notation.", "testcase": ["0 0", "123456789 987654321", "10 10", "1 999999999", "999999999 1", "500000000 500000000", "9999999 88888888", "2147483647 2147483647", "0 10", "10 0"]}
{"name": "1371_D. Grid-00100", "description": "Input\n\nThe input consists of multiple test cases. The first line contains a single integer t (1 <= t <= 100) --- the number of test cases. Next t lines contain descriptions of test cases.\n\nFor each test case the only line contains two integers n, k (1 <= n <= 300, 0 <= k <= n^2).\n\nIt is guaranteed that the sum of n^2 for all test cases does not exceed 10^5.", "testcase": ["3 0", "10 50", "20 400", "5 10", "15 150", "25 600", "8 20", "30 350", "12 144", "18 200"]}
{"name": "1373_B. 01 Game", "description": "Input\n\nFirst line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nOnly line of each test case contains one string s (1 <= |s| <= 100), consisting of only characters 0 and 1.", "testcase": ["4", "001101", "111", "0", "1100100100100011001011100011", "3", "111000111000", "01", "1101101101101101", "2", "10101010101010101010101010101010", "0011001100110011", "5", "1", "00", "10101", "11111111", "01010101010101010101010101010101", "1", "1100110011001100110011001100110011001100110011001100110011001100", "7", "00110011", "1010101", "1100", "11111111111111111111111111111111111111111111111111", "00000000000000000000000000000000000000000000", "0101010101", "11100110011001100110011"]}
{"name": "1373_D. Maximum Sum on Even Positions", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe first line of the test case contains one integer n (1 <= n <= 2 * 10^5) --- the length of a. The second line of the test case contains n integers a_0, a_1, ..., a_{n-1} (1 <= a_i <= 10^9), where a_i is the i-th element of a.\n\nIt is guaranteed that the sum of n does not exceed 2 * 10^5 (sum n <= 2 * 10^5).", "testcase": ["1\n5\n4 2 7 1 3", "2\n3\n9 8 3\n4\n2 4 6 8", "3\n2\n1 1\n4\n5 5 5 5\n6\n12 15 9 8 11 13", "1\n8\n23 45 67 12 34 56 78 90", "2\n3\n2 2 2\n5\n1 3 5 7 9", "1\n7\n10 20 30 40 50 60 70", "3\n2\n1000000000 1000000000\n3\n300 600 900\n4\n123 456 789 1011", "1\n10\n27 53 7 18 1 44 36 52 92 85", "2\n1\n1\n4\n3 8 2 10", "1\n5\n100 101 102 103 104"]}
{"name": "1374_B. Multiply by 2, divide by 6", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow. \n\nThe only line of the test case contains one integer n (1 <= n <= 10^9).", "testcase": ["1", "2", "3", "100", "999999999", "123456789", "100000000", "234567890", "876543210", "10000000"]}
{"name": "1391_C. Cyclic Permutations ", "description": "Input\n\nThe first and only line contains a single integer n (3 <= n <= 10^6).", "testcase": ["3", "999999", "123456", "1000000", "98765", "4321", "9999", "500000", "745632", "888888"]}
{"name": "1393_A. Rainbow Dash, Fluttershy and Chess Coloring", "description": "Input\n\nThe first line contains a single integer T (1 <= T <= 100): the number of grids of the games. \n\nEach of the next T lines contains a single integer n (1 <= n <= 10^9): the size of the side of the grid of the game.", "testcase": ["1\n100", "2\n1\n1000000000", "3\n999\n500\n250", "4\n10\n20\n30\n40", "5\n87654321\n123456789\n987654321\n123\n4321", "10\n1\n1\n1\n1\n1\n1\n1\n1\n1\n1", "3\n222222222\n333333333\n444444444", "1\n9", "7\n54321\n12345\n67890\n24680\n13579\n86420\n100000", "2\n500000000\n500000000"]}
{"name": "139_D. Digits Permutations", "description": "Input\n\nThe first line contains a positive integer n --- the original number. The number of digits in this number does not exceed 105. The number is written without any leading zeroes.", "testcase": ["1234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999", "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000", "123", "847362514253687126354287120398471289347198237491827349871239487123984791283471239471298374912837491283", "2", "111111111111111111111111111111111111111111111111111111111111111111", "8495172958792183459872345897243589274893274892398479238749283749287498274897239823459287349879238497", "17346982374691827346918273649182736491827364918273649182736498273649821736498127364981273649821736498127364", "583719283741982374917234987192387492183749218374198237491823749182374918273491823749182374918237492183749128374912837491823749182374912837491827349182374928374981237491823749182374981273"]}
{"name": "1401_A. Distance and Axis", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 6000) --- the number of test cases.\n\nThe only line of each test case contains two integers n and k (0 <= n, k <= 10^6) --- the initial position of point A and desirable absolute difference.", "testcase": ["1\n500000 250000", "2\n400000 100000\n300000 150000", "3\n999999 0\n600000 300000\n123456 78901", "1\n234567 765432", "2\n1000000 500000\n500000 499999", "4\n12345 54321\n0 0\n100000 10000\n999999 99999", "1\n847362 163729", "3\n222222 333333\n444444 555555\n777777 888888", "5\n135791 246802\n111111 222222\n333333 111111\n666666 222222\n999999 333333", "1\n654321 123456"]}
{"name": "1409_B. Minimum Product", "description": "Input\n\nThe first line of the input contains one integer t (1 <= t <= 2 * 10^4) --- the number of test cases. Then t test cases follow.\n\nThe only line of the test case contains five integers a, b, x, y and n (1 <= a, b, x, y, n <= 10^9). Additional constraint on the input: a >= x and b >= y always holds.", "testcase": ["1\n10 20 5 10 5", "2\n100 200 50 100 75\n150 120 60 110 30", "3\n1000000000 1000000000 500000000 500000000 999999999\n999999999 888888888 444444444 333333333 888888888\n123456789 987654321 12345678 87654321 333333333", "1\n500000000 500000000 250000000 250000000 250000000", "1\n234567890 123456789 12345678 23456789 100000000", "4\n10 10 1 1 9\n20 20 2 2 18\n30 30 3 3 5\n40 40 4 4 10", "2\n123456789 987654321 111111111 222222222 333333333\n987654321 123456789 222222222 111111111 444444444", "1\n444444444 555555555 444444444 555555555 444444444", "1\n1000000000 999999999 1 1 999999998", "1\n1 1 1 1 0"]}
{"name": "1419_A. Digit Game", "description": "Input\n\nFirst line of input contains an integer t (1 <= t <= 100) --- the number of matches.\n\nThe first line of each match description contains an integer n (1 <= n <= 10^3) --- the number of digits of the generated number.\n\nThe second line of each match description contains an n-digit positive integer without leading zeros.", "testcase": ["1\n3\n123", "2\n1\n5\n2\n89", "1\n4\n1111", "3\n2\n12\n5\n12345\n3\n678", "1\n10\n1234567890", "2\n3\n987\n4\n4567", "1\n5\n54321", "1\n6\n112233", "2\n1\n3\n7\n7654321", "3\n3\n333\n2\n77\n8\n12345678"]}
{"name": "1420_A. Cubes Sorting", "description": "Input\n\nEach test contains multiple test cases.\n\nThe first line contains one positive integer t (1 <= t <= 1000), denoting the number of test cases. Description of the test cases follows.\n\nThe first line of each test case contains one positive integer n (2 <= n <= 5 * 10^4) --- number of cubes.\n\nThe second line contains n positive integers a_i (1 <= a_i <= 10^9) --- volumes of cubes.\n\nIt is guaranteed that the sum of n over all test cases does not exceed 10^5.", "testcase": ["3\n2\n1 2\n4\n10 20 30 40\n5\n100 200 300 400 500", "1\n3\n1000000000 1 1000000000", "2\n2\n123456789 987654321\n5\n1 1 2 3 5", "4\n10\n1 1 1 1 1 1 1 1 1 10\n3\n100 200 300\n5\n1 2 3 4 5\n6\n10 9 8 7 6 5", "1\n8\n8 7 6 5 4 3 2 1", "2\n6\n1 1 1 1 1 1\n4\n100000000 99999999 99999998 99999997", "3\n4\n2 4 8 16\n8\n256 256 256 256 256 256 256 256\n10\n1024 512 256 128 64 32 16 8 4 2", "1\n12\n2 3 1 5 4 7 6 10 8 11 9 12", "5\n5\n1 2 2 3 3\n7\n4 4 4 4 4 4 4\n9\n7 8 9 1 2 3 6 5 4\n2\n1 1\n10\n1 3 5 7 9 2 4 6 8 10", "2\n8\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000\n15\n1 3 6 10 15 21 28 36 45 55 66 78 91 105 120"]}
{"name": "142_A. Help Farmer", "description": "Input\n\nThe only line contains integer n from the problem's statement (1 <= n <=10^9).", "testcase": ["1", "2", "999999999", "500000000", "847", "100000000", "7", "123456789", "987654321", "202020202"]}
{"name": "1430_B. Barrels", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 1000) --- the number of test cases.\n\nThe first line of each test case contains two integers n and k (1 <= k < n <= 2 * 10^5) --- the number of barrels and the number of pourings you can make.\n\nThe second line contains n integers a_1, a_2, ..., a_n (0 <= a_i <= 10^{9}), where a_i is the initial amount of water the i-th barrel has.\n\nIt's guaranteed that the total sum of n over test cases doesn't exceed 2 * 10^5.", "testcase": ["3\n2 1\n0 10\n4 3\n1 0 7 6\n5 2\n3 0 4 5 9", "1\n7 3\n0 4 2 6 7 1 3", "2\n3 2\n10 0 10\n4 1\n5 0 5 10", "4\n2 1\n1 2\n2 1\n3 4\n3 2\n0 5 10\n4 2\n1 3 5 7", "1\n6 1\n0 0 0 0 1 0", "3\n9 4\n2 2 2 2 2 2 2 2 19\n8 7\n9 5 1 2 4 6 8 11\n10 3\n5 8 2 6 3 7 4 9 1 6", "2\n5 4\n7 8 4 3 2\n3 1\n1000000000 0 500000000", "1\n12 5\n0 0 0 0 1000 0 0 0 0 0 0 0", "3\n6 3\n1 0 2 0 4 0\n5 2\n0 0 0 0 15\n4 1\n7 8 2 6", "1\n10 4\n100 200 300 400 500 600 700 800 900 1000"]}
{"name": "1436_A. Reorder", "description": "Input\n\nThe first line contains a single integer t --- the number of test cases (1 <= t <= 100). The test cases follow, each in two lines.\n\nThe first line of a test case contains two integers n and m (1 <= n <= 100, 0 <= m <= 10^6). The second line contains integers a_1, a_2, ..., a_n (0 <= a_i <= 10^6) --- the elements of the array.", "testcase": ["1\n2 500000\n250000 250000", "5\n1 1\n0\n1 1\n1\n1 2\n0\n1 10\n10\n1 1000000\n100000", "3\n10 123456\n12345 23456 34567 45678 56789 67890 78901 89012 90123 1234\n5 654321\n65432 54321 43210 3210 210\n2 999999\n500000 499999", "4\n3 150\n50 50 50\n4 5280\n1320 1320 1320 1320\n6 100000\n10000 20000 30000 40000 0 0\n7 765432\n100000 100000 100000 100000 100000 100000 65432", "1\n8 2468\n123 456 789 101 112 131 415 161\n2 800\n400 400\n5 5000\n1000 1000 1000 1000 1000\n3 400\n133 133 134", "2\n4 400000\n100000 100000 100000 100000\n6 888888\n148148 148148 148148 148148 148148 148148", "1\n7 77\n11 11 11 11 11 11 11\n3 90000\n30000 30000 30000\n2 505050\n252525 252525", "1\n5 0\n0 0 0 0 0\n4 444444\n111111 111111 111111 111111", "2\n3 10\n3 3 4\n4 20\n5 5 5 5", "3\n6 200000\n100000 50000 25000 10000 10000 20000\n7 700000\n100000 100000 100000 100000 100000 100000 100000\n8 800000\n100000 100000 100000 100000 100000 100000 100000 100000"]}
{"name": "1451_D. Circle Game", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of each test case contains two space separated integers d (1 <= d <= 10^5) and k (1 <= k <= d).", "testcase": ["1\n100 50", "2\n50000 25000\n1000 500", "1\n99999 50000", "3\n1000 1\n2000 2\n3000 3", "1\n12345 1234", "2\n23456 2345\n34567 3456", "1\n100000 99999", "3\n54321 1234\n78901 5678\n101112 1314", "1\n44444 22222", "2\n80000 40000\n90000 45000"]}
{"name": "1466_C. Canine poetry", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 10^5) denoting the number of test cases, then t test cases follow.\n\nThe first and only line of each test case contains a non-empty string of lowercase English letters, Orpheus' poem.\n\nThe sum of the length of Orpheus' poems in all test cases will not exceed 10^5.", "testcase": ["1\nabcde", "2\na\nbc", "3\nhello\nworld\nprogramming", "4\napple\nbanana\ncherry\nkiwi", "5\none\ntwo\nthree\nfour\nfive", "2\nquick\nbrownfox", "3\njumped\nover\nthelazydog", "1\nabcdefghij", "2\nk\nlmno", "5\npuzzle\nentity\nsystem\nwiki\nquantum"]}
{"name": "146_D. Lucky Number 2", "description": "Input\n\nThe single line contains four integers a1, a2, a3 and a4 (1 <= a1, a2, a3, a4 <=10^6.", "testcase": ["1 2 3 4", "1000000 999999 888888 777777", "234567 345678 456789 123456", "314159 271828 161803 141421", "42 42 42 42", "505050 606060 707070 808080", "111111 222222 333333 444444", "999999 1000000 1 2", "987654 123456 789123 456789", "543210 654321 765432 876543"]}
{"name": "1471_A. Strange Partition", "description": "Input\n\nThe first input line contains a single integer t --- the number of test cases (1 <= t <= 1000).\n\nThe first line of each test case contains two integers n and x (1 <= n <= 10^5, 1 <= x <= 10^9).\n\nThe next line contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 10^9), the elements of the array a. \n\nIt is guaranteed that the sum of values of n over all test cases does not exceed 10^5.", "testcase": ["1\n5 10\n2 4 6 8 10", "3\n3 1000000000\n1000000000 1000000000 1000000000\n4 7\n1 3 5 7\n2 5\n2 3", "2\n6 12\n2 7 1 3 3 4\n8 16\n2 4 8 6 4 5 7 3", "1\n4 123456789\n98765432 87654321 76543210 65432109", "2\n1 1\n1\n10 999999999\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000 900000000 999999999", "1\n7 77\n11 22 33 44 55 66 77", "1\n10 500000000\n4353 234234 5464564 2342345 765867 2343234 4564565 567567 678678 123456", "1\n8 88888888\n22222222 44444444 66666666 33333333 55555555 77777777 88888888 99999999", "2\n2 42\n6 36\n3 24\n8 16 32", "1\n5 99999999\n12345678 87654321 12345678 87654321 1234567"]}
{"name": "1480_A. Yet Another String Game", "description": "Input\n\nEach test contains multiple test cases. The first line contains t (1 <= t <= 1000) --- the number of test cases. Description of the test cases follows.\n\nThe only line of each test case contains a single string s (1 <= |s| <= 50) consisting of lowercase English letters.", "testcase": ["z", "example", "testcase", "multipletests", "lowercase", "letters", "string", "abcde", "verification", "jsonformat"]}
{"name": "1485_A. Add and Divide", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 100) --- the number of test cases.\n\nThe only line of the description of each test case contains two integers a, b (1 <= a,b <= 10^9).", "testcase": ["1\n100000000 100000000", "2\n500000000 600000000", "3\n10 20", "4\n123456789 987654321", "5\n999999999 1", "6\n1 999999999", "7\n555555555 555555555", "8\n235711131 919293949", "9\n111222333 444555666", "10\n1000000000 999999999"]}
{"name": "148_A. Insomnia cure", "description": "Input\n\nInput data contains integer numbers k, l, m, n and d, each number in a separate line (1 <= k, l, m, n <= 10, 1 <= d <= 10^5).", "testcase": ["1\n2\n3\n4\n10", "2\n3\n4\n5\n100", "1\n1\n1\n1\n1", "10\n10\n10\n10\n10000", "4\n5\n6\n7\n500", "2\n4\n6\n8\n30000", "1\n2\n2\n2\n12345", "3\n6\n9\n3\n99999", "7\n5\n3\n1\n20000", "8\n9\n5\n3\n85000"]}
{"name": "1490_C. Sum of Cubes", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 100) --- the number of test cases. Then t test cases follow.\n\nEach test case contains one integer x (1 <= x <= 10^{12}).\n\nPlease note, that the input for some test cases won't fit into 32-bit integer type, so you should use at least 64-bit integer type in your programming language.", "testcase": ["1\n1", "2\n10\n100", "1\n123456789012", "1\n999999999999", "3\n500\n6000000\n700000000000", "1\n4294967296", "1\n987654321098", "2\n1125899906842624\n18", "1\n1000000000000", "1\n2047"]}
{"name": "1498_A. GCD Sum", "description": "Input\n\nThe first line of input contains one integer t (1 <= t <= 10^4) --- the number of test cases. \n\nThen t lines follow, each containing a single integer n (1 <= n <= 10^{18}).\n\nAll test cases in one test are different.", "testcase": ["1\n1000000000000000000", "1\n999999999999999999", "1\n847584875848575849", "1\n123456789123456789", "1\n987654321987654321", "1\n764353789234576234", "1\n111111111111111111", "1\n222222222222222222", "1\n333333333333333333", "1\n444444444444444444"]}
{"name": "1506_G. Maximize the Remaining String", "description": "Input\n\nThe first line contains one integer t (1 <= t <= 10^4). Then t test cases follow.\n\nEach test case is characterized by a string s, consisting of lowercase Latin letters (1 <= |s| <= 2 * 10^5).\n\nIt is guaranteed that the sum of the lengths of the strings in all test cases does not exceed 2 * 10^5.", "testcase": ["3", "abc", "defghijk", "z", "2", "xy", "uvwxy", "1", "pqrstuv", "4", "a", "bb", "ccc", "dddd", "5", "mnop", "qrstuv", "wxyz", "abcd", "efgh", "1", "ijklmnopqr", "3", "stuv", "wxyz", "abcdefghij", "2", "klmno", "pqrst", "1", "uvwxyz"]}
{"name": "151_C. Win or Freeze", "description": "Input\n\nThe first line contains the only integer q (1 <= q <=10^13).\n\nPlease do not use the %lld specificator to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specificator.", "testcase": ["1", "123456789", "100000000001", "123456789012", "987654321098", "4294967296", "9999999999999", "3141592653589", "10000000000000", "7766554433221"]}
{"name": "1526_D. Kill Anton", "description": "Input\n\nThe first line of input contains a single integer t (1 <= t <= 100000) --- the number of testcases.\n\nThe first and only line of each testcase contains 1 string a (1 <= |a| <= 100000). a consists of only the characters \"A\", \"N\", \"O\" and \"T\".\n\nIt is guaranteed that the sum of |a| over all testcases does not exceed 100000.", "testcase": ["1\nA", "2\nAN\nNO", "3\nA\nAA\nAAA", "1\nTANANA", "3\nANT\nTONO\nAANTTOONN", "4\nA\nO\nN\nT", "2\nNANO\nTONTANTO", "1\nONOANTTAA", "5\nA\nN\nO\nT\nNNNAAATTT", "2\nAT\nNA"]}
{"name": "1535_C. Unstable String", "description": "Input\n\nThe first line contains a single integer t (1 <= t <= 10^4) --- number of test cases.\n\nThe first and only line of each test case contains the string s (1 <= |s| <= 2 * 10^5) consisting of characters 0, 1, and ?.\n\nIt is guaranteed that the sum of the string lengths over all test cases does not exceed 2 * 10^5.", "testcase": ["2\n0??1\n1?0", "1\n?????", "3\n0\n1\n?", "4\n00??11\n111??00\n??\n0?1", "1\n0?1?0?1?0?1?0?1?0?1", "2\n?0??0??1\n1??1??0?", "1\n1??????0", "3\n0?0?0?0?0\n?1?1?1?1?1\n0?1?0?1?0?1", "5\n1\n0\n?\n1?\n?0", "2\n??0??1??0??1\n1??0??1??0??"]}
{"name": "161_C. Abracadabra", "description": "Input\n\nThe input consists of a single line containing four integers l1, r1, l2, r2 (1 <= li <= ri <=10^9, i = 1, 2). The numbers are separated by single spaces. li and ri give the indices of the first and the last characters of the i-th chosen substring, correspondingly (i = 1, 2). The characters of string abracadabra are numbered starting from 1.", "testcase": ["1 5 2 6", "3 7 1 4", "2 8 5 9", "6 10 3 7", "1 3 4 7", "5 8 9 11", "7 11 2 5", "4 6 8 10", "2 4 6 9", "1 1 10 10"]}
{"name": "166_A. Rank List", "description": "Input\n\nThe first line contains two integers n and k (1 <= k <= n <= 50). Then n lines contain the description of the teams: the i-th line contains two integers pi and ti (1 <= pi, ti <= 50) --- the number of solved problems and the total penalty time of the i-th team, correspondingly. All numbers in the lines are separated by spaces.", "testcase": ["3 2\n3 10\n3 15\n2 20", "5 3\n5 30\n4 25\n5 40\n3 20\n4 15", "10 5\n6 35\n5 45\n6 20\n7 50\n7 60\n4 15\n5 25\n3 10\n4 45\n2 10", "4 1\n10 8\n10 7\n10 5\n9 6", "7 3\n1 10\n2 20\n2 30\n3 30\n4 30\n5 30\n6 30", "8 4\n8 60\n7 70\n8 80\n5 40\n6 50\n7 60\n8 70\n4 20", "2 1\n50 50\n1 1", "6 6\n8 12\n8 10\n8 14\n7 15\n5 10\n6 20", "9 5\n20 100\n18 50\n20 80\n15 100\n16 150\n17 100\n16 200\n15 300\n20 120", "3 1\n30 40\n30 60\n25 30"]}
{"name": "168_A. Wizards and Demonstration", "description": "Input\n\nThe first line contains three space-separated integers, n, x, y (1 <= n, x, y <=10^4, x <= n) --- the number of citizens in the city, the number of wizards and the percentage the administration needs, correspondingly.\n\nPlease note that y can exceed 100 percent, that is, the administration wants to see on a demonstration more people that actually live in the city ( > n).", "testcase": ["100 10 50", "5000 50 90", "2000 200 110", "9999 1234 150", "2500 2500 100", "700 700 95", "6000 3000 120", "3500 350 200", "450 450 80", "10000 5000 300"]}
{"name": "171_D. Broken checker", "description": "Input\n\nThe only line of the input contains an integer between 1 and 5, inclusive. All tests for this problem are different. The contents of the test case doesn't need to be equal to its index.", "testcase": ["1", "5", "2", "4", "3", "1", "3", "2", "5", "4"]}
{"name": "195_A. Let's Watch Football", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (1 <= a, b, c <= 1000, a > b). The first number (a) denotes the size of data needed to watch one second of the video. The second number (b) denotes the size of data Valeric and Valerko can download from the Net per second. The third number (c) denotes the video's length in seconds.", "testcase": ["10 9 100", "2 1 500", "32 31 200", "1000 999 1000", "500 250 800", "20 15 600", "150 149 300", "100 50 1000", "850 500 900", "750 749 400"]}
{"name": "199_C. About Bacteria", "description": "Input\n\nThe first line contains four space-separated integers k, b, n and t (1 <= k, b, n, t <=10^6 --- the parameters of bacterial growth, the time Qwerty needed to grow z bacteria in the first experiment and the initial number of bacteria in the second experiment, correspondingly.", "testcase": ["2 3 100000 500000", "1 1 500000 100000", "123456 234567 345678 456789", "999999 888888 777777 666666", "2345 6789 1000 2000", "6789 2345 98765 54321", "314159 271828 161803 141421", "42 24 4242 2424", "100000 100000 100000 100000", "1 2 3 4"]}
{"name": "204_A. Little Elephant and Interval", "description": "Input\n\nThe single line contains a pair of integers l and r (1 <= l <= r <=10^18) --- the boundaries of the interval.\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use cin, cout streams or the %I64d specifier.", "testcase": ["1 1000000000000000000", "10 20", "99999999999999999 1000000000000000000", "123456789 987654321", "100000000 999999999", "500000000000000000 500000000000000010", "1 10", "999999999999999 999999999999999999", "100000000000000 200000000000000", "900000000000000000 900000000000000100"]}
{"name": "209_B. Pixels", "description": "Input\n\nThe first line contains three space-separated integers a, b and c (0 <= a, b, c <= 231; a + b + c > 0) --- the number of red, green and blue pixels, correspondingly.", "testcase": [""]}
{"name": "221_A. Little Elephant and Function", "description": "Input\n\nA single line contains integer n (1 <= n <= 1000) --- the size of permutation.", "testcase": ["1", "2", "3", "10", "50", "100", "500", "750", "999", "1000"]}
{"name": "221_C. Little Elephant and Problem", "description": "Input\n\nThe first line contains a single integer n (2 <= n <=10^5) --- the size of array a. The next line contains n positive integers, separated by single spaces and not exceeding 109, --- array a.\n\nNote that the elements of the array are not necessarily distinct numbers.", "testcase": ["3\n1 2 3", "2\n1000000000 100000000", "4\n5 4 3 2", "5\n32 45 67 89 12", "6\n23 14 56 78 90 45", "10\n10 10 10 10 10 10 10 10 10 10", "7\n345 678 901 234 567 890 123", "8\n873 262 716 100 200 300 400 500", "9\n50 50 50 50 50 50 50 50 51", "2\n999999999 500000000"]}
{"name": "223_C. Partial Sums", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <= 2000, 0 <= k <=10^9). The next line contains n space-separated integers a1, a2, ..., an --- elements of the array a (0 <= ai <=10^9).", "testcase": ["2 500000000\n0 1000000000", "5 20\n4 5 10 15 20", "10 0\n0 0 0 0 0 0 0 0 0 0", "1 123456789\n987654321", "3 1000000000\n1000000000 999999999 888888888", "2000 999999999\n"]}
{"name": "230_A. Dragons", "description": "Input\n\nThe first line contains two space-separated integers s and n (1 <= s <= 10^4, 1 <= n <= 10^3). Then n lines follow: the i-th line contains space-separated integers xi and yi (1 <= xi <= 10^4, 0 <= yi <= 10^4) --- the i-th dragon's strength and the bonus for defeating it.", "testcase": ["100 3\n10 5\n20 10\n30 15", "500 5\n100 20\n200 30\n150 50\n300 60\n50 10", "2000 2\n1500 500\n1000 200", "1 1\n1 0", "9999 10\n1234 150\n2345 100\n3456 200\n4567 300\n5678 400\n6789 500\n7890 600\n8901 700\n9012 800\n150 50", "1234 4\n300 100\n400 200\n500 100\n600 300", "8000 7\n1000 200\n2000 300\n3000 400\n4000 500\n5000 600\n6000 700\n7000 800", "350 5\n100 0\n200 0\n300 0\n400 0\n500 0", "7777 8\n1111 222\n2222 333\n3333 444\n4444 555\n5555 666\n6666 777\n7777 888\n8888 999", "9821 6\n982 198\n2943 0\n735 140\n1842 289\n2367 340\n491 70"]}
{"name": "235_A. LCM Challenge", "description": "Input\n\nThe first line contains an integer n (1 <= n <=10^6 --- the n mentioned in the statement.", "testcase": ["1", "10", "500", "999999", "1000000", "123456", "654321", "42", "999", "500000"]}
{"name": "239_A. Two Bags of Potatoes", "description": "Input\n\nThe first line of input contains three integers y, k, n (1 <= y, k, n <=10^9; <image> <=10^5).", "testcase": ["1 2 100000", "10 100 100000", "5 7 99999", "12345 67890 100000000", "11111 22222 333333333", "6 12 345678", "123 456 789012345", "7 8 87654321", "99999 100000 100000000", "42 42 42000000"]}
{"name": "255_B. Code Parsing", "description": "Input\n\nThe first line contains a non-empty string s. \n\nIt is guaranteed that the string only consists of characters \"x\" and \"y\". It is guaranteed that the string consists of at most 106 characters. It is guaranteed that as the result of the algorithm's execution won't be an empty string.", "testcase": ["xyyxyxyx", "yxxy", "xxxyyyxyx", "xyxyxyxyxyxyx", "yxyxyx", "yxxyxxxyxyy", "xyxyyxxyyxxyy", "yyyyyxyx", "xyx", "xxyyxyyxyxx"]}
{"name": "275_A. Lights Out", "description": "Input\n\nThe input consists of three rows. Each row contains three integers each between 0 to 100 inclusive. The j-th number in the i-th row is the number of times the j-th light of the i-th row of the grid is pressed.", "testcase": ["0 0 0\n0 0 0\n0 0 0", "1 2 3\n4 5 6\n7 8 9", "12 34 56\n78 90 10\n11 12 13", "100 100 100\n100 100 100\n100 100 100", "23 45 67\n89 23 45\n67 89 23", "0 1 0\n2 0 2\n0 3 0", "50 50 50\n25 25 25\n75 75 75", "0 99 0\n0 50 0\n99 0 50", "6 18 24\n36 48 60\n66 78 84", "10 20 30\n40 50 60\n70 80 90"]}
{"name": "285_D. Permutation Sum", "description": "Input\n\nThe single line contains integer n (1 <= n <= 16).", "testcase": ["1", "16", "8", "5", "12", "3", "7", "10", "14", "11"]}
{"name": "287_B. Pipeline", "description": "Input\n\nThe first line contains two space-separated integers n and k (1 <= n <=10^18, 2 <= k <=10^9).\n\nPlease, do not use the %lld specifier to read or write 64-bit integers in С++. It is preferred to use the cin, cout streams or the %I64d specifier.", "testcase": ["1 2", "999999999999999999 2", "10000000000000000 999999999", "123456789012345678 200", "987654321987654321 987654321", "1000000000000000000 1000000000", "500000000000000000 98765", "99999999999999998 3", "712345678901234567 201", "350000000000000000 444444444"]}
{"name": "306_C. White, Black and White Again", "description": "Input\n\nThe single line of the input contains integers n, w and b (3 <= n <= 4000, 2 <= w <= 4000, 1 <= b <= 4000) --- the number of days, the number of good events and the number of not-so-good events. It is guaranteed that w + b >= n.", "testcase": ["3 2 1", "4 3 2", "4000 2500 1500", "100 99 1", "2500 1250 1250", "4000 2 3998", "3500 1750 1750", "1234 617 617", "2345 1173 1172", "4000 4000 1"]}
{"name": "32_D. Constellation", "description": "Input\n\nThe first line contains three integers n, m and k (1 <= n, m <= 300, 1 <= k <= 3.10^7) --- height and width of the map and index of the required constellation respectively. The upper-left corner has coordinates (1, 1), and the lower-right --- (n, m). Then there follow n lines, m characters each --- description of the map. j-th character in i-th line is «*», if there is a star in the corresponding square, and «.» if this square is empty.", "testcase": ["3 4 7\n*.*.\n.*.*\n*.*.", "1 5 18\n*****", "5 5 15\n.....\n..*..\n.....\n..*..\n.....", "2 3 4\n*.*\n.*.", "6 1 6\n*\n.\n*\n.\n*\n.", "4 4 10\n*.*.\n.*.*\n*.*.\n.*.*", "7 2 45\n*.\n.*\n*.\n.*\n*.\n.*\n*.", "3 3 9\n*.*\n.*.\n*.*", "8 8 48\n........\n....*...\n........\n........\n...*....\n........\n........\n........", "10 10 273\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*..\n..*..*..*.\n*..*..*.."]}
{"name": "342_C. Cupboard and Balloons", "description": "Input\n\nThe single line contains two integers r, h (1 <= r, h <=10^7).", "testcase": ["1 1", "10000000 10000000", "123456 789012", "42 424242", "999999 1234567", "2345678 8765432", "8675309 3141592", "654321 123456", "5067890 5078901", "3141592 2718281"]}
{"name": "343_B. Alternating Current", "description": "Input\n\nThe single line of the input contains a sequence of characters \"+\" and \"-\" of length n (1 <= n <= 100000). The i-th (1 <= i <= n) position of the sequence contains the character \"+\", if on the i-th step from the wall the \"plus\" wire runs above the \"minus\" wire, and the character \"-\" otherwise.", "testcase": ["+-+++--+-+", "-", "++--++--+", "--------", "++++++++++", "+++-+-+-++", "+-", "+-+-+-+-+-", "-+-+--+", "++"]}
{"name": "365_A. Good Number", "description": "Input\n\nThe first line contains integers n and k (1 <= n <= 100, 0 <= k <= 9). The i-th of the following n lines contains integer ai without leading zeroes (1 <= ai <=10^9).", "testcase": ["3 2\n12345\n67890\n24680", "5 0\n100000000\n99999999\n12345678\n87654321\n10000000", "7 5\n55555\n15555\n25555\n35555\n45555\n65555\n75555", "1 4\n4444", "2 1\n10\n11", "6 6\n666666\n66666\n6666\n666\n66\n6", "4 8\n8888\n88888\n888888\n8888888", "8 3\n303030\n33030\n303300\n330030\n30303\n3303\n303\n33", "9 7\n7070707\n7777777\n77777\n7777\n777\n77\n7\n700000000\n70000000", "10 9\n999999999\n99999999\n9999999\n999999\n99999\n9999\n999\n99\n9\n900000000"]}
{"name": "373_A. Collecting Beats is Fun", "description": "Input\n\nThe first line contains a single integer k (1 <= k <= 5) --- the number of panels Cucumber boy can press with his one hand.\n\nNext 4 lines contain 4 characters each (digits from 1 to 9, or period) --- table of panels. If a digit i was written on the panel, it means the boy has to press that panel in time i. If period was written on the panel, he doesn't have to press that panel.", "testcase": ["2\n....\n....\n....\n....", "1\n1234\n5678\n1234\n5678", "3\n1.3.\n.2.4\n1.3.\n.2.4", "4\n....\n....\n....\n1111", "5\n9.9.\n.8.8\n7.7.\n.6.6", "2\n.2..\n3...\n..4.\n....", "1\n.1..\n..2.\n...3\n....", "2\n....\n....\n....\n2222", "3\n...1\n..2.\n.3..\n4...", "5\n1...1\n12..2\n123.3\n1234"]}
{"name": "374_A. Inna and Pink Pony", "description": "Input\n\nThe first line of the input contains six integers n, m, i, j, a, b (1 <= n, m <= 106; 1 <= i <= n; 1 <= j <= m; 1 <= a, b <=10^6.\n\nYou can assume that the chessboard rows are numbered from 1 to n from top to bottom and the columns are numbered from 1 to m from left to right. Position (i, j) in the statement is a chessboard cell on the intersection of the i-th row and the j-th column. You can consider that the corners are: (1, m), (n, 1), (n, m), (1, 1).", "testcase": ["2 3 1 2 1 1", "3 4 3 1 1 2", "5 5 2 3 2 2", "10 10 5 5 3 3", "6 8 6 1 1 1", "7 7 4 4 2 3", "8 9 8 9 2 2", "9 6 3 3 3 1", "1000000 1000000 500000 500000 1000000 1000000", "1000000 999999 999999 999998 2 2"]}
{"name": "379_A. New Year Candles", "description": "Input\n\nThe single line contains two integers, a and b (1 <= a <= 1000; 2 <= b <= 1000).", "testcase": ["1 2", "123 456", "999 1000", "500 501", "1000 100", "12 34", "42 99", "65 65", "100 200", "3 4"]}
{"name": "393_C. Blocked Points", "description": "Input\n\nThe first line contains an integer n (0 <= n <= 4.10^7).", "testcase": ["0", "1", "325", "78459", "2097152", "16777216", "34000000", "41000000", "12345678", "40000000"]}
{"name": "39_H. Multiplication Table", "description": "Input\n\nThe first line contains a single integer k (2 <= k <= 10) --- the radix of the system.", "testcase": ["2", "3", "4", "5", "6", "7", "8", "9", "10", "2"]}
{"name": "404_D. Minesweeper 1D", "description": "Input\n\nThe first line contains sequence of characters without spaces s1s2... sn (1 <= n <=10^6, containing only characters \"*\", \"?\" and digits \"0\", \"1\" or \"2\". If character si equals \"*\", then the i-th cell of the field contains a bomb. If character si equals \"?\", then Valera hasn't yet decided what to put in the i-th cell. Character si, that is equal to a digit, represents the digit written in the i-th square.", "testcase": ["1*?02*?*1", "2?*?1*0??", "1?1?*?1*2*", "*0?2*?*?0", "2*1*?0?*?2", "11??*0?*2?", "**?2*0?11?", "0??*?12?*?", "*?*?*?*0?2", "?0?1?*2?*?"]}
{"name": "405_A. Gravity Flip", "description": "Input\n\nThe first line of input contains an integer n (1 <= n <= 100), the number of the columns in the box. The next line contains n space-separated integer numbers. The i-th number ai (1 <= ai <= 100) denotes the number of cubes in the i-th column.", "testcase": ["3\n4 5 6", "1\n100", "5\n1 2 3 4 5", "2\n50 50", "10\n10 20 30 40 50 60 70 80 90 100", "6\n15 15 15 15 15 15", "4\n32 45 67 89", "7\n21 1 43 2 85 3 7", "9\n9 8 1 5 6 3 2 7 4", "8\n11 22 33 44 55 66 77 88"]}
{"name": "40_C. Berland Square", "description": "Input\n\nThe first line contains integers N, x, M, y. (1 <= N, M <= 100000, - 100000 <= x, y <= 100000, x != y).", "testcase": ["1 -50000 100000 50000", "100000 99999 1 -99999", "50000 0 50000 -1", "1 -1 100000 1", "100000 -100000 1 100000", "12345 12344 54321 -12344", "99999 48763 2 -48763", "80000 -40000 20000 39999", "75932 -75931 24068 0", "100 50 10000 -50"]}
{"name": "420_A. Start Up", "description": "Input\n\nThe first line contains a non-empty name that needs to be checked. The name contains at most 105 large English letters. The name will be written with the next sans serif font: \n\n<image>", "testcase": ["ALEXANDER", "VICTORIA", "JONATHAN", "ELIZABETH", "NICHOLAS", "CHARLOTTE", "BENJAMIN", "CHRISTOPHER", "MARGARET", "THEODORE"]}
{"name": "425_A. Sereja and Swaps", "description": "Input\n\nThe first line contains two integers n and k (1 <= n <= 200; 1 <= k <= 10). The next line contains n integers a[1], a[2], ..., a[n] ( - 1000 <= a[i] <= 1000).", "testcase": ["3 2\n-5 0 7", "5 1\n-1000 -999 -998 -997 -996", "4 5\n10 -10 20 -20", "10 3\n0 1 0 -1 0 1 -1 1 0 -1", "1 1\n1000", "7 4\n-500 300 -200 400 0 -300 100", "6 2\n-1 2 -3 4 -5 6", "8 10\n1000 -1000 999 -999 500 -500 0 250", "2 1\n42 -42", "9 3\n-10 -20 -30 10 20 30 -40 40 0"]}
{"name": "439_A. Devu, the Singer and Churu, the Joker", "description": "Input\n\nThe first line contains two space separated integers n, d (1 <= n <= 100; 1 <= d <= 10000). The second line contains n space-separated integers: t1, t2, ..., tn (1 <= ti <= 100).", "testcase": ["3 100\n1 2 3", "5 5000\n10 40 30 50 20", "1 10\n5", "4 300\n75 25 100 50", "7 1234\n1 2 3 4 5 6 7", "2 9999\n99 100", "6 500\n10 10 10 10 10 10", "8 8000\n8 88 888 1 2 3 4 5", "10 1000\n5 10 15 20 25 30 35 40 45 50", "9 2345\n11 22 33 44 55 66 77 88 99"]}
{"name": "439_B. Devu, the Dumb Guy", "description": "Input\n\nThe first line will contain two space separated integers n, x (1 <= n, x <=10^5). The next line will contain n space separated integers: c1, c2, ..., cn (1 <= ci <=10^5).", "testcase": ["2 99999\n1 99999", "3 50000\n12345 23456 34567", "5 30000\n10000 20000 15000 25000 30000", "4 10000\n9999 8888 7777 6666", "1 50000\n12345", "6 12345\n10001 20002 30003 40004 50005 60006", "10 100000\n10000 20000 30000 40000 50000 60000 70000 80000 90000 100000", "8 85000\n21000 32000 43000 54000 65000 76000 87000 98000", "7 77777\n11111 22222 33333 44444 55555 66666 77777", "9 12321\n1024 2048 4096 8192 16384 32768 65536 13107 26214"]}
{"name": "442_C. Artem and Array ", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 5.10^5) --- the number of elements in the array. The next line contains n integers ai (1 <= ai <=10^6 --- the values of the array elements.", "testcase": [""]}
{"name": "443_A. Anton and Letters", "description": "Input\n\nThe first and the single line contains the set of letters. The length of the line doesn't exceed 1000. It is guaranteed that the line starts from an opening curved bracket and ends with a closing curved bracket. Between them, small English letters are listed, separated by a comma. Each comma is followed by a space.", "testcase": ["(a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z)", "(m, n, o, p, q, r, s, t, u, v, w, x, y, z)", "(a, b, c, d, e, f, g, h)", "(x, y, z)", "(i, j, k, l, m, n)", "(a, c, e, g, i, k, m, o, q, s, u, w, y)", "(b, d, f, h, j, l, n, p, r, t, v, x, z)", "(a, b, c)", "(r, s, t, u, v, w, x)", "(a)"]}
{"name": "44_B. Cola", "description": "Input\n\nThe first line contains four integers --- n, a, b, c (1 <= n <= 10000, 0 <= a, b, c <= 5000).", "testcase": ["1 0 0 0", "10000 5000 5000 5000", "1234 2345 3456 4567", "9999 999 1999 2999", "5000 2500 2500 2500", "234 123 456 789", "4321 987 654 321", "6789 1230 4560 7890", "3456 1111 2222 3333", "8192 1024 2048 4096"]}
{"name": "44_I. Toys", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 10) --- the number of toys.", "testcase": ["1", "2", "3", "4", "5", "6", "7", "8", "9", "10"]}
{"name": "453_E. Little Pony and Lord Tirek", "description": "Input\n\nThe first line contains an integer n (1 <= n <= 105) --- the number of ponies. Each of the next n lines contains three integers si, mi, ri (0 <= si <= mi <= 105; 0 <= ri <= 105), describing a pony. \n\nThe next line contains an integer m (1 <= m <= 105) --- the number of instructions. Each of the next m lines contains three integers ti, li, ri (0 <= ti <= 109; 1 <= li <= ri <= n), describing an instruction of Lord Tirek. The instructions are given in strictly increasing order of ti (all ti are distinct).", "testcase": ["5\n0 10 1\n2 9 3\n4 7 2\n6 6 0\n8 8 4\n2\n1 1 3\n2 2 5", "6\n0 20 5\n5 15 10\n10 10 15\n20 25 20\n25 30 25\n30 35 30\n2\n3 1 6\n9 2 4", "1\n0 100000 50000\n1\n1000000000 1 1", "2\n0 0 5\n1 100000 99999\n3\n1 1 1\n2 1 1\n3 1 2", "8\n0 0 0\n1 1 1\n2 2 2\n3 3 3\n4 4 4\n5 5 5\n6 6 6\n7 7 7\n1\n999999999 5 7", "4\n0 5 5\n5 10 5\n10 15 5\n15 20 5\n2\n50000 1 2\n100000 3 4", "7\n0 9 5\n1 8 4\n2 7 3\n3 5 2\n4 4 1\n5 3 1\n6 2 0\n5\n1 2 5\n2 1 1\n3 1 3\n4 2 4\n5 3 7", "3\n0 100 50\n50 150 75\n100 200 125\n1\n100000 1 3", "10\n0 5 2\n1 10 4\n2 15 6\n3 20 8\n4 25 10\n5 30 12\n6 35 14\n7 40 16\n8 45 18\n9 50 20\n6\n10 1 5\n20 2 7\n30 3 9\n40 4 10\n50 5 10\n60 6 10", "9\n0 1 0\n1 2 1\n2 3 2\n3 4 3\n0 1 0\n1 2 1\n2 3 2\n3 4 3\n0 1 0\n6\n1 1 2\n3 3 4\n5 5 6\n7 7 8\n9 2 5\n11 6 9", "1\n0 0 0\n5\n1 1 1\n2 1 1\n3 1 1\n4 1 1\n5 1 1", "11\n0 10 5\n10 20 15\n20 30 25\n30 40 35\n40 50 45\n50 60 55\n60 70 65\n70 80 75\n80 90 85\n90 100 95\n100 110 105\n3\n1234567 1 6\n7654321 6 11\n9999999 3 9", "2\n0 3 2\n1 4 2\n2\n1 1 2\n2 2 2", "4\n0 20 10\n1 21 11\n2 22 12\n3 23 13\n4\n10 2 4\n20 1 2\n30 3 4\n40 1 4", "10\n0 100000 50000\n10 90000 45000\n20 80000 40000\n30 70000 35000\n40 60000 30000\n50 50000 25000\n60 40000 20000\n70 30000 15000\n80 20000 10000\n90 10000 5000\n3\n1 1 5\n999999998 6 10\n999999999 3 7", "5\n0 10 2\n2 8 1\n4 7 2\n6 5 2\n8 9 3\n4\n10 2 3\n20 1 2\n30 4 5\n40 3 4", "3\n0 10 5\n2 9 4\n4 8 3\n2\n999999998 1 2\n999999999 2 3", "7\n1 1000 500\n2 2000 1000\n3 3000 1500\n4 4000 2000\n5 5000 2500\n6 6000 3000\n7 7000 3500\n3\n100000000 2 5\n555555555 1 4\n777777777 3 6", "1\n100 100000 50000\n1\n100 1 1", "4\n1000 10000 5000\n2000 20000 15000\n3000 30000 25000\n4000 40000 35000\n1\n999999999 1 4", "2\n0 50000 25000\n11111 99999 55555\n4\n12 1 1\n23 2 2\n34 1 2\n45 2 2", "4\n1234 5678 2345\n8765 4321 6789\n1357 2468 9531\n8642 9753 1476\n5\n111111111 1 3\n222222222 2 4\n333333333 1 4\n444444444 3 4\n555555555 1 2", "10\n100 500 200\n200 600 300\n300 700 400\n400 800 500\n500 900 600\n600 1000 700\n700 1100 800\n800 1200 900\n900 1300 1000\n1000 1400 1100\n5\n909090909 3 6\n808080808 2 5\n707070707 1 4\n606060606 5 9\n505050505 4 8", "6\n0 1 0\n1 2 1\n2 3 2\n3 4 3\n4 5 4\n5 6 5\n3\n12345 2 2\n23456 3 3\n34567 4 4", "12\n500 1000 750\n1000 1500 1250\n1500 2000 1750\n2000 2500 2250\n2500 3000 2750\n3000 3500 3250\n3500 4000 3750\n4000 4500 4250\n4500 5000 4750\n5000 5500 5250\n5500 6000 5750\n6000 6500 6250\n2\n1 5 8\n1000000000 7 12", "3\n5 5 5\n5 5 5\n5 5 5\n1\n5000000 1 3", "8\n0 5000 1000\n1000 10000 7000\n3000 15000 5000\n6000 20000 10000\n9000 25000 12000\n12000 30000 16000\n18000 35000 20000\n30000 40000 25000\n6\n1111 3 5\n2222 1 4\n3333 2 6\n4444 3 8\n5555 4 7\n6666 5 8", "5\n400 0 400\n800 400 600\n1200 800 900\n1600 1200 1300\n2000 1600 1700\n3\n123456789 1 3\n987654321 2 4\n1234567890 3 5", "6\n23 42 0\n65 76 43\n10 59 25\n48 54 51\n67 89 85\n35 58 0\n4\n222 1 4\n333 3 6\n444 1 5\n555 2 3", "7\n10000 30000 20000\n20000 60000 40000\n30000 90000 60000\n40000 120000 80000\n50000 150000 100000\n60000 180000 120000\n70000 210000 140000\n2\n500000000 2 5\n1000000000 1 7", "6\n10000 20000 15000\n20000 40000 30000\n30000 60000 45000\n40000 80000 60000\n50000 100000 75000\n60000 120000 90000\n2\n1000000000 1 6\n999999998 3 5"]}
{"name": "469_A. I Wanna Be the Guy", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100). \n\nThe next line contains an integer p (0 <= p <= n) at first, then follows p distinct integers a1, a2, ..., ap (1 <= ai <= n). These integers denote the indices of levels Little X can pass. The next line contains the levels Little Y can pass in the same format. It's assumed that levels are numbered from 1 to n.", "testcase": ["3\n1 2\n2 1 3", "5\n3 1 3 5\n2 2 4", "10\n5 1 2 3 4 5\n5 6 7 8 9 10", "6\n0\n3 1 4 6", "4\n4 1 2 3 4\n0", "7\n3 1 5 7\n3 2 4 6", "8\n4 1 4 6 8\n4 2 3 5 7", "9\n5 1 3 5 7 9\n4 2 4 6 8", "2\n1 1\n1 2", "100\n50 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50\n50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100"]}
{"name": "476_A. Dreamoon and Stairs", "description": "Input\n\nThe single line contains two space separated integers n, m (0 < n <= 10000, 1 < m <= 10).", "testcase": ["1 2", "10000 10", "5000 3", "123 8", "9999 9", "2345 4", "8765 5", "4321 6", "10 7", "8000 2"]}
{"name": "476_C. Dreamoon and Sums", "description": "Input\n\nThe single line of the input contains two integers a, b (1 <= a, b <= 107).", "testcase": ["1 2", "3 4", "5 6", "7 8", "9 10", "11 12", "13 14", "15 16", "17 18", "19 20", "21 22", "23 24", "25 26", "27 28", "29 30", "31 32", "33 34", "35 36", "9999998 9999999", "10000000 10000001", "10000002 10000003", "10000004 10000005", "10000006 10000007", "99999 100000", "88888 88889", "77777 77778", "44444 44445", "22222 22223", "654321 654322", "123456 123457"]}
{"name": "478_A. Initial Bet", "description": "Input\n\nThe input consists of a single line containing five integers c1, c2, c3, c4 and c5 --- the number of coins that the first, second, third, fourth and fifth players respectively have at the end of the game (0 <= c1, c2, c3, c4, c5 <= 100).", "testcase": ["0 0 0 0 0", "100 100 100 100 100", "23 45 67 89 10", "11 22 33 44 55", "99 88 77 66 55", "5 10 15 20 25", "50 50 50 50 50", "10 20 30 40 50", "82 37 19 6 27", "73 29 58 41 84"]}
{"name": "478_C. Table Decorations", "description": "Input\n\nThe single line contains three integers r, g and b (0 <= r, g, b <= 2.10^9) --- the number of red, green and blue baloons respectively. The numbers are separated by exactly one space.", "testcase": ["0 0 0", "257 1024 4096", "2000000000 2000000000 2000000000", "123456789 987654321 192837465", "42 42 42", "15 30 45", "1000000 2000000 3000000", "999999999 888888888 777777777", "500 1000 1500", "100 200 300"]}
{"name": "483_B. Friends and Presents", "description": "Input\n\nThe only line contains four positive integers cnt1, cnt2, x, y (1 <= cnt1, cnt2 < 109; cnt1 + cnt2 <=10^9; 2 <= x < y <= 3.10^4) --- the numbers that are described in the statement. It is guaranteed that numbers x, y are prime.", "testcase": ["10 15 2 3", "20000000 35000000 17 29", "500 600 7 13", "99999999 1 3 5", "1 99999999 11 23", "987654 123456 5 7", "11111111 22222222 19 31", "345678 987654 13 19", "100000000 9999999 23 37", "87654321 12345678 2 997"]}
{"name": "488_A. Giga Tower", "description": "Input\n\nThe only line of input contains an integer a ( - 109 <= a <=10^9).", "testcase": ["-500000000", "0", "999999999", "12345", "-12345", "2147483647", "-2147483648", "1987654321", "-987654321", "1000000000"]}
{"name": "492_B. Vanya and Lanterns", "description": "Input\n\nThe first line contains two integers n, l (1 <= n <= 1000, 1 <= l <= 10^9) --- the number of lanterns and the length of the street respectively. \n\nThe next line contains n integers ai (0 <= ai <= l). Multiple lanterns can be located at the same point. The lanterns may be located at the ends of the street.", "testcase": ["2 10\n0 10", "5 100\n1 22 44 66 88", "3 500000000\n0 250000000 500000000", "4 200\n50 50 150 200", "6 100000\n0 20000 40000 60000 80000 100000", "10 1000\n0 100 200 300 400 500 600 700 800 1000", "7 123456789\n123 45678 123456 789012 345678 901234 1234567", "8 100000000\n1 2 3 4 5 6 7 8", "9 300\n0 33 66 99 132 165 198 231 264", "1 1\n0"]}
{"name": "49_D. Game", "description": "Input\n\nThe first line contains number n (1 <= n <= 1000) which represents the stripe's length. The second line contains exactly n symbols --- the line's initial coloring. 0 corresponds to a white square, 1 corresponds to a black one.", "testcase": ["1\n0", "1\n1", "2\n00", "2\n01", "2\n10", "2\n11", "3\n000", "3\n001", "3\n010", "3\n011", "3\n100", "3\n101", "3\n110", "3\n111", "4\n0000", "4\n0001", "4\n0010", "4\n0011", "4\n0100", "4\n0101", "4\n0110", "4\n0111", "4\n1000", "4\n1001", "4\n1010", "4\n1011", "4\n1100", "4\n1101", "4\n1110", "4\n1111"]}
{"name": "510_A. Fox And Snake", "description": "Input\n\nThe only line contains two integers: n and m (3 <= n, m <= 50). \n\nn is an odd number.", "testcase": ["3 4", "5 6", "7 8", "9 10", "11 12", "13 14", "15 16", "17 18", "19 20", "21 22"]}
{"name": "510_B. Fox And Two Dots", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <= 50): the number of rows and columns of the board.\n\nThen n lines follow, each line contains a string consisting of m characters, expressing colors of dots in each line. Each character is an uppercase Latin letter.", "testcase": ["2 3\nABC\nDEF", "4 4\nABCD\nEFGH\nIJKL\nMNOP", "3 5\nABCDE\nFGHIJ\nKLMNO", "5 6\nABCDEF\nGHIJKL\nMNOPQR\nSTUVWX\nYZABCD", "2 2\nAA\nBB", "6 4\nAXYZ\nBVWT\nCSRP\nDQON\nEMKJ\nFLIH", "3 3\nZZZ\nXXX\nCCC", "7 7\nABCDEFG\nHIJKLMN\nOPQRSTU\nVWXYZAB\nCDEFGHI\nJKLMNOP\nQRSTUVW", "8 8\nABCDABCD\nEFGHEFGH\nIJKLIJKL\nMNOMNOMN\nABCDABCD\nEFGHEFGH\nIJKLIJKL\nMNOMNOMN", "10 10\nABCDEFGHIJ\nKLMNOPQRST\nUVWXYZABCD\nEFGHIJKLMN\nOPQRSTUVWX\nYZABCDEFGHI\nJKLMNOPQRST\nUVWXYZABCD\nEFGHIJKLMN\nOPQRSTUVWX"]}
{"name": "513_A. Game", "description": "Input\n\nThe first line contains four integers n1, n2, k1, k2. All numbers in the input are from 1 to 50.\n\nThis problem doesn't have subproblems. You will get 3 points for the correct submission.", "testcase": ["10 20 5 15\n", "1 1 1 1\n", "50 50 50 50\n", "7 42 3 18\n", "23 35 1 50\n", "16 8 10 2\n", "31 27 14 33\n", "50 1 25 1\n", "4 4 2 2\n", "49 2 6 47\n"]}
{"name": "526_A. King of Thieves", "description": "Input\n\nThe first line contains integer n (1 <= n <= 100) --- the number of segments on the level.\n\nNext line contains the scheme of the level represented as a string of n characters '*' and '.'.", "testcase": ["1\n*", "3\n*.*", "5\n**.**", "10\n*.*.*.*.*.", "2\n.*", "7\n...*...", "4\n*..*", "8\n****....", "6\n*.**..", "9\n.*.*.*.*."]}
{"name": "535_C. Tavas and Karafs", "description": "Input\n\nThe first line of input contains three integers A, B and n (1 <= A, B <= 106, 1 <= n <=10^5).\n\nNext n lines contain information about queries. i-th line contains integers l, t, m (1 <= l, t, m <=10^6 for i-th query.", "testcase": ["2 3 5\n1 10 10\n2 15 20\n3 7 9\n4 14 15\n5 22 33", "1 2 3\n1 5 7\n4 10 12\n6 9 8", "1000 500 4\n150 10000 1000\n200 20000 2000\n250 30000 3000\n300 40000 4000", "123 456 2\n100 1000 200\n200 1500 300", "99999 1 3\n12345 98765 789\n23456 87654 678\n34567 76543 567", "10 10 4\n1 50 5\n2 60 6\n3 70 7\n4 80 8", "947 3837 3\n53 530 987\n672 6720 1344\n791 7910 1582", "555 777 5\n60 3000 800\n80 4000 900\n100 5000 1000\n120 6000 1100\n140 7000 1200", "1 100000 2\n50000 99999 50000\n60000 199999 60000", "12345 67890 3\n1234 56789 9876\n2345 67890 8765\n3456 78901 7654"]}
{"name": "538_B. Quasi Binary", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^6.", "testcase": ["1", "123456", "999999", "10", "500000", "987654", "100000", "42", "999", "65536"]}
{"name": "545_C. Woodcutters", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) --- the number of trees.\n\nNext n lines contain pairs of integers xi, hi (1 <= xi, hi <=10^9) --- the coordinate and the height of the і-th tree.\n\nThe pairs are given in the order of ascending xi. No two trees are located at the point with the same coordinate.", "testcase": ["3\n1 2\n3 4\n6 1", "1\n100000000 100000000", "4\n5 10\n15 3\n30 8\n100 50", "5\n1 1\n2 1\n3 1\n4 1\n5 1", "6\n100 200\n300 150\n400 500\n600 400\n800 350\n900 600", "2\n200000000 300000000\n700000000 800000000", "7\n5 15\n25 45\n50 10\n75 20\n125 35\n250 25\n500 5", "8\n10 100\n20 200\n30 300\n40 400\n50 500\n60 600\n70 700\n80 800", "9\n100000000 99999999\n200000000 88888888\n300000000 77777777\n400000000 66666666\n500000000 55555555\n600000000 44444444\n700000000 33333333\n800000000 22222222\n900000000 11111111", "10\n1 5\n2 15\n3 25\n4 35\n5 45\n6 55\n7 65\n8 75\n9 85\n10 95"]}
{"name": "550_A. Two Substrings", "description": "Input\n\nThe only line of input contains a string s of length between 1 and 105 consisting of uppercase Latin letters.", "testcase": ["A", "BCD", "EFGHIJKL", "MNOPQRSTUVWXYZ", "ABACADAEAF", "QWERTYUIOPASDFGHJKLZXCVBNM", "HELLOWORLD", "COMPUTERSCIENCE", "JAVASCRIPT", "PYTHONPROGRAMMING"]}
{"name": "551_A. GukiZ and Contest", "description": "Input\n\nThe first line contains integer n (1 <= n <= 2000), number of GukiZ's students. \n\nThe second line contains n numbers a1, a2, ... an (1 <= ai <= 2000) where ai is the rating of i-th student (1 <= i <= n).", "testcase": ["1\n1", "3\n1234 567 89", "2\n2000 1999", "4\n1 2 3 4", "5\n432 123 555 666 111", "6\n1001 2000 1500 1501 1600 1700", "7\n2000 1999 1998 1997 1996 1995 1994", "8\n10 20 30 40 50 60 70 80", "10\n200 300 400 500 600 700 800 900 1000 1100", "2\n1111 1110"]}
{"name": "554_A. Kyoya and Photobooks", "description": "Input\n\nThe first line of input will be a single string s (1 <= |s| <= 20). String s consists only of lowercase English letters.", "testcase": ["a", "example", "testcase", "lowercase", "string", "jsonformat", "multiplewords", "characters", "appropriate", "specification"]}
{"name": "559_B. Equivalent Strings", "description": "Input\n\nThe first two lines of the input contain two strings given by the teacher. Each of them has the length from 1 to 200 000 and consists of lowercase English letters. The strings have the same length.", "testcase": ["a\nb", "hello\nworld", "programming\nlanguages", "consistency\nperfection", "abcdefghij\nklmnopqrst", "patternmatch\nstringsearch", "datastructure\nalgorithmtype", "lowercaseeng\nuppervaseeng", "dynamicprogram\nstaticchecking", "artificialintel\nhumanintelligen"]}
{"name": "560_B. Gerald is into Art", "description": "Input\n\nThe first line contains two space-separated numbers a1 and b1 --- the sides of the board. Next two lines contain numbers a2, b2, a3 and b3 --- the sides of the paintings. All numbers ai, bi in the input are integers and fit into the range from 1 to 1000.", "testcase": ["8 11\n3 2\n4 5", "15 20\n10 2\n5 14", "16 17\n8 8\n8 9", "50 50\n25 25\n25 25", "100 200\n50 100\n150 50", "200 100\n100 50\n100 50", "300 400\n100 300\n200 100", "500 600\n200 150\n400 200", "700 800\n350 450\n450 350", "999 1000\n500 499\n501 500"]}
{"name": "56_E. Domino Principle", "description": "Input\n\nThe first line contains integer n (1 <= n <=10^5) which is the number of dominoes. Then follow n lines containing two integers xi and hi ( - 108 <= xi <=10^8, 2 <= hi <=10^8) each, which are the coordinate and height of every domino. No two dominoes stand on one point.", "testcase": ["3\n[[-100000000, 20000000], [0, 30000000], [100000000, 40000000]]", "5\n[[-87654321, 50000000], [-12345678, 60000000], [12345678, 70000000], [87654321, 80000000], [10000000, 90000000]]", "1\n[[-50000000, 100000000]]", "4\n[[-90000000, 90000000], [-45000000, 20000000], [45000000, 30000000], [90000000, 80000000]]", "6\n[[-23456789, 23456789], [-1234567, 34567890], [0, 45678901], [1234567, 56789012], [23456789, 67890123], [34567890, 78901234]]", "2\n[[-80000000, 20000000], [80000000, 100000000]]", "7\n[[-70000000, 30000000], [-40000000, 40000000], [-10000000, 50000000], [20000000, 60000000], [50000000, 70000000], [80000000, 80000000], [100000000, 85000000]]", "8\n[[-90000000, 32000000], [-70000000, 43000000], [-50000000, 52000000], [-30000000, 64000000], [-10000000, 75000000], [10000000, 86000000], [30000000, 97000000], [50000000, 108000000]]", "9\n[[-88888888, 20000000], [-55555555, 22000000], [-22222222, 24000000], [11111111, 26000000], [44444444, 28000000], [77777777, 30000000], [10000000, 32000000], [33333333, 34000000], [66666666, 36000000]]", "10\n[[-1000000, 20000000], [-800000, 21000000], [-600000, 22000000], [-400000, 23000000], [-200000, 24000000], [0, 25000000], [200000, 26000000], [400000, 27000000], [600000, 28000000], [800000, 29000000]]"]}
{"name": "570_B. Simple Game", "description": "Input\n\nThe first line contains two integers n and m (1 <= m <= n <= 10^9) --- the range of numbers in the game, and the number selected by Misha respectively.", "testcase": ["1 1", "2 1", "100 50", "999999999 500000000", "10^9 1", "123456789 98765", "99999999 88888888", "1000000000 999999999", "10 10", "54321 12345"]}
{"name": "571_A. Lengthening Sticks", "description": "Input\n\nThe single line contains 4 integers a, b, c, l (1 <= a, b, c <= 3.10^5, 0 <= l <= 3.10^5).", "testcase": ["1 1 1 0", "300000 300000 300000 300000", "12345 67890 23456 123", "100000 200000 150000 250000", "2 2 3 50", "299999 299998 299997 10", "2000 4000 3000 10000", "99999 88888 7777 222222", "234 567 890 12345", "111111 222222 333333 0"]}
{"name": "598_A. Tricky Sum", "description": "Input\n\nThe first line of the input contains a single integer t (1 <= t <= 100) --- the number of values of n to be processed.\n\nEach of next t lines contains a single integer n (1 <= n <= 10^9).", "testcase": ["1\n1", "2\n123\n456789", "4\n87654321\n123456789\n987654321\n12345678", "1"]}
{"name": "599_A. Patrick and Shopping", "description": "Input\n\nThe first line of the input contains three integers d1, d2, d3 (1 <= d1, d2, d3 <=10^8) --- the lengths of the paths. \n\n  * d1 is the length of the path connecting Patrick's house and the first shop; \n  * d2 is the length of the path connecting Patrick's house and the second shop; \n  * d3 is the length of the path connecting both shops.", "testcase": ["1 1 1", "10 20 30", "100000000 50000000 60000000", "1 100000000 99999999", "12345678 87654321 100000000", "99999999 88888888 77777777", "54321 12345 67890", "9999999 8888888 1234567", "22222222 33333333 44444444", "10000000 20000000 30000000"]}
{"name": "599_C. Day at the Beach", "description": "Input\n\nThe first line of the input contains a single integer n (1 <= n <= 100 000) --- the number of castles Spongebob, Patrick and Squidward made from sand during the day.\n\nThe next line contains n integers hi (1 <= hi <= 109). The i-th of these integers corresponds to the height of the i-th castle.", "testcase": ["1\n1", "2\n1 2", "3\n3 2 1", "4\n5 5 5 5", "5\n4 5 6 7 8", "6\n9 1 2 3 8 10", "7\n15 14 13 12 11 10 9", "8\n23 1 40 30 500 600 700 800", "9\n500 400 300 200 100 50 25 20 15", "10\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "11\n1000000000 900000000 800000000 700000000 600000000 500000000 400000000 300000000 200000000 100000000 500000000", "12\n1 2 3 4 5 6 7 8 9 10 11 12", "13\n10 15 10 15 10 15 10 15 10 15 10 15 10 15 10", "14\n20 20 20 20 20 20 20 20 20 20 20 20 20 20", "15\n1 2 1 2 1 2 1 2 1 2 1 2 1 2 1", "16\n2 3 5 7 11 13 17 19 23 29 31 37 41 43 47 53", "17\n500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500 500", "18\n100 200 300 400 500 600 700 800 900 1000 1100 1200 1300 1400 1500 1600 1700 1800", "19\n2 4 8 16 32 64 128 256 512 1024 2048 4096 8192 16384 32768 65536 131072 262144 524288", "20\n100 90 80 70 60 50 40 30 20 10 9 8 7 6 5 4 3 2 1", "21\n1000000000 800000000 600000000 400000000 200000000 100000000 80000000 60000000 40000000 20000000 10000000 8000000 6000000 4000000 2000000 1000000 800000 600000 400000 200000", "22\n987654321 98765432 9876543 987654 98765 9876 987 98 9", "23\n50 150 250 350 450 550 650 750 850 950 1050 1150 1250 1350 1450 1550 1650 1750 1850 1950 2050", "24\n1 4 9 16 25 36 49 64 81 100 121 144 169 196 225 256 289 324 361 400 441 484 529 576", "25\n2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3 2 3", "26\n1000 2000 3000 4000 5000 6000 7000 8000 9000 10000 11000 12000 13000 14000 15000 16000 17000 18000 19000 20000 21000 22000 23000 24000 25000 26000", "27\n5 15 25 35 45 55 65 75 85 95 105 115 125 135 145 155 165 175 185 195 205 215 225 235 245 255 275", "28\n100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127", "29\n1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1", "30\n1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100 1 100"]}
{"name": "5_C. Longest Regular Bracket Sequence", "description": "Input\n\nThe first line of the input file contains a non-empty string, consisting of «(» and «)» characters. Its length does not exceed 106.", "testcase": ["()", "((()))", "()()()", "(()())", "(())()", "(((())))", "(()(()))", "()(()())", "((())())", "((()()))"]}
{"name": "621_A. Wet Shark and Odd and Even", "description": "Input\n\nThe first line of the input contains one integer, n (1 <= n <= 100 000). The next line contains n space separated integers given to Wet Shark. Each of these integers is in range from 1 to 10^9, inclusive.", "testcase": ["1\n1", "2\n1000000000 500000000", "5\n1 2 3 4 5", "3\n10 100 1000", "10\n1 1 1 1 1 1 1 1 1 1", "7\n100000000 10000000 1000000 100000 10000 1000 100", "4\n999999999 888888888 777777777 666666666", "6\n123456789 987654321 111111111 222222222 333333333 444444444", "8\n99999999 88888888 77777777 66666666 55555555 44444444 33333333 22222222", "9\n10000000 20000000 30000000 40000000 50000000 60000000 70000000 80000000 90000000"]}
{"name": "622_A. Infinite Sequence", "description": "Input\n\nThe only line contains integer n (1 <= n <= 1014) --- the position of the number to find.\n\nNote that the given number is too large, so you should use 64-bit integer type to store it. In C++ you can use the long long integer type and in Java you can use long integer type.", "testcase": ["1", "10", "123456789", "100000000000000", "847502938475102", "99999999999999", "100000000000001", "55555555555555", "98765432101234", "12345678909876"]}
{"name": "624_B. Making a String", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 26) --- the number of letters in the alphabet.\n\nThe next line contains n integers ai (1 <= ai <=10^9) --- i-th of these integers gives the limitation on the number of occurrences of the i-th character in the string.", "testcase": ["3\n1 2 3", "5\n1000000000 999999999 987654321 123456789 1", "6\n15 20 30 25 10 5", "4\n9999999 8888888 7777777 6666666", "8\n10 20 30 40 50 60 70 80", "2\n500000000 500000000", "7\n3 6 9 12 15 18 21", "10\n1 1 1 1 1 1 1 1 1 1", "26\n10 20 30 40 50 60 70 80 90 100 110 120 130 140 150 160 170 180 190 200 210 220 230 240 250 260", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "625_A. Guest From the Past", "description": "Input\n\nFirst line of the input contains a single integer n (1 <= n <=10^18) --- the number of rubles Kolya has at the beginning.\n\nThen follow three lines containing integers a, b and c (1 <= a <=10^18, 1 <= c < b <=10^18) --- the cost of one plastic liter bottle, the cost of one glass liter bottle and the money one can get back by returning an empty glass bottle, respectively.", "testcase": ["5\n2\n7\n1", "999999999999999999\n999999999999999998\n999999999999999999\n999999999999999997", "1500000000\n1000000000\n3000000000\n500000000", "123456789012345\n234567890123456\n345678901234567\n12345678901234", "98765432109876\n76543210987654\n87654321098765\n65432109876543", "10000000000\n2000000000\n3000000000\n1500000000", "314159265358979\n271828182845904\n461168601842738\n31415926535897", "7\n6\n8\n1", "1\n1\n2\n1", "100\n50\n75\n25"]}
{"name": "626_C. Block Towers", "description": "Input\n\nThe first line of the input contains two space-separated integers n and m (0 <= n, m <= 1 000 000, n + m > 0) --- the number of students using two-block pieces and the number of students using three-block pieces, respectively.", "testcase": ["2 3", "0 1", "1000000 0", "123456 78910", "999999 1", "300 700000", "500500 500500", "0 1000000", "1 999999", "250000 250000"]}
{"name": "628_A. Tennis Tournament", "description": "Input\n\nThe only line contains three integers n, b, p (1 <= n, b, p <= 500) --- the number of participants and the parameters described in the problem statement.", "testcase": ["1 1 1", "500 500 500", "250 123 456", "128 64 32", "299 299 299", "89 67 45", "432 111 222", "365 250 125", "12 8 5", "111 49 350"]}
{"name": "630_A. Again Twenty Five!", "description": "Input\n\nThe only line of the input contains a single integer n (2 <= n <= 2.10^18) --- the power in which you need to raise number 5.", "testcase": ["2", "3", "4", "5", "10", "1000", "999999999999999999", "15000000000000000", "123456789123456789", "987654321987654321"]}
{"name": "633_A. Ebony and Ivory", "description": "Input\n\nThe first line of the input contains three integers a, b, c (1 <= a, b <= 100, 1 <= c <= 10 000) --- the number of units of damage dealt by Ebony gun and Ivory gun, and the total number of damage required to break the shield, respectively.", "testcase": ["10 25 5000", "1 100 10000", "50 50 3000", "99 99 10000", "15 60 7500", "70 30 2000", "33 44 6543", "88 11 9800", "25 75 4500", "100 1 9999"]}
{"name": "634_B. XOR Equation", "description": "Input\n\nThe first line of the input contains two integers s and x (2 <= s <=10^12, 0 <= x <=10^12), the sum and bitwise xor of the pair of positive integers, respectively.", "testcase": ["3 1", "15 5", "1024 16", "1000000000000 999999999999", "500000000000 123456789", "987654321098 123456789", "4294967296 2147483648", "99999999999 88888888888", "666666666666 333333333333", "314159265359 271828182845"]}
{"name": "656_C. Without Text", "description": "Input\n\nThe only line of the input is a string (between 1 and 50 characters long, inclusive). Each character will be an alphanumeric character or a full stop \".\".", "testcase": ["A1.B2.C3", "1234567890", "a.b.c.d.e.f", "ZXY0987654.", ".1X2Y3Z.", "abcdefghijklmnopqrstuvwxy", "Hello.World123", "Test.Case.50.Char.Limits.lmnopqrstuv.123", "42", "."]}
{"name": "65_A. Harry Potter and Three Spells", "description": "Input\n\nThe first line contains 6 integers a, b, c, d, e, f (0 <= a, b, c, d, e, f <= 1000).", "testcase": ["0 0 0 0 0 0", "10 20 30 40 50 60", "1000 999 998 1000 997 996", "1 2 3 4 5 6", "123 456 789 101 202 303", "500 500 500 500 500 500", "200 100 300 400 500 600", "999 1000 0 1 2 3", "777 888 999 111 222 333", "0 1000 500 250 750 800"]}
{"name": "675_A. Infinite Sequence", "description": "Input\n\nThe first line of the input contain three integers a, b and c ( - 109 <= a, b, c <=10^9) --- the first element of the sequence, Vasya's favorite number and the difference between any two neighbouring elements of the sequence, respectively.", "testcase": ["-109 0 1", "1000000000 500000000 1000000", "0 -999999999 -100", "-500000000 123456789 987654321", "999999999 -999999999 0", "-999999999 999999999 -999999999", "1 1 -1", "-100000000 42 100000000", "500000000 -500000000 500000000", "123456789 -987654321 -123456789"]}
{"name": "680_A. Bear and Five Cards", "description": "Input\n\nThe only line of the input contains five integers t1, t2, t3, t4 and t5 (1 <= ti <= 100) --- numbers written on cards.", "testcase": ["10 20 30 40 50", "1 1 1 1 1", "99 88 77 66 55", "2 4 6 8 10", "100 100 100 100 100", "34 67 89 23 41", "3 7 11 13 17", "15 15 15 15 15", "73 82 91 47 56", "18 36 54 72 90"]}
{"name": "680_D. Bear and Tower of Cubes", "description": "Input\n\nThe only line of the input contains one integer m (1 <= m <=10^15), meaning that Limak wants you to choose X between 1 and m, inclusive.", "testcase": ["1", "2", "100", "999999999999999", "500000000000000", "32767", "100000000000007", "99999999999999", "42", "777777777777777"]}
{"name": "688_B. Lovely Palindromes", "description": "Input\n\nThe only line of the input contains a single integer n (1 <= n <= 10^100 000).", "testcase": ["1", "99999", "123456789123456789123456789", "100000000000000000000000000000000", "2", "567890987654321012345678909876543210987654321234567890", "9999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999999998", "42", "3141592653589793238462643383279502884197169399375105820974944592", "2718281828459045235360287471352662497757247093699959574966967627"]}
{"name": "690_A1. Collective Mindsets (easy)", "description": "Input\n\nThe only line of input contains one integer: N, the number of attendees (1 <= N <=10^9).", "testcase": ["1", "10", "100", "123456789", "999999999", "500000000", "87654321", "99999", "1000000000", "17"]}
{"name": "690_F1. Tree of Life (easy)", "description": "Input\n\nThe first line of the input contains a single integer n -- the number of vertices in the tree (1 <= n <= 10000). The vertices are labeled with the numbers from 1 to n. Then n - 1 lines follow, each describing one edge using two space-separated numbers a b -- the labels of the vertices connected by the edge (1 <= a < b <= n). It is guaranteed that the input represents a tree.", "testcase": ["3\n1 2\n2 3", "4\n1 2\n2 3\n3 4", "5\n1 2\n1 3\n1 4\n1 5", "6\n1 2\n2 3\n3 4\n4 5\n5 6", "7\n1 2\n1 3\n2 4\n2 5\n4 6\n4 7", "8\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n7 8", "9\n1 2\n2 3\n4 5\n5 3\n6 3\n3 7\n7 8\n8 9", "10\n1 2\n2 3\n2 4\n4 5\n4 6\n6 7\n7 8\n8 9\n9 10", "6\n1 2\n1 3\n2 4\n4 5\n4 6", "5\n1 2\n2 3\n2 4\n3 5"]}
{"name": "699_C. Vacations", "description": "Input\n\nThe first line contains a positive integer n (1 <= n <= 100) --- the number of days of Vasya's vacations.\n\nThe second line contains the sequence of integers a1, a2, ..., an (0 <= ai <= 3) separated by space, where: \n\n  * ai equals 0, if on the i-th day of vacations the gym is closed and the contest is not carried out; \n  * ai equals 1, if on the i-th day of vacations the gym is closed, but the contest is carried out; \n  * ai equals 2, if on the i-th day of vacations the gym is open and the contest is not carried out; \n  * ai equals 3, if on the i-th day of vacations the gym is open and the contest is carried out.", "testcase": ["5\n1 0 2 1 0", "10\n3 3 3 3 3 3 3 3 3 3", "3\n0 0 0", "1\n2", "7\n2 1 0 2 2 1 3", "4\n3 1 3 2", "6\n2 2 0 1 0 3", "8\n1 1 1 1 2 2 2 2", "9\n0 2 1 3 3 1 0 2 2", "2\n1 3"]}
{"name": "709_D. Recover the String", "description": "Input\n\nThe only line of the input contains four non-negative integers a00, a01, a10 and a11. Each of them doesn't exceed 109.", "testcase": ["0 0 0 0", "1 2 3 4", "5 8 13 21", "34 55 89 144", "233 377 610 987", "1597 2584 4181 6765", "10946 17711 28657 46368", "75025 121393 196418 317811", "514229 832040 1346269 2178309", "1346269 2178309 3524578 5702887"]}
{"name": "710_E. Generate a String", "description": "Input\n\nThe only line contains three integers n, x and y (1 <= n <=10^7, 1 <= x, y <=10^9) --- the number of letters 'a' in the input file and the parameters from the problem statement.", "testcase": ["3 10 20", "1 250000000 500000000", "10000000 100000000 999999999", "7 1 1000000000", "999 7654 234567", "1234567 123456 78901234", "5000000 987654321 123456789", "100 1 2", "2500000 333333333 444444444", "42 9999999 1000000000"]}
{"name": "716_D. Complete The Graph", "description": "Input\n\nThe first line contains five integers n, m, L, s, t (2 <= n <= 1000, 1 <= m <= 10 000, 1 <= L <=10^9, 0 <= s, t <= n - 1, s != t) --- the number of vertices, number of edges, the desired length of shortest path, starting vertex and ending vertex respectively.\n\nThen, m lines describing the edges of the graph follow. i-th of them contains three integers, ui, vi, wi (0 <= ui, vi <= n - 1, ui != vi, 0 <= wi <=10^9). ui and vi denote the endpoints of the edge and wi denotes its weight. If wi is equal to 0 then the weight of the corresponding edge was erased.\n\nIt is guaranteed that there is at most one edge between any pair of vertices.", "testcase": ["5 5 100 0 4\n0 1 50\n1 2 0\n2 3 25\n3 4 25\n0 3 60", "3 3 200 1 2\n0 1 100\n1 2 100\n0 2 0", "4 4 300 2 3\n0 1 0\n1 2 150\n2 3 150\n0 2 200", "4 5 1000 1 3\n0 1 500\n1 2 0\n1 3 500\n2 3 0\n0 3 800", "6 7 120 0 5\n0 1 70\n1 2 50\n1 5 0\n2 3 30\n3 4 20\n4 5 50\n2 5 100", "2 1 1000000000 0 1\n0 1 1000000000", "10 15 12345 0 9\n0 1 1000\n1 2 1500\n2 3 1600\n3 4 2000\n4 5 0\n5 6 1000\n6 7 3000\n7 8 1700\n8 9 0\n5 9 1230\n0 3 5000\n0 2 150\n1 3 200\n1 5 600\n7 9 400", "5 6 500 3 0\n0 1 100\n1 2 200\n2 3 0\n3 4 250\n0 4 300\n1 3 150", "8 8 98765 7 0\n0 1 40000\n1 2 30000\n2 3 20000\n3 4 5000\n4 5 2500\n5 6 12500\n6 7 0\n0 7 98765", "7 10 88888 6 1\n0 1 44444\n1 2 0\n1 3 37000\n2 4 11000\n3 4 22000\n4 5 33000\n5 6 0\n0 2 7000\n0 3 21000\n4 6 40000"]}
{"name": "727_A. Transformation: from A to B", "description": "Input\n\nThe first line contains two positive integers a and b (1 <= a < b <=10^9) --- the number which Vasily has and the number he wants to have.", "testcase": ["1 2", "3 1000000000", "12345678 87654321", "2 3", "42 560", "100 10001", "99999999 100000000", "314159 2718281", "8 88888888", "234 567890"]}
{"name": "730_G. Car Repair Shop", "description": "Input\n\nThe first line contains integer n (1 <= n <= 200) --- the number of requests from clients.\n\nThe following n lines contain requests, one request per line. The i-th request is given as the pair of integers si, di (1 <= si <=10^9, 1 <= di <= 5.10^6), where si is the preferred time to start repairing the i-th car, di is the number of days to repair the i-th car.\n\nThe requests should be processed in the order they are given in the input.", "testcase": ["3\n1 5000000\n5 1000\n9 2500000", "4\n10000000 100000\n20000000 500000\n30000000 200000\n40000000 1000000", "1\n123456789 2345678", "5\n7 365\n365 3650\n3650 1825\n30 90\n90 30", "2\n987654321 7654321\n123456789 1234567", "6\n1 10\n2 20\n3 30\n4 40\n5 50\n6 60", "10\n5000000 1000\n1000000 2000\n1500000 3000\n2000000 4000\n2500000 5000\n3000000 6000\n3500000 7000\n4000000 8000\n4500000 9000\n5000000 10000", "7\n2222222 1000\n3333333 2000\n4444444 3000\n5555555 4000\n6666666 5000\n7777777 6000\n8888888 7000", "8\n500 100\n1000 100\n1500 100\n2000 100\n2500 100\n3000 100\n3500 100\n4000 100", "9\n100 1000\n200 2000\n300 3000\n400 4000\n500 5000\n600 6000\n700 7000\n800 8000\n900 9000"]}
{"name": "733_A. Grasshopper And the String", "description": "Input\n\nThe first line contains non-empty string consisting of capital English letters. It is guaranteed that the length of the string does not exceed 100.", "testcase": ["A", "X", "HELLOWORLD", "ABCDEFGHIJ", "TESTCASE", "PROBLEM", "STRING", "COMPUTER", "JSONFORMAT", "SPECIFICATION"]}
{"name": "736_B. Taxes", "description": "Input\n\nThe first line of the input contains a single integer n (2 <= n <= 2.10^9) --- the total year income of mr. Funt.", "testcase": ["2", "2000000000", "150000000", "984353299", "300000000", "678905432", "789012345", "123456789", "2147483647", "2001000000"]}
{"name": "742_A. Arpa’s hard exam and Mehrdad’s naive cheat", "description": "Input\n\nThe single line of input contains one integer n (0 <= n <=10^9).", "testcase": ["0", "1", "987654321", "123456789", "500000000", "999999999", "1000000000", "42", "847", "4096"]}
{"name": "746_A. Compote", "description": "Input\n\nThe first line contains the positive integer a (1 <= a <= 1000) --- the number of lemons Nikolay has. \n\nThe second line contains the positive integer b (1 <= b <= 1000) --- the number of apples Nikolay has. \n\nThe third line contains the positive integer c (1 <= c <= 1000) --- the number of pears Nikolay has.", "testcase": ["2\n3\n1", "500\n600\n10", "1000\n1\n500", "1\n1000\n999", "123\n456\n789", "250\n250\n250", "7\n8\n9", "999\n999\n999", "100\n200\n300", "1\n1\n1"]}
{"name": "74_C. Chessboard Billiard", "description": "Input\n\nThe first line contains two integers n and m (2 <= n, m <=10^6.", "testcase": ["2 2", "10 1000", "500000 500000", "200000 800000", "100 500", "234567 876543", "1000000 1000000", "678910 123456", "999999 1000000", "2 10"]}
{"name": "758_A. Holiday Of Equality", "description": "Input\n\nThe first line contains the integer n (1 <= n <= 100) --- the number of citizens in the kingdom.\n\nThe second line contains n integers a1, a2, ..., an, where ai (0 <= ai <= 10^6) --- the welfare of the i-th citizen.", "testcase": ["3\n1 2 3", "5\n1000000 1000000 1000000 1000000 1000000", "1\n0", "10\n12345 23456 34567 45678 56789 67890 78901 89012 90123 1234", "7\n500000 600000 700000 800000 300000 200000 100000", "4\n0 0 0 0", "8\n999999 888888 777777 666666 555555 444444 333333 222222", "2\n435 342", "6\n234 567 890 123 345 678", "9\n87654 23456 65432 12345 98765 43210 34567 78901 123456"]}
{"name": "760_B. Frodo and pillows", "description": "Input\n\nThe only line contain three integers n, m and k (1 <= n <= m <=10^9, 1 <= k <= n) --- the number of hobbits, the number of pillows and the number of Frodo's bed.", "testcase": ["10 20 1", "5 10 2", "15 30 15", "100000000 200000000 50000000", "7 14 3", "10000000 15000000 123456", "55 110 13", "234 468 117", "500 1000 250", "33333 66666 11111"]}
{"name": "766_B. Mahmoud and a Triangle", "description": "Input\n\nThe first line contains single integer n (3 <= n <= 10^5) --- the number of line segments Mahmoud has.\n\nThe second line contains n integers a1, a2, ..., an (1 <= ai <= 10^9) --- the lengths of line segments Mahmoud has.", "testcase": ["5\n1 2 3 4 5", "3\n10 20 30", "6\n1000000000 1000000000 1000000000 1000000000 1000000000 1000000000", "4\n10 10 10 10", "7\n1 2 3 4 5 6 100", "3\n999999997 999999998 999999999", "5\n100 200 300 400 500", "8\n1 8 27 64 125 216 343 512", "10\n3 1 4 1 5 9 2 6 5 3", "3\n500000000 500000000 500000000"]}
{"name": "784_D. Touchy-Feely Palindromes", "description": "Input\n\nThe only line of the input contains a string of digits. The length of the string is between 1 and 10, inclusive.", "testcase": ["0", "1234567890", "31337", "123", "7", "4815162342", "42", "999999999", "8675309", "2468"]}
{"name": "791_A. Bear and Big Brother", "description": "Input\n\nThe only line of the input contains two integers a and b (1 <= a <= b <= 10) --- the weight of Limak and the weight of Bob respectively.", "testcase": ["1 1", "2 5", "3 3", "1 10", "4 4", "2 8", "5 5", "6 9", "7 7", "1 2"]}
{"name": "797_A. k-Factorization", "description": "Input\n\nThe first line contains two integers n and k (2 <= n <= 100000, 1 <= k <= 20).", "testcase": ["3 1\n", "100000 20\n", "4567 13\n", "8746 7\n", "22222 5\n", "8421 19\n", "99999 2\n", "23456 10\n", "54321 17\n", "12345 8\n"]}
{"name": "798_A. Mike and palindrome", "description": "Input\n\nThe first and single line contains string s (1 <= |s| <= 15).", "testcase": ["a", "Example", "ShortTest", "1234567890", "abcdefghij", "K1tt3n$", "P@ssw0rd", "LongerThan15CharsButLess", "1", "Mixed123"]}
{"name": "804_A. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "10", "100", "99999", "54321", "12345", "23456", "34567", "45678", "56789"]}
{"name": "805_A. Fake NP", "description": "Input\n\nThe first line contains two integers l and r (2 <= l <= r <=10^9).", "testcase": ["2 3", "10 20", "100 200", "250 500", "123456 789012", "999999 1000000", "500000 800000", "234567 345678", "111111 999999", "999999 1000000"]}
{"name": "805_C. Find Amir", "description": "Input\n\nThe first line contains a single integer n (1 <= n <=10^5) --- the number of schools.", "testcase": ["1", "2", "10", "99999", "54321", "100000", "12345", "42", "999", "50000"]}
{"name": "822_A. I'm bored with life", "description": "Input\n\nThe first and single line contains two integers A and B (1 <= A, B <=10^9, min(A, B) <= 12).", "testcase": ["1 2", "12 200000000", "3 999999999", "11 11", "5 123456789", "12 5000000", "8 888888888", "7 76543210", "2 1000000000", "6 654321"]}
{"name": "835_A. Key races", "description": "Input\n\nThe first line contains five integers s, v1, v2, t1, t2 (1 <= s, v1, v2, t1, t2 <= 1000) --- the number of characters in the text, the time of typing one character for the first participant, the time of typing one character for the the second participant, the ping of the first participant and the ping of the second participant.", "testcase": ["100 5 3 20 15", "250 2 4 5 7", "500 1 1 30 25", "300 6 5 10 12", "450 4 6 8 9", "123 7 8 13 11", "800 9 3 22 20", "350 2 3 15 17", "76 10 3 4 6", "620 5 5 14 18"]}
{"name": "841_B. Godsend", "description": "Input\n\nFirst line of input data contains single integer n (1 <= n <=10^6 --- length of the array.\n\nNext line contains n integers a1, a2, ..., an (0 <= ai <=10^9).", "testcase": ["1\n[0]", "5\n[10, 20, 30, 40, 50]", "2\n[1000000000, 0]", "3\n[123, 456, 789]", "10\n[1, 1, 1, 1, 1, 1, 1, 1, 1, 1]", "6\n[999999999, 888888888, 777777777, 666666666, 555555555, 444444444]", "7\n[0, 0, 0, 0, 0, 0, 0]", "4\n[10, 9, 8, 7]", "8\n[1, 2, 4, 8, 16, 32, 64, 128]", "10\n[100, 200, 300, 400, 500, 600, 700, 800, 900, 1000]"]}
{"name": "854_B. Maxim Buys an Apartment", "description": "Input\n\nThe only line of the input contains two integers: n and k (1 <= n <=10^9, 0 <= k <= n).", "testcase": ["1 0", "10 5", "999999999 123456789", "1000000000 0", "500000000 250000000", "2 1", "100 50", "1000000000 999999999", "123456789 0", "100000000 50000000"]}
{"name": "864_C. Bus", "description": "Input\n\nThe first line contains four integers a, b, f, k (0 < f < a <= 106, 1 <= b <=10^9, 1 <= k <=10^4) --- the endpoint of the first bus journey, the capacity of the fuel tank of the bus, the point where the gas station is located, and the required number of journeys.", "testcase": ["10 50 5 2", "1000000 500000 250000 10", "500 1000 250 7", "999999 1000000000 499999 10000", "100 10 1 15", "300 500 150 3", "5000 2000 499 40", "850000 900000 425000 999", "450 800 225 8", "999 5000 100 1000"]}
{"name": "867_C. Ordering Pizza", "description": "Input\n\nThe first line of input will contain integers N and S (1 <= N <=10^5, 1 <= S <=10^5), the number of contestants and the number of slices per pizza, respectively. N lines follow.\n\nThe i-th such line contains integers si, ai, and bi (1 <= si <=10^5, 1 <= ai <=10^5, 1 <= bi <=10^5), the number of slices the i-th contestant will eat, the happiness they will gain from each type 1 slice they eat, and the happiness they will gain from each type 2 slice they eat, respectively.", "testcase": ["2 8\n5 10 20\n3 15 25", "3 6\n4 35 15\n2 20 30\n5 25 5", "1 10\n10 50 40", "4 10\n1 100 200\n3 150 100\n7 80 70\n2 60 90", "5 5\n1 10 20\n2 30 40\n1 15 25\n2 50 60\n3 70 80", "7 10\n9 30 20\n6 40 20\n3 25 35\n5 50 45\n2 10 5\n7 35 25\n1 20 15", "6 4\n1 10 10\n1 20 20\n1 30 30\n1 40 40\n1 50 50\n1 60 60", "8 8\n3 12 6\n2 6 12\n7 14 16\n5 20 10\n6 15 22\n4 8 8\n1 10 10\n8 18 20", "3 12\n6 45 55\n6 60 65\n12 50 45", "10 20\n5 15 10\n10 25 20\n20 30 40\n15 35 30\n10 40 50\n5 20 25\n15 45 50\n5 50 45\n10 60 55\n20 70 65"]}
{"name": "87_A. Trains", "description": "Input\n\nThe first line contains two integers a and b (a != b, 1 <= a, b <=10^6.", "testcase": ["1 2", "17 456789", "345 678", "999999 100000", "254679 847362", "3 999997", "7458 7459", "128 256", "65535 65534", "121 122"]}
{"name": "87_C. Interesting Game", "description": "Input\n\nThe single line contains a single integer n (1 <= n <=10^5).", "testcase": ["1", "2", "100", "99999", "12345", "67890", "23456", "98765", "55555", "43210"]}
{"name": "886_B. Vlad and Cafes", "description": "Input\n\nIn first line there is one integer n (1 <= n <= 2.10^5) --- number of cafes indices written by Vlad.\n\nIn second line, n numbers a1, a2, ..., an (0 <= ai <= 2.10^5) are written --- indices of cafes in order of being visited by Vlad. Vlad could visit some cafes more than once. Note that in numeration, some indices could be omitted.", "testcase": ["3\n1 2 3", "5\n5 3 2 1 3", "6\n10 20 10 20 30 40", "2\n200000 199999", "4\n12345 54321 12345 1", "7\n0 1 2 2 3 3 3", "1\n15", "10\n1000 2000 3000 4000 5000 4000 3000 2000 1000 100", "8\n123 234 345 456 567 678 789 890", "9\n150 300 450 600 750 900 1050 1200 1350"]}
{"name": "893_A. Chess For Three", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of games Alex, Bob and Carl played.\n\nThen n lines follow, describing the game log. i-th line contains one integer ai (1 <= ai <= 3) which is equal to 1 if Alex won i-th game, to 2 if Bob won i-th game and 3 if Carl won i-th game.", "testcase": ["3\n1\n2\n3", "5\n1\n1\n1\n1\n1", "1\n2", "10\n2\n3\n1\n3\n2\n1\n2\n2\n3\n1", "2\n3\n3", "4\n1\n1\n2\n2", "6\n2\n3\n1\n3\n2\n1", "7\n1\n2\n3\n1\n2\n3\n1", "9\n3\n2\n3\n1\n3\n3\n2\n2\n1", "8\n2\n1\n2\n3\n3\n2\n1\n1"]}
{"name": "903_A. Hungry Student Problem", "description": "Input\n\nThe first line contains one integer n (1 <= n <= 100) --- the number of testcases.\n\nThe i-th of the following n lines contains one integer xi (1 <= xi <= 100) --- the number of chicken chunks Ivan wants to eat.", "testcase": ["10\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10", "10\n20\n25\n30\n35\n40\n45\n50\n55\n60\n65", "10\n11\n12\n13\n14\n15\n16\n17\n18\n19\n20", "10\n21\n22\n23\n24\n25\n26\n27\n28\n29\n30", "10\n31\n32\n33\n34\n35\n36\n37\n38\n39\n40", "10\n41\n42\n43\n44\n45\n46\n47\n48\n49\n50", "10\n51\n52\n53\n54\n55\n56\n57\n58\n59\n60", "10\n61\n62\n63\n64\n65\n66\n67\n68\n69\n70", "10\n71\n72\n73\n74\n75\n76\n77\n78\n79\n80", "10\n81\n82\n83\n84\n85\n86\n87\n88\n89\n90"]}
{"name": "909_B. Segments", "description": "Input\n\nThe only input line contains a single integer N (1 <= N <= 100).", "testcase": ["1", "7", "22", "43", "56", "78", "85", "90", "99", "100"]}
{"name": "933_B. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["100 2000", "9999999999999999 1999", "5000000000000000 1500", "800000000000 345", "1234567890123456 678", "1 2", "10 100", "9876543210987654 2020", "31415926535897 2718", "705490000003629 1998"]}
{"name": "933_C. A Colourful Prospect", "description": "Input\n\nThe first line of input contains one integer n (1 <= n <= 3), denoting the number of circles.\n\nThe following n lines each contains three space-separated integers x, y and r ( - 10 <= x, y <= 10, 1 <= r <= 10), describing a circle whose center is (x, y) and the radius is r. No two circles have the same x, y and r at the same time.", "testcase": ["1\n3 5 2", "2\n-4 3 1\n7 -2 3", "3\n0 0 5\n8 6 2\n-7 -3 4", "3\n-10 10 1\n2 -2 2\n-3 6 3", "2\n4 4 4\n-5 -5 5", "3\n1 1 10\n-1 -1 9\n0 0 8", "1\n0 0 1", "2\n-9 5 3\n9 -5 2", "3\n10 -10 5\n5 5 7\n-5 -5 1", "1\n-3 2 4"]}
{"name": "934_D. A Determined Cleanup", "description": "Input\n\nThe only line of input contains two space-separated integers p and k (1 <= p <=10^18, 2 <= k <= 2 000).", "testcase": ["1 2", "999999999999999999 2000", "500 100", "10000000000000000 1999", "123456789 1234", "987654321987654321 456", "135791357913579135 789", "246802468024680 1600", "102030405060708090 333", "17 2017"]}
{"name": "937_A. Olympiad", "description": "Input\n\nThe first line contains a single integer n (1 <= n <= 100) --- the number of participants.\n\nThe next line contains a sequence of n integers a1, a2, ..., an (0 <= ai <= 600) --- participants' scores.\n\nIt's guaranteed that at least one participant has non-zero score.", "testcase": ["3\n100 200 300", "1\n450", "5\n0 0 1 0 0", "4\n600 600 600 600", "10\n0 50 100 150 200 250 300 350 400 450", "7\n10 20 30 40 50 60 70", "2\n300 301", "8\n1 2 3 4 5 6 7 8", "6\n0 100 0 200 0 300", "9\n599 598 1 0 0 0 0 0 0"]}
{"name": "950_A. Left-handers, Right-handers and Ambidexters", "description": "Input\n\nThe only line contains three integers l, r and a (0 <= l, r, a <= 100) --- the number of left-handers, the number of right-handers and the number of ambidexters at the training.", "testcase": ["0 0 0", "10 20 5", "5 5 10", "15 15 15", "0 50 50", "33 33 33", "100 100 100", "42 24 6", "80 20 0", "99 0 1"]}
{"name": "959_E. Mahmoud and Ehab and the xor-MST", "description": "Input\n\nThe only line contains an integer n (2 <= n <=10^12), the number of vertices in the graph.", "testcase": ["3", "4", "10", "100", "999", "123456789", "987654321", "999999999", "1000000000", "999999999999"]}
{"name": "987_B. High School: Become Human", "description": "Input\n\nOn the only line of input there are two integers x and y (1 <= x, y <= 10^{9}).", "testcase": ["1 1", "123 456", "999999999 999999999", "500000000 123456789", "12 34", "100000000 200000000", "250000000 750000000", "987654321 123456789", "314159265 271828182", "100000001 100000002"]}
{"name": "997_B. Roman Digits", "description": "Input\n\nThe only line of the input file contains a single integer n (1 <= n <= 10^9) --- the number of roman digits to use.", "testcase": ["1", "10", "100", "999999999", "500000000", "250000", "123456789", "987654321", "12345", "67890"]}
{"name": "999_A. Mishka and Contest", "description": "Input\n\nThe first line of input contains two integers n and k (1 <= n, k <= 100) --- the number of problems in the contest and Mishka's problem-solving skill.\n\nThe second line of input contains n integers a_1, a_2, ..., a_n (1 <= a_i <= 100), where a_i is the difficulty of the i-th problem. The problems are given in order from the leftmost to the rightmost in the list.", "testcase": ["5 3\n4 2 7 1 8", "10 10\n10 20 30 40 50 60 70 80 90 100", "2 1\n1 1", "8 4\n3 1 9 12 5 4 8 6", "7 7\n14 15 16 21 22 23 24", "3 2\n2 5 3", "6 5\n10 11 12 13 14 15", "4 4\n9 9 9 9", "9 8\n17 11 25 14 23 19 6 8 27", "1 1\n50"]}
{"name": "99_C. Help Victoria the Wise", "description": "Input\n\nThe first line contains exactly 6 characters without spaces from the set {R, O, Y, G, B, V} --- they are the colors of gems with which the box should be decorated.", "testcase": ["ROYGBV", "YGROBV", "BYGROV", "VBROYG", "GRBOVY", "OYVBRG", "RGBVOY", "BROYGV", "YRVGOB", "OVBRGY"]}
{"name": "9_A. Die Roll", "description": "Input\n\nThe only line of the input file contains two natural numbers Y and W --- the results of Yakko's and Wakko's die rolls.", "testcase": ["4 5", "6 1", "2 3", "3 4", "5 2", "1 6", "3 3", "4 6", "2 5", "6 6"]}
{"name": "p00357 Trampoline", "description": "Input\n\nThe input is given in the following format.\n\n\nN\nd_1\nd_2\n:\nd_N\n\n\nThe first line provides the number of trampolines N (2 <= N <= 3 × 105). Each of the subsequent N lines gives the maximum allowable jumping distance in integer meters for the i-th trampoline d_i (1 <= d_i <=10^6.", "testcase": ["3\n1\n3\n2", "2\n1000000\n1000000", "4\n500\n400\n300\n200", "5\n1\n2\n1\n2\n1", "3\n123456\n789012\n345678", "6\n999999\n888888\n777777\n666666\n555555\n444444", "3\n900\n800\n700", "7\n1\n2\n3\n4\n5\n6\n7", "5\n100\n200\n300\n400\n500", "10\n10\n20\n30\n40\n50\n60\n70\n80\n90\n100"]}
{"name": "p02127 AABABCAC", "description": "Input\n\nThe input is given in the following format.\n\n\n$ s $\n$ t $\n\n\nThe string $ s $ is given on the first line, and the string $ t $ is given on the second line.", "testcase": [""]}
{"name": "p02257 Prime Numbers", "description": "Input\n\nThe first line contains an integer N, the number of elements in the list.\n\nN numbers are given in the following lines.", "testcase": ["3\n1\n2\n3", "4\n10\n20\n30\n40", "5\n-1\n-2\n-3\n-4\n-5", "2\n100\n200", "1\n0", "6\n-1\n1\n-2\n2\n-3\n3", "10\n9\n8\n7\n6\n5\n4\n3\n2\n1\n0", "7\n10\n20\n30\n40\n50\n60\n70", "8\n-8\n7\n-6\n5\n-4\n3\n-2\n1", "2\n2147483647\n-2147483648"]}
{"name": "p02259 Bubble Sort", "description": "Input\n\nThe first line of the input includes an integer N, the number of elements in the sequence.\n\nIn the second line, N elements of the sequence are given separated by spaces characters.", "testcase": ["3\n4 5 6", "5\n1 2 3 4 5", "2\n-1 0", "4\n10 20 30 40", "6\n-3 -2 -1 1 2 3", "1\n42", "7\n3 1 4 1 5 9 2", "8\n2 4 6 8 10 12 14 16", "10\n0 0 0 0 0 0 0 0 0 0", "9\n-9 -8 -7 -6 -5 -4 -3 -2 -1"]}
{"name": "p02271 Exhaustive Search", "description": "Constraints\n\n* n <= 20\n* q <= 200\n* 1 <= elements in A <= 2000\n* 1 <= Mi <= 2000\n\nInput\n\nIn the first line n is given. In the second line, n integers are given. In the third line q is given. Then, in the fourth line, q integers (Mi) are given.", "testcase": ["5\n[187, 234, 456, 789, 1234]\n3\n[234, 789, 1235]", "10\n[80, 1, 999, 500, 1500, 675, 200, 432, 987, 1230]\n5\n[2000, 987, 123, 1501, 432]", "20\n[12, 53, 673, 198, 1987, 1390, 145, 76, 364, 2000, 22, 932, 783, 287, 1111, 1456, 1678, 1999, 345, 1000]\n10\n[1999, 673, 783, 364, 22, 198, 932, 1000, 53, 287]", "8\n[39, 435, 802, 1023, 12, 200, 150, 1986]\n2\n[1000, 435]", "15\n[2000, 1020, 50, 678, 999, 1500, 775, 34, 789, 250, 420, 1600, 123, 390, 1980]\n6\n[1020, 678, 50, 999, 2000, 1980]", "7\n[1345, 259, 476, 1995, 986, 15, 275]\n4\n[986, 1345, 259, 15]", "1\n[645]\n1\n[645]", "12\n[123, 456, 789, 1011, 1213, 1415, 1617, 1820, 1001, 202, 303, 404]\n4\n[1001, 1011, 789, 202]", "16\n[2000, 1984, 1678, 1239, 1110, 999, 890, 789, 678, 567, 456, 345, 234, 123, 50, 10]\n5\n[1984, 1110, 50, 123, 10]", "2\n[1, 2000]\n2\n[1, 2000]"]}
{"name": "p02320 Knapsack Problem with Limitations", "description": "Input\n\n\nN W\nv1 w1 m1\nv2 w2 m2\n:\nvN wN mN\n\n\nThe first line consists of the integers N and W. In the following N lines, the value, weight and limitation of the i-th item are given.", "testcase": ["3 50\n10 10 1\n20 20 2\n30 10 1", "4 100\n50 50 1\n60 20 2\n70 60 1\n30 10 3", "2 15\n5 5 3\n10 8 2", "5 200\n100 50 2\n200 100 1\n300 120 1\n150 60 2\n50 30 3", "1 10\n5 5 1", "6 250\n40 20 2\n50 50 4\n60 70 2\n70 40 3\n20 10 4\n10 5 5", "7 300\n20 10 2\n30 15 2\n50 20 1\n60 25 2\n40 30 3\n70 50 1\n100 60 1", "3 40\n10 20 1\n15 25 1\n5 5 2", "4 75\n25 15 2\n35 25 1\n45 20 1\n10 10 3", "8 150\n10 7 3\n20 15 4\n13 8 2\n17 11 2\n25 14 1\n30 20 2\n8 5 3\n45 30 1"]}
{"name": "p02390 Watch", "description": "Constraints\n\n* $0 <= S <= 86400$\n\nInput\n\nAn integer $S$ is given in a line.", "testcase": ["0", "43200", "86400", "12345", "23456", "34567", "45678", "56789", "67890", "78901"]}
{"name": "p02417 Counting Characters", "description": "Constraints\n\n* The number of characters in the sentence < 1200\n\nInput\n\nA sentence in English is given in several lines.", "testcase": ["Hello, this is a single line sentence without any special complexity or challenges.", "This sentence\nhas a newline character.\nIt is split\nacross several lines.", "Here's a sentence with a variety of punctuation marks: commas, periods, semicolons; and colons: all included!", "Short.", "Despite the seeming complexity of this particular example, it remains comfortably under the maximum character limit prescribed by the constraints, and also it spans multiple lines\nwhich is allowed by the given input specifications.", "1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890\n1234567890.", "Words, words, words. Sentences can be made of many words, or just a few; what really matters is not the number of words, but the message they convey.", "Lists can be included in sentences as well, such as:\n- Apples\n- Bananas\n- Cherries\nThis is especially useful for readability!", "Can a sentence be a question? Of course!\nWhat about exclamatory sentences? Absolutely!", "Talking about code in a sentence should be okay, as long as it's not actual code, for example: 'When writing in Python, don't forget to define your functions clearly.'"]}
{"name": "p02594 AtCoder Beginner Contest 174 - Air Conditioner", "description": "Constraints\n\n* -40 <= X <= 40\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["12", "0", "-5", "38", "-40", "27", "-15", "11", "2", "40"]}
{"name": "p02600 M-SOLUTIONS Programming Contest 2020 - Kyu in AtCoder", "description": "Constraints\n\n* 400 <= X <= 1999\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["400", "1234", "1500", "1750", "1999", "1800", "1600", "1425", "1876", "1987"]}
{"name": "p02612 AtCoder Beginner Contest 173 - Payment", "description": "Constraints\n\n* 1 <= N <= 10000\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "10000", "543", "9999", "27", "837", "2000", "4096", "1024", "5000"]}
{"name": "p02628 AtCoder Beginner Contest 171 - Mix Juice", "description": "Constraints\n\n* 1 <= K <= N <= 1000\n* 1 <= p_i <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\np_1 p_2 ... p_N", "testcase": ["3 2\n1 2 3", "4 1\n1000 500 250 125", "5 3\n10 20 30 40 50", "6 4\n123 456 789 101 112 131", "7 3\n7 8 9 10 11 12 13", "10 10\n1 1 1 1 1 1 1 1 1 1", "8 5\n56 78 87 65 54 32 21 34", "9 7\n14 15 16 17 18 19 20 21 22", "4 2\n800 700 900 600", "7 2\n300 400 250 350 200 450 500"]}
{"name": "p02675 AtCoder Beginner Contest 168 - ∴ (Therefore)", "description": "Constraints\n\n* N is a positive integer not exceeding 999.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "25", "999", "500", "333", "42", "876", "100", "250", "745"]}
{"name": "p02680 AtCoder Beginner Contest 168 - . (Single Dot)", "description": "Constraints\n\n* All values in input are integers between -10^9 and 10^9 (inclusive).\n* 1 <= N, M <= 1000\n* A_i < B_i\\ (1 <= i <= N)\n* E_j < F_j\\ (1 <= j <= M)\n* The point (0, 0) does not lie on any of the given segments.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1 C_1\n:\nA_N B_N C_N\nD_1 E_1 F_1\n:\nD_M E_M F_M", "testcase": ["2 2\n1 3 5\n-2 4 5\n3 4 3\n0 1 2", "1 1\n-999999999 999999999 -5\n1000000 -100000 1", "3 1\n-10 10 -20\n10 20 30\n-30 -20 15\n-5 5 10", "2 3\n1 2 3\n3 4 -3\n-1 1 0\n2 3 2\n-3 -2 1", "4 2\n100000 200000 150000\n-100000 -50000 0\n50000 150000 100000\n600000 700000 650000\n1 2 3\n2 3 4", "5 2\n-1 -2 -3\n2 3 4\n5 6 7\n8 9 10\n11 12 13\n-3 -2 -1\n3 5 1", "1 3\n-1000000 1000000 500000\n0 3 2\n-2 -1 1\n1 2 -1", "3 3\n0 10 20\n-20 0 15\n10 20 -25\n-3 3 6\n2 4 8\n-10 -5 -7", "2 1\n100 200 150\n-200 -100 -150\n0 2 1", "5 5\n5 6 7\n4 5 9\n-9 -8 1\n-2 -1 2\n-4 -3 3\n-5 -3 -2\n0 1 2\n1 2 3\n2 3 4\n3 4 5"]}
{"name": "p02693 AtCoder Beginner Contest 165 - We Love Golf", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 1000\n* 1 <= K <= 1000\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK\nA B", "testcase": ["2\n1 10", "1000\n100 1000", "5\n25 30", "7\n1 1000", "1\n500 500", "15\n200 300", "10\n100 200", "3\n333 999", "25\n10 20", "50\n850 900"]}
{"name": "p02696 AtCoder Beginner Contest 165 - Floor Function", "description": "Constraints\n\n* 1 <= A <= 10^{6}\n* 1 <= B <= 10^{12}\n* 1 <= N <= 10^{12}\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B N", "testcase": ["1 1 1", "999999 1000000000000 500000000000", "500000 999999999999 999999999999", "250000 500000000000 250000000000", "1000000 10000000000 100000000000", "1 1000000000000 2", "2 500000000000 10", "999999 1 1000000000000", "1000000 999999999999 1", "123456 789012345678 987654321012"]}
{"name": "p02708 AtCoder Beginner Contest 163 - Sum of Large Numbers", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* 1 <= K <= N+1\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K", "testcase": ["1 2", "200000 200001", "12345 12346", "54321 54322", "16384 16385", "32768 32769", "100000 100001", "150000 150000", "199999 200000", "2 3"]}
{"name": "p02718 AtCoder Beginner Contest 161 - Popular Vote", "description": "Constraints\n\n* 1 <= M <= N <= 100\n* 1 <= A_i <= 1000\n* A_i are distinct.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 ... A_N", "testcase": ["2 1\n1 1000", "5 3\n10 20 30 40 50", "10 10\n11 22 33 44 55 66 77 88 99 100", "3 2\n123 456 789", "4 1\n998 999 100 500", "7 4\n17 19 23 29 31 37 41", "6 3\n600 700 800 900 300 200", "8 2\n120 121 122 123 124 125 126 127", "9 5\n100 200 300 400 500 600 700 800 900", "2 2\n1 2"]}
{"name": "p02724 AtCoder Beginner Contest 160 - Golden Coins", "description": "Constraints\n\n* 0 <= X <= 10^9\n* X is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX", "testcase": ["0", "123", "999999999", "847364", "2147483647", "10", "505050", "987654321", "42", "999"]}
{"name": "p02801 AtCoder Beginner Contest 151 - Next Alphabet", "description": "Constraints\n\n* C is a lowercase English letter that is not `z`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nC", "testcase": ["a", "b", "c", "d", "e", "f", "g", "h", "i", "j"]}
{"name": "p02811 AtCoder Beginner Contest 150 - 500 Yen Coins", "description": "Constraints\n\n* 1 <= K <= 100\n* 1 <= X <= 10^5\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nK X", "testcase": ["1 50000", "20 85000", "99 657", "55 12345", "2 99999", "75 76543", "100 100000", "36 36580", "42 42000", "18 18000"]}
{"name": "p02862 AtCoder Beginner Contest 145 - Knight", "description": "Constraints\n\n* 1 <= X <= 10^6\n* 1 <= Y <= 10^6\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 1", "2 10", "999999 1000000", "500000 500000", "345 678", "17 981", "1000000 999999", "123456 654321", "42 42", "987654 123456"]}
{"name": "p02891 AtCoder Grand Contest 039 - Connection and Disconnection", "description": "Constraints\n\n* 1 <= |S| <= 100\n* S consists of lowercase English letters.\n* 1 <= K <= 10^9\n* K is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nK", "testcase": ["a\n1", "abc\n1000000000", "x\n10", "pqrst\n999999999", "hello\n123456789", "programming\n42", "testcase\n987654321", "lowercase\n1000000", "example\n999", "specification\n7"]}
{"name": "p02898 AtCoder Beginner Contest 142 - Roller Coaster", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= K <= 500\n* 1 <= h_i <= 500\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nh_1 h_2 ... h_N", "testcase": ["5 3\n1 2 3 4 5", "10 10\n10 10 10 10 10 10 10 10 10 10", "100 50\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100", "1 1\n1", "20 7\n13 24 32 45 56 43 21 76 89 90 100 120 130 145 156 170 183 194 200 210", "7 2\n1 3 5 7 9 11 13", "50 25\n250 240 230 220 210 200 190 180 170 160 150 140 130 120 110 100 90 80 70 60 50 40 30 20 10 9 8 7 6 5 4 3 2 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19", "6 1\n100 200 300 400 500 400", "100000 500\n", "5 5\n5 5 5 5 5"]}
{"name": "p02926 AtCoder Beginner Contest 139 - Engines", "description": "Constraints\n\n* 1 <= N <= 100\n* -1 \\ 000 \\ 000 <= x_i <= 1 \\ 000 \\ 000\n* -1 \\ 000 \\ 000 <= y_i <= 1 \\ 000 \\ 000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nx_1 y_1\nx_2 y_2\n: :\nx_N y_N", "testcase": ["3\n-999999 500000\n123456 789000\n-111111 222222", "5\n1000000 1000000\n-1000000 -1000000\n0 0\n500 -700\n-300 400", "1\n-1 -1", "4\n0 0\n0 1\n1 0\n1 1", "2\n999999 999999\n-999999 -999999", "6\n432123 -987654\n234567 876543\n-654321 -123456\n99999 -99999\n-50000 50000\n600000 -600000", "7\n1000000 0\n0 1000000\n-1000000 0\n0 -1000000\n500000 500000\n-500000 -500000\n-123456 654321", "10\n1000000 -1000000\n1000000 1000000\n-1000000 1000000\n-1000000 -1000000\n500000 -500000\n-500000 500000\n0 0\n-250000 -250000\n250000 250000\n-999999 999999", "8\n888888 888888\n-888888 888888\n888888 -888888\n-888888 -888888\n444444 444444\n-444444 444444\n444444 -444444\n-444444 -444444", "9\n100 200\n-300 400\n500 -600\n700 800\n-900 1000\n110 -220\n330 440\n-550 660\n770 -880"]}
{"name": "p02936 AtCoder Beginner Contest 138 - Ki", "description": "Constraints\n\n* 2 <= N <= 2 * 10^5\n* 1 <= Q <= 2 * 10^5\n* 1 <= a_i < b_i <= N\n* 1 <= p_j <= N\n* 1 <= x_j <= 10^4\n* The given graph is a tree.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN Q\na_1 b_1\n:\na_{N-1} b_{N-1}\np_1 x_1\n:\np_Q x_Q", "testcase": ["3 2\n1 2\n2 3\n1 100\n2 200", "4 1\n1 2\n2 3\n3 4\n4 500", "5 3\n1 2\n1 3\n2 4\n2 5\n3 100\n4 200\n5 300", "6 2\n1 2\n2 3\n3 4\n4 5\n5 6\n2 50\n5 150", "7 4\n1 2\n2 3\n3 4\n2 5\n5 6\n5 7\n7 10\n6 20\n2 30\n3 40", "8 3\n1 2\n1 3\n1 4\n2 5\n2 6\n3 7\n3 8\n8 888\n6 666\n5 555", "9 5\n1 2\n1 3\n2 4\n4 5\n5 6\n4 7\n7 8\n8 9\n3 30\n5 50\n7 70\n9 90\n2 20", "10 3\n1 2\n2 3\n3 4\n4 5\n2 6\n6 7\n7 8\n8 9\n9 10\n5 15\n6 60\n10 100", "5 1\n1 2\n2 3\n3 4\n4 5\n1 1234", "10 5\n1 2\n3 4\n4 5\n6 7\n7 8\n8 9\n9 10\n10 11\n5 5\n6 10\n7 15\n8 20\n9 25\n10 30"]}
{"name": "p02953 AtCoder Beginner Contest 136 - Build Stairs", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= H_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nH_1 H_2 ... H_N", "testcase": ["1\n1", "2\n1000000000 999999999", "5\n1 2 3 4 5", "3\n10 20 30", "10\n5 4 3 2 1 6 7 8 9 10", "6\n123456 789012 345678 901234 567890 234567", "4\n999999999 999999998 999999997 999999996", "7\n10 20 30 40 50 60 70", "8\n100000000 200000000 300000000 400000000 500000000 600000000 700000000 800000000", "9\n9 8 7 6 5 4 3 2 1"]}
{"name": "p02973 AtCoder Beginner Contest 134 - Sequence Decomposing", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1\n:\nA_N", "testcase": ["5\n1\n2\n3\n4\n5", "3\n0\n0\n0", "10\n1000000000\n999999999\n888888888\n777777777\n666666666\n555555555\n444444444\n333333333\n222222222\n111111111", "1\n500000000", "2\n0\n1000000000", "6\n23\n68\n99\n12\n45\n77", "8\n1\n1\n2\n3\n5\n8\n13\n21", "4\n999\n1000\n1001\n1002", "7\n345\n6789\n12345\n23456\n78901\n345678\n987654", "9\n123456789\n234567890\n345678901\n456789012\n567890123\n678901234\n789012345\n890123456\n901234567"]}
{"name": "p02976 AtCoder Grand Contest 035 - Even Degrees", "description": "Constraints\n\n* 2 <= N <= 10^5\n* N-1 <= M <= 10^5\n* 1 <= A_i,B_i <= N (1<= i<= M)\n* The given graph is simple and connected.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nA_1 B_1\n:\nA_M B_M", "testcase": ["3 2\n1 2\n2 3", "4 3\n1 2\n2 3\n3 4", "5 4\n1 2\n2 3\n3 4\n4 5", "6 5\n1 2\n2 3\n3 4\n4 5\n5 6", "5 5\n1 2\n2 3\n3 4\n4 5\n2 5", "7 6\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7", "10 9\n1 2\n2 3\n4 5\n5 6\n6 7\n7 8\n8 9\n9 10\n3 10", "4 4\n1 2\n2 3\n3 4\n1 4", "8 7\n1 2\n2 3\n3 4\n4 5\n5 6\n6 7\n4 8", "10 10\n1 2\n3 4\n5 6\n7 8\n9 10\n2 3\n4 5\n6 7\n8 9\n10 1"]}
{"name": "p03003 AtCoder Beginner Contest 130 - Common Subsequence", "description": "Constraints\n\n* 1 <= N, M <= 2 * 10^3\n* The length of S is N.\n* The length of T is M.\n* 1 <= S_i, T_i <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nS_1 S_2 ... S_{N-1} S_{N}\nT_1 T_2 ... T_{M-1} T_{M}", "testcase": ["2 3\n1 100\n1000 10000 100000", "1 1\n54321\n12345", "3 2\n123 234 345\n6789 9876", "4 4\n444 555 666 777\n1234 2345 3456 4567", "5 5\n1000 2000 3000 4000 5000\n6000 7000 8000 9000 10000", "2 2\n1 1\n1 1", "6 3\n10 20 30 40 50 60\n70 80 90", "10 10\n100 200 300 400 500 600 700 800 900 1000\n2000 3000 4000 5000 6000 7000 8000 9000 10000 11000", "7 8\n7777 8888 9999 1010 2020 3030 4040\n5050 6060 7070 8080 9090 1001 2002 3003", "8 6\n1234 2345 3456 4567 5678 6789 7890 8901\n9012 10123 11111 12121 13131 14141"]}
{"name": "p03013 AtCoder Beginner Contest 129 - Typical Stairs", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 0 <= M <= N-1\n* 1 <= a_1 < a_2 < ... < a_M <= N-1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\na_1\na_2\n.\n.\n.\na_M", "testcase": ["5 2\n1\n3", "10 0\n", "15 3\n2\n7\n14", "100000 4\n1\n50000\n75000\n99999", "7 3\n1\n4\n6", "20 1\n19", "50 5\n10\n20\n30\n40\n49", "100 2\n50\n99", "8 4\n1\n2\n3\n7", "30 3\n10\n20\n29"]}
{"name": "p03032 AtCoder Beginner Contest 128 - equeue", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 50\n* 1 <= K <= 100\n* -10^7 <= V_i <= 10^7\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN K\nV_1 V_2 ... V_N", "testcase": ["3 5\n-10000000 -9999999 5000000", "1 1\n0", "10 15\n10000000 9999999 8888888 7777777 6666666 5555555 4444444 3333333 2222222 1111111", "50 100\n-5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000 8000000 9000000 10000000 -10000000 -9000000 -8000000 -7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000", "5 50\n-1 -2 -3 -4 -5", "4 4\n10000000 10000000 10000000 10000000", "7 10\n-10000000 0 10000000 -9999999 9999999 -8888888 8888888", "20 50\n1 -1 2 -2 3 -3 4 -4 5 -5 6 -6 7 -7 8 -8 9 -9 10 -10", "30 80\n500 1000 1500 -2000 -2500 3000 3500 4000 -4500 5000 -5500 6000 -6500 7000 -7500 8000 -8500 9000 -9500 10000 -10500 11000 -11500 12000 -12500 13000 -13500 14000 -14500 15000", "15 20\n-7000000 -6000000 -5000000 -4000000 -3000000 -2000000 -1000000 0 1000000 2000000 3000000 4000000 5000000 6000000 7000000"]}
{"name": "p03076 AtCoder Beginner Contest 123 - Five Dishes", "description": "Constraints\n\n* A, B, C, D and E are integers between 1 and 123 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA\nB\nC\nD\nE", "testcase": ["1\n2\n3\n4\n5", "123\n1\n2\n3\n4", "5\n11\n23\n45\n67", "117\n116\n115\n114\n113", "22\n33\n44\n55\n66", "99\n98\n97\n96\n95", "13\n26\n39\n52\n65", "100\n90\n80\n70\n60", "8\n16\n24\n32\n40", "77\n88\n99\n110\n121"]}
{"name": "p03105 AtCoder Beginner Contest 120 - Favorite Sound", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A, B, C <= 100\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B C", "testcase": ["2 3 4", "1 1 1", "5 10 15", "6 14 25", "22 33 44", "55 60 80", "77 50 30", "100 100 100", "88 76 54", "99 47 83"]}
{"name": "p03125 AtCoder Beginner Contest 118 - B +/- A", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= A <= B <= 20\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["1 1", "2 5", "3 10", "4 4", "5 15", "6 20", "7 7", "8 19", "9 9", "10 20"]}
{"name": "p03137 AtCoder Beginner Contest 117 - Streamline", "description": "Constraints\n\n* All values in input are integers.\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* -10^5 <= X_i <= 10^5\n* X_1, X_2, ..., X_M are all different.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nX_1 X_2 ... X_M", "testcase": ["1 2\n-100000 100000", "3 3\n1000 -5000 15000", "10 5\n-310 340 567 -45 123", "100000 1\n99999", "99999 2\n-99999 0", "50000 10\n-40000 -32000 -28000 -15000 -123 1000 12345 67890 99999 100000", "4 4\n-100 0 100 1000", "2 2\n-99999 99998", "100 5\n-345 234 789 -12 -678", "10 10\n-10 -20 -30 -40 -50 60 70 80 90 100"]}
{"name": "p03168 Educational DP Contest - Coins", "description": "Constraints\n\n* N is an odd number.\n* 1 <= N <= 2999\n* p_i is a real number and has two decimal places.\n* 0 < p_i < 1\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\np_1 p_2 ... p_N", "testcase": ["3\n0.25 0.33 0.50", "5\n0.10 0.20 0.30 0.40 0.50", "7\n0.15 0.25 0.35 0.45 0.55 0.65 0.75", "1\n0.88", "11\n0.01 0.02 0.03 0.04 0.05 0.06 0.07 0.08 0.09 0.10 0.11", "9\n0.22 0.44 0.66 0.88 0.21 0.43 0.65 0.87 0.12", "3\n0.68 0.72 0.99", "5\n0.12 0.34 0.56 0.78 0.90", "13\n0.45 0.46 0.47 0.48 0.49 0.50 0.51 0.52 0.53 0.54 0.55 0.56 0.57", "7\n0.31 0.32 0.33 0.34 0.35 0.36 0.37"]}
{"name": "p03219 AtCoder Beginner Contest 113 - Discount Fare", "description": "Constraints\n\n* 1 <= X,Y <= 100\n* Y is an even number.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nX Y", "testcase": ["1 2", "5 8", "20 22", "33 66", "99 98", "13 14", "42 50", "15 20", "7 16", "88 100"]}
{"name": "p03221 AtCoder Beginner Contest 113 - ID", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= M <= 10^5\n* 1 <= P_i <= N\n* 1 <= Y_i <= 10^9\n* Y_i are all different.\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M\nP_1 Y_1\n:\nP_M Y_M", "testcase": [""]}
{"name": "p03288 AtCoder Beginner Contest 104 - Rated for Me", "description": "Constraints\n\n* 0 <= R <= 4208\n* R is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nR", "testcase": ["0", "4208", "2134", "1", "2048", "1987", "3500", "123", "4096", "3199"]}
{"name": "p03293 AtCoder Beginner Contest 103 - String Rotation", "description": "Constraints\n\n* 2 <= |S| <= 100\n* |S| = |T|\n* S and T consist of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS\nT", "testcase": ["abcd\nbcda", "hello\nohell", "programming\ngrammingpro", "rotation\ntationro", "challenge\nallengech", "example\nampleex", "testcase\nestcaset", "twowords\nowordstw", "shuffle\nffleshu", "keyboard\noardkeyb"]}
{"name": "p03307 AtCoder Beginner Contest 102 - Multiple of 2 and N", "description": "Constraints\n\n* 1 <= N <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "2", "10", "100", "9999999", "123456789", "987654321", "1000000000", "505050505", "87654321"]}
{"name": "p03309 AtCoder Beginner Contest 102 - Linear Approximation", "description": "Constraints\n\n* 1 <= N <= 2 * 10^5\n* 1 <= A_i <= 10^9\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nA_1 A_2 ... A_N", "testcase": ["1\n1", "2\n2 3", "3\n9 8 7", "4\n1000000000 1000000000 1000000000 1000000000", "5\n435 234 567 78 900", "6\n1 1 1 1 1 1", "7\n8234567 2345678 3456789 4567890 5678901 6789012 7890123", "8\n2 4 6 8 10 12 14 16", "9\n999999999 888888888 777777777 666666666 555555555 444444444 333333333 222222222 111111111", "10\n100 200 300 400 500 600 700 800 900 1000"]}
{"name": "p03324 AtCoder Beginner Contest 100 - Ringo's Favorite Numbers", "description": "Constraints\n\n* D is 0, 1 or 2.\n* N is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nD N", "testcase": ["0 1", "1 50", "2 100", "0 20", "1 88", "2 75", "0 99", "1 1", "2 45", "0 100"]}
{"name": "p03327 AtCoder Beginner Contest 099 - ABD", "description": "Constraints\n\n* 1 <= N <= 1998\n* N is an integer.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN", "testcase": ["1", "25", "999", "1500", "1998", "42", "127", "1984", "666", "1313"]}
{"name": "p03337 AtCoder Beginner Contest 098 - Add Sub Mul", "description": "Constraints\n\n* -1000 <= A,B <= 1000\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nA B", "testcase": ["-1000 -1000", "-500 500", "0 0", "325 -123", "42 42", "999 1000", "-999 -999", "100 -999", "1 -1", "-425 425"]}
{"name": "p03338 AtCoder Beginner Contest 098 - Cut and Count", "description": "Constraints\n\n* 2 <= N <= 100\n* |S| = N\n* S consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nS", "testcase": ["2\nab", "5\nhello", "10\nabcdefghij", "8\nrainbowx", "6\nplanet", "4\nmood", "7\nfriends", "3\nsky", "9\nchocolate", "100\nabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwx"]}
{"name": "p03346 AtCoder Grand Contest 024 - Backfront", "description": "Constraints\n\n* 1 <= N <= 2* 10^5\n* (P_1,P_2,...,P_N) is a permutation of (1,2,...,N).\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nP_1\n:\nP_N", "testcase": ["3\n1\n2\n3", "4\n4\n3\n2\n1", "5\n3\n5\n2\n4\n1", "2\n2\n1", "6\n6\n4\n2\n5\n3\n1", "7\n1\n3\n4\n2\n6\n7\n5", "3\n2\n3\n1", "5\n2\n1\n4\n5\n3", "6\n6\n1\n5\n3\n4\n2", "3\n3\n1\n2"]}
{"name": "p03369 AtCoder Beginner Contest 095 - Something on It", "description": "Constraints\n\n* S is a string of length 3.\n* Each character in S is `o` or `x`.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nS", "testcase": ["ooo", "oox", "oxo", "oxx", "xoo", "xox", "xxo", "xxx", "xoo", "oxo"]}
{"name": "p03370 AtCoder Beginner Contest 095 - Bitter Alchemy", "description": "Constraints\n\n* 2 <= N <= 100\n* 1 <= m_i <= 1000\n* m_1 + m_2 + ... + m_N <= X <= 10^5\n* All values in input are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN X\nm_1\nm_2\n:\nm_N", "testcase": ["3 100\n10\n20\n30", "2 200\n50\n150", "4 300\n40\n60\n80\n100", "5 1000\n200\n200\n200\n200\n200", "10 5000\n100\n200\n300\n400\n500\n600\n700\n800\n900\n1000", "8 800\n100\n90\n80\n70\n60\n50\n40\n30", "6 600\n99\n99\n99\n99\n99\n105", "9 445\n49\n48\n47\n46\n45\n44\n43\n42\n41", "7 1234\n150\n140\n130\n120\n110\n100\n90", "4 987\n250\n245\n244\n248"]}
{"name": "p03434 AtCoder Beginner Contest 088 - Card Game for Two", "description": "Constraints\n\n* N is an integer between 1 and 100 (inclusive).\n* a_i \\ (1 <= i <= N) is an integer between 1 and 100 (inclusive).\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\na_1 a_2 a_3 ... a_N", "testcase": ["1\n1", "2\n1 2", "5\n10 20 30 40 50", "3\n99 98 97", "4\n1 1 1 1", "6\n54 23 78 56 30 45", "7\n16 87 27 65 12 9 100", "10\n1 1 2 3 5 8 13 21 34 55", "8\n47 11 85 23 16 32 64 128", "9\n3 6 9 12 15 18 21 24 27"]}
{"name": "p03470 AtCoder Beginner Contest 085 - Kagami Mochi", "description": "Constraints\n\n* 1 <= N <= 100\n* 1 <= d_i <= 100\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN\nd_1\n:\nd_N", "testcase": ["3\n1\n50\n100", "5\n20\n1\n35\n99\n2", "1\n1", "7\n15\n15\n15\n15\n15\n15\n15", "2\n100\n100", "4\n5\n10\n30\n70", "6\n1\n2\n3\n4\n5\n6", "10\n11\n22\n33\n44\n55\n66\n77\n88\n99\n10", "8\n8\n16\n24\n32\n40\n48\n56\n64", "9\n9\n18\n27\n36\n45\n54\n63\n72\n81"]}
{"name": "p03472 AtCoder Beginner Contest 085 - Katana Thrower", "description": "Constraints\n\n* 1 <= N <= 10^5\n* 1 <= H <= 10^9\n* 1 <= a_i <= b_i <= 10^9\n* All input values are integers.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN H\na_1 b_1\n:\na_N b_N", "testcase": ["2 100\n10 20\n30 40", "3 100000\n1000 10000\n2000 20000\n1500 90999", "1 1000000000\n999999999 1000000000", "4 500\n123 456\n789 888\n1 77\n65 400", "5 123456\n101 202\n303 404\n505 606\n707 808\n909 1000", "6 987654321\n123456789 987654321\n234567890 876543210\n345678901 765432109\n123 321\n456 654\n789 987", "3 300000000\n1000000 100000000\n2000000 200000000\n3000000 300000000", "10 100000\n1 1\n2 2\n3 3\n4 4\n5 5\n6 6\n7 7\n8 8\n9 9\n10 10", "7 7654321\n2000000 5000000\n3000001 6000001\n4000002 7000002\n5000003 8000003\n6000004 9000004\n7000005 10000005\n8000006 11000006", "8 350\n5 95\n10 200\n50 88\n30 99\n22 44\n77 155\n60 120\n8 48"]}
{"name": "p03569 CODE FESTIVAL 2017 qual C - Inserting 'x'", "description": "Constraints\n\n* 1 <= |s| <= 10^5\n* s consists of lowercase English letters.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\ns", "testcase": ["a", "bcdefghijklmnopqrstuvwxyz", "example", "longtestcasetochecktheupperbound", "simpletest", "short", "mediumlength", "lowercaseletters", "anotherexampletestcase", "fulllengthtestcaseaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa"]}
{"name": "p03592 CODE FESTIVAL 2017 qual A - fLIP", "description": "Constraints\n\n* 1 <= N,M <= 1000\n* 0 <= K <= NM\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nN M K", "testcase": ["1 1 0", "2 2 4", "1000 1000 1000000", "100 200 15000", "500 500 250000", "300 400 0", "800 600 480000", "50 50 2500", "999 999 998001", "1000 1 1000"]}
{"name": "p03761 AtCoder Beginner Contest 058 - Dubious Document", "description": "Constraints\n\n* 1 <= n <= 50\n* 1 <= |S_i| <= 50 for every i = 1, ..., n.\n* S_i consists of lowercase English letters (`a` - `z`) for every i = 1, ..., n.\n\nInput\n\nInput is given from Standard Input in the following format:\n\n\nn\nS_1\n...\nS_n", "testcase": ["3\nabc\ndef\nghi", "1\nz", "2\na\nbc", "5\nabcde\nfghij\nklmno\npqrst\nuvwxyz", "4\na\nbb\nccc\ndddd", "6\ng\nhh\niii\njjjj\nkkkkk\nllllll", "7\nm\nnn\nooo\npppp\nqqqqq\nrrrrrr\nsssssss", "3\nxyz\nab\nqwert", "8\nabac\nbdecf\ncdade\ndeafb\nefacg\nfeggdh\nghie\nhi", "10\ng\nt\na\nb\nr\nl\np\ne\nk\nm"]}
{"name": "p03821 AtCoder Grand Contest 009 - Multiple Array", "description": "Constraints\n\n* All input values are integers.\n* 1 <= N <= 10^5\n* 0 <= A_i <= 10^9(1 <= i <= N)\n* 1 <= B_i <= 10^9(1 <= i <= N)\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nN\nA_1 B_1\n:\nA_N B_N", "testcase": ["4\n2 3\n5 6\n1 7\n9 8", "1\n0 1000000000", "3\n234 987654321\n678905 123456789\n100000000 98765432", "5\n4321 1234\n56789 9876\n12345 67890\n98765 43210\n11111 22222", "6\n10000000 99999999\n88888888 11111111\n22222222 33333333\n44444444 55555555\n66666666 77777777\n88888888 99999999", "10\n10 20\n20 30\n30 40\n40 50\n50 60\n60 70\n70 80\n80 90\n90 100\n100 110", "2\n500000000 600000000\n700000000 800000000", "8\n1 100000000\n2 200000000\n3 300000000\n4 400000000\n5 500000000\n6 600000000\n7 700000000\n8 800000000", "7\n99999999 100000000\n88888888 900000000\n77777777 800000000\n66666666 700000000\n55555555 600000000\n44444444 500000000\n33333333 400000000", "3\n100000000 1000000000\n200000000 900000000\n300000000 800000000"]}
{"name": "p03854 AtCoder Beginner Contest 049 - Daydream", "description": "Constraints\n\n* 1<=|S|<=10^5\n* S consists of lowercase English letters.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["a", "abcdefghijklmnopqrstuvwxyz", "testinput", "randomcase", "example", "stringwithlength", "lowercaseletters", "anotherexampletest", "onecharacter", "thelasttestcase"]}
{"name": "p03975 Kyoto University Programming Contest 2016 - A Barricade", "description": "Input\n\nN, A and B are given on the first line and t_i is given on the (i+1)-th line.\n\n\nN A B\nt1\n:\ntN", "testcase": ["3 10 20\n5\n15\n25", "2 5 10\n5\n10", "4 1 100\n20\n30\n40\n50", "5 20 30\n25\n25\n25\n25\n25", "6 5 15\n6\n7\n8\n9\n10\n11", "3 0 0\n0\n0\n0", "4 100 200\n150\n160\n170\n180", "1 10 10\n10", "7 5 20\n4\n5\n6\n7\n8\n9\n10", "10 1 50\n1\n2\n3\n4\n5\n6\n7\n8\n9\n10"]}
{"name": "p03994 CODE FESTIVAL 2016 qual A - Next Letter", "description": "Constraints\n\n* 1<=|s|<=10^5\n* All letters in s are lowercase English letters.\n* 1<=K<=10^9\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\ns\nK", "testcase": ["a\n1", "abcde\n10", "xyzbac\n999", "pqrstuvwxy\n1000000000", "abcdefghij\n12345", "klmnopqrst\n987654321", "z\n50", "yzyzyz\n3", "abcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghijabcdefghij\n678901234", "aabbccddeeffgghhiijjkkllmmnnooppqqrrssttuuvvwwxxyyzz\n10000000"]}
{"name": "p04019 AtCoder Grand Contest 003 - Wanna go back home", "description": "Constraints\n\n* 1 <= | S | <= 1000\n* S consists of the letters `N`, `W`, `S`, `E`.\n\nInput\n\nThe input is given from Standard Input in the following format:\n\n\nS", "testcase": ["N", "NEESESWNW", "NNNNNNNNNNNNNNNNNNNN", "ESSSSSWWWWNNNNEEEE", "WWWWWWWWWWWWWWWWWWWWW", "ENEWNENEWNENWNESW", "SSSSSSSSSSSEENNNNNWWWW", "E", "SWNWSESWNWWENWE", "SSEENWNW"]}
